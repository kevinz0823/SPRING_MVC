<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 扫描注解bean -->
	<context:component-scan base-package="com.fhzz"/>

	<!-- Oracle数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${connection.driver_class}" />
		<property name="jdbcUrl" value="${connection.url}" />
		<property name="user" value="${connection.username}" />
		<property name="password" value="${connection.password}" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="150" />
		<property name="maxIdleTime" value="60" />
		<property name="acquireIncrement" value="5" />
		<property name="maxStatements" value="0" />
		<property name="initialPoolSize" value="10" />
		<property name="idleConnectionTestPeriod" value="60" />
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<!-- Hibernate sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.fhzz.business.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<prop key="hibernate.default_batch_fetch_size">16</prop>
				<prop key="hibernate.max_fetch_depth">2</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
				<prop key="current_session_context_class">thread</prop>
				<prop key="hibernate.connection.autoReconnect">true</prop>
				<prop key="hibernate.connection.autoReconnectForPools">true</prop>
				<prop key="hibernate.connection.is-connection-validation-required">true</prop>
				<!-- 缓存Cache配置 -->
				<!-- 打开二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- 查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.SingletonEhCacheRegionFactory
				</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider
				</prop>
				<prop key="net.sf.ehcache.configurationResourceName">config/spring/ehcache-hibernate.xml</prop>
				<prop key="hibernate.cache.use_structured_entries">true</prop>
			</props>
		</property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="hibernateTemplate" class="com.fhzz.core.dao.HibernateTemplateSupport">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Spring Security相关的bean定义 -->
	<!-- 定义上下文返回的消息的国际化,文件名不要加.properties后缀,否则无法找到文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:config/spring-security-message" />
	</bean>

	<!-- 启用用户的缓存功能 -->
	<bean id="userCache"
		class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
		<property name="cache" ref="userEhCache" />
	</bean>

	<bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheName" value="userCache" />
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<!-- 此处需要设置cacheManagerName,否则会与hibernate使用ehcache缓存冲突 -->
		<property name="cacheManagerName" value="userCacheManager" />
		<property name="configLocation" value="classpath:config/spring/ehcache-user.xml" />
	</bean>

	<!-- Spring Security accessDecisionManager 决策管理器 -->
	<!-- AffirmativeBased 一票通过，只要有一个投票器通过就允许访问 -->
	<!-- ConsensusBased 有一半以上投票器通过才允许访问资源 -->
	<!-- UnanimousBased 所有投票器都通过才允许访问 -->
	<!-- 注入 roleVoter修改rolePrefix,否则Spring要求权限必须以ROLE_开头 -->
	<bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg name="decisionVoters">
			<list>
				<ref bean="roleVoter" />
				<ref bean="authenticatedVoter" />
			</list>
		</constructor-arg>
		<property name="messageSource" ref="messageSource"></property>
	</bean>

	<!-- 修改rolePrefix,否则Spring要求权限必须以ROLE_开头 -->
	<bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
		<property name="rolePrefix" value=""></property>
	</bean>

	<!-- authenticatedVoter是为了支持IS_AUTHENTICATED这种认证，authenticatedVoter提供的3种认证，分别是 -->
	<!-- IS_AUTHENTICATED_ANONYMOUSLY 允许匿名用户进入 -->
	<!-- IS_AUTHENTICATED_FULLY 允许登录用户进入 -->
	<!-- IS_AUTHENTICATED_REMEMBERED 允许登录用户和rememberMe用户进入 -->
	<bean id="authenticatedVoter"
		class="org.springframework.security.access.vote.AuthenticatedVoter" />

</beans>