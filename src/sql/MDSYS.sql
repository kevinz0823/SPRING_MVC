/*
Navicat Oracle Data Transfer
Oracle Client Version : 11.2.0.1.0

Source Server         : 主卧台式机PSOPUSER
Source Server Version : 110200
Source Host           : 127.0.0.1:1521
Source Schema         : MDSYS

Target Server Type    : ORACLE
Target Server Version : 110200
File Encoding         : 65001

Date: 2018-02-07 18:37:30
*/


-- ----------------------------
-- Table structure for CSW_CAPABILITIESINFO$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_CAPABILITIESINFO$";
CREATE TABLE "MDSYS"."CSW_CAPABILITIESINFO$" (
"UPDATESEQUENCE" NUMBER NULL ,
"CAPABILITIESINFOTMPL" "PUBLIC"."XMLTYPE" NULL ,
"LASTCAPABILITYINFOUPDTS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_DOMAININFO$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_DOMAININFO$";
CREATE TABLE "MDSYS"."CSW_DOMAININFO$" (
"RECORDTYPEID" NUMBER NULL ,
"PROPERTYNAME" VARCHAR2(100 BYTE) NULL ,
"PARAMETERNAME" VARCHAR2(100 BYTE) NULL ,
"PVALUE" "MDSYS"."STRINGLIST" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_HARVESTMETADATA$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_HARVESTMETADATA$";
CREATE TABLE "MDSYS"."CSW_HARVESTMETADATA$" (
"HARVESTREQID" NUMBER NULL ,
"HARVESTINFO" "PUBLIC"."XMLTYPE" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_PLUGIN_MAP$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_PLUGIN_MAP$";
CREATE TABLE "MDSYS"."CSW_PLUGIN_MAP$" (
"TYPENS" VARCHAR2(2083 BYTE) NULL ,
"TYPENAME" VARCHAR2(80 BYTE) NULL ,
"PLUGINNAME" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_RECORD_TYPES$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_RECORD_TYPES$";
CREATE TABLE "MDSYS"."CSW_RECORD_TYPES$" (
"RECORDTYPEID" NUMBER NOT NULL ,
"TYPENAME" VARCHAR2(80 BYTE) NULL ,
"TYPENAMENS" VARCHAR2(2083 BYTE) NULL ,
"DESCRIBERECORD" "PUBLIC"."XMLTYPE" NULL ,
"DATAPOINTER" VARCHAR2(61 BYTE) NULL ,
"IDPATHS" "MDSYS"."STRINGLIST" NULL ,
"SPATIALPATHS" "MDSYS"."STRINGLIST" NULL ,
"TSPATHS" "MDSYS"."STRINGLIST" NULL ,
"LASTUPDATETS" TIMESTAMP(6)  NULL ,
"BRIEFXSLPATTERN" "PUBLIC"."XMLTYPE" DEFAULT NULL  NULL ,
"SUMMARYXSLPATTERN" "PUBLIC"."XMLTYPE" DEFAULT NULL  NULL ,
"DCMIXSLPATTERN" "PUBLIC"."XMLTYPE" DEFAULT NULL  NULL ,
"SRSPATHS" "MDSYS"."STRINGLIST" NULL ,
"SRSNS" VARCHAR2(2083 BYTE) NULL ,
"SRSNSALIAS" VARCHAR2(80 BYTE) NULL ,
"RTXSDREFID" VARCHAR2(80 BYTE) NULL ,
"NUMCOLS" "MDSYS"."STRINGLIST" NULL ,
"IDXPATHS" "MDSYS"."STRINGLIST" NULL ,
"IDXPATHTYPES" "MDSYS"."STRINGLIST" NULL ,
"XTIDXCREATED" VARCHAR2(1 BYTE) NULL ,
"IDEXTRACTORTYPE" VARCHAR2(20 BYTE) NULL ,
"ISGML3" VARCHAR2(1 BYTE) NULL ,
"SPATIALARRLIST" "MDSYS"."STRINGLISTLIST" NULL ,
"SPATIALPATHSSRSNSLIST" "MDSYS"."STRINGLISTLIST" NULL ,
"SPATIALARRPATHSSRSNSLIST" "MDSYS"."STRINGLISTLIST" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_RECORDDOMAINUPDATED$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_RECORDDOMAINUPDATED$";
CREATE TABLE "MDSYS"."CSW_RECORDDOMAINUPDATED$" (
"RECORDTYPEID" NUMBER NULL ,
"UPDATETS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_RECORDTABLEMDUPDATED$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_RECORDTABLEMDUPDATED$";
CREATE TABLE "MDSYS"."CSW_RECORDTABLEMDUPDATED$" (
"RECORDTYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"RECORDTYPENAME" VARCHAR2(80 BYTE) NULL ,
"UPDATETS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_RECORDTABLEUPDATED$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_RECORDTABLEUPDATED$";
CREATE TABLE "MDSYS"."CSW_RECORDTABLEUPDATED$" (
"RECORDTYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"RECORDTYPENAME" VARCHAR2(80 BYTE) NULL ,
"ROWLIST" "MDSYS"."ROWPOINTERLIST" NULL ,
"UPDATETS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_RECORDVIEWMAP$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_RECORDVIEWMAP$";
CREATE TABLE "MDSYS"."CSW_RECORDVIEWMAP$" (
"RECORDTYPENS" VARCHAR2(2083 BYTE) NULL ,
"VIEWSRCNAME" VARCHAR2(80 BYTE) NULL ,
"TARGETTYPENAME" VARCHAR2(80 BYTE) NULL ,
"MAPINFO" "PUBLIC"."XMLTYPE" NULL ,
"MAPTYPE" VARCHAR2(20 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_RTXSDINFO$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_RTXSDINFO$";
CREATE TABLE "MDSYS"."CSW_RTXSDINFO$" (
"RTXSDREFID" VARCHAR2(80 BYTE) NOT NULL ,
"RTDEF" "PUBLIC"."XMLTYPE" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CSW_TRG_TABLE_TEMP$
-- ----------------------------
DROP TABLE "MDSYS"."CSW_TRG_TABLE_TEMP$";
CREATE TABLE "MDSYS"."CSW_TRG_TABLE_TEMP$" (
"R" ROWID NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for CURRENTSESSIONTOKENMAP_T$
-- ----------------------------
DROP TABLE "MDSYS"."CURRENTSESSIONTOKENMAP_T$";
CREATE TABLE "MDSYS"."CURRENTSESSIONTOKENMAP_T$" (
"SESSIONID" VARCHAR2(30 BYTE) NOT NULL ,
"TOKENID" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for FINAL_PARTITION
-- ----------------------------
DROP TABLE "MDSYS"."FINAL_PARTITION";
CREATE TABLE "MDSYS"."FINAL_PARTITION" (
"VERTEX_ID" NUMBER NULL ,
"P_ID" NUMBER NULL ,
"X" NUMBER NULL ,
"Y" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for MD$RELATE
-- ----------------------------
DROP TABLE "MDSYS"."MD$RELATE";
CREATE TABLE "MDSYS"."MD$RELATE" (
"SDO_MASK" CHAR(9 BYTE) NOT NULL ,
"SDO_RELATION" VARCHAR2(30 BYTE) NULL ,
"DEFINER" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for NDM_FINAL_PARTITION
-- ----------------------------
DROP TABLE "MDSYS"."NDM_FINAL_PARTITION";
CREATE TABLE "MDSYS"."NDM_FINAL_PARTITION" (
"VERTEX_ID" NUMBER NULL ,
"P_ID" NUMBER NULL ,
"X" NUMBER NULL ,
"Y" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for NDM_PARTITION_TMP_2
-- ----------------------------
DROP TABLE "MDSYS"."NDM_PARTITION_TMP_2";
CREATE TABLE "MDSYS"."NDM_PARTITION_TMP_2" (
"VERTEX_ID" NUMBER NULL ,
"P_ID" NUMBER NULL ,
"X" NUMBER NULL ,
"Y" NUMBER NULL ,
"M" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for NDM_PARTITION_TMP_3
-- ----------------------------
DROP TABLE "MDSYS"."NDM_PARTITION_TMP_3";
CREATE TABLE "MDSYS"."NDM_PARTITION_TMP_3" (
"VERTEX_ID" NUMBER NULL ,
"P_ID" NUMBER NULL ,
"X" NUMBER NULL ,
"Y" NUMBER NULL ,
"M" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for NTV2_XML_DATA
-- ----------------------------
DROP TABLE "MDSYS"."NTV2_XML_DATA";
CREATE TABLE "MDSYS"."NTV2_XML_DATA" (
"NTV2_FILE_ID" NUMBER NOT NULL ,
"SEQUENCE_NUMBER" NUMBER NOT NULL ,
"XML" "PUBLIC"."XMLTYPE" NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OGIS_GEOMETRY_COLUMNS
-- ----------------------------
DROP TABLE "MDSYS"."OGIS_GEOMETRY_COLUMNS";
CREATE TABLE "MDSYS"."OGIS_GEOMETRY_COLUMNS" (
"F_TABLE_SCHEMA" VARCHAR2(64 BYTE) NULL ,
"F_TABLE_NAME" VARCHAR2(64 BYTE) NULL ,
"F_GEOMETRY_COLUMN" VARCHAR2(64 BYTE) NULL ,
"G_TABLE_SCHEMA" VARCHAR2(64 BYTE) NULL ,
"G_TABLE_NAME" VARCHAR2(64 BYTE) NULL ,
"STORAGE_TYPE" NUMBER NULL ,
"GEOMETRY_TYPE" NUMBER NULL ,
"COORD_DIMENSION" NUMBER NULL ,
"MAX_PPR" NUMBER NULL ,
"SRID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OGIS_SPATIAL_REFERENCE_SYSTEMS
-- ----------------------------
DROP TABLE "MDSYS"."OGIS_SPATIAL_REFERENCE_SYSTEMS";
CREATE TABLE "MDSYS"."OGIS_SPATIAL_REFERENCE_SYSTEMS" (
"SRID" NUMBER NOT NULL ,
"AUTH_NAME" VARCHAR2(100 BYTE) NULL ,
"AUTH_SRID" NUMBER NULL ,
"SRTEXT" VARCHAR2(1000 BYTE) NULL ,
"SRNUM" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OLS_DIR_BUSINESS_CHAINS
-- ----------------------------
DROP TABLE "MDSYS"."OLS_DIR_BUSINESS_CHAINS";
CREATE TABLE "MDSYS"."OLS_DIR_BUSINESS_CHAINS" (
"CHAIN_ID" NUMBER NOT NULL ,
"CHAIN_NAME" VARCHAR2(128 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OLS_DIR_BUSINESSES
-- ----------------------------
DROP TABLE "MDSYS"."OLS_DIR_BUSINESSES";
CREATE TABLE "MDSYS"."OLS_DIR_BUSINESSES" (
"BUSINESS_ID" NUMBER NOT NULL ,
"BUSINESS_NAME" VARCHAR2(128 BYTE) NOT NULL ,
"CHAIN_ID" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(1024 BYTE) NULL ,
"PHONE" VARCHAR2(64 BYTE) NULL ,
"COUNTRY" VARCHAR2(64 BYTE) NOT NULL ,
"COUNTRY_SUBDIVISION" VARCHAR2(128 BYTE) NULL ,
"COUNTRY_SECONDARY_SUBDIV" VARCHAR2(128 BYTE) NULL ,
"MUNICIPALITY" VARCHAR2(128 BYTE) NULL ,
"MUNICIPALITY_SUBDIVISION" VARCHAR2(128 BYTE) NULL ,
"POSTAL_CODE" VARCHAR2(32 BYTE) NOT NULL ,
"POSTAL_CODE_EXT" VARCHAR2(32 BYTE) NULL ,
"STREET" VARCHAR2(128 BYTE) NOT NULL ,
"INTERSECTING_STREET" VARCHAR2(128 BYTE) NULL ,
"BUILDING" VARCHAR2(64 BYTE) NULL ,
"PARAMETERS" "PUBLIC"."XMLTYPE" NULL ,
"GEOM" "MDSYS"."SDO_GEOMETRY" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OLS_DIR_CATEGORIES
-- ----------------------------
DROP TABLE "MDSYS"."OLS_DIR_CATEGORIES";
CREATE TABLE "MDSYS"."OLS_DIR_CATEGORIES" (
"CATEGORY_ID" VARCHAR2(32 BYTE) NOT NULL ,
"CATEGORY_TYPE_ID" NUMBER NOT NULL ,
"CATEGORY_NAME" VARCHAR2(128 BYTE) NOT NULL ,
"PARENT_ID" VARCHAR2(32 BYTE) NULL ,
"PARAMETERS" "PUBLIC"."XMLTYPE" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OLS_DIR_CATEGORIZATIONS
-- ----------------------------
DROP TABLE "MDSYS"."OLS_DIR_CATEGORIZATIONS";
CREATE TABLE "MDSYS"."OLS_DIR_CATEGORIZATIONS" (
"BUSINESS_ID" NUMBER NOT NULL ,
"CATEGORY_ID" VARCHAR2(32 BYTE) NOT NULL ,
"CATEGORY_TYPE_ID" NUMBER NOT NULL ,
"CATEGORIZATION_TYPE" VARCHAR2(8 BYTE) DEFAULT 'EXPLICIT'  NULL ,
"USER_SPECIFIC_CATEG" VARCHAR2(32 BYTE) DEFAULT NULL  NULL ,
"PARAMETERS" "PUBLIC"."XMLTYPE" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OLS_DIR_CATEGORY_TYPES
-- ----------------------------
DROP TABLE "MDSYS"."OLS_DIR_CATEGORY_TYPES";
CREATE TABLE "MDSYS"."OLS_DIR_CATEGORY_TYPES" (
"CATEGORY_TYPE_ID" NUMBER NOT NULL ,
"CATEGORY_TYPE_NAME" VARCHAR2(128 BYTE) NOT NULL ,
"PARAMETERS" "PUBLIC"."XMLTYPE" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OLS_DIR_SYNONYMS
-- ----------------------------
DROP TABLE "MDSYS"."OLS_DIR_SYNONYMS";
CREATE TABLE "MDSYS"."OLS_DIR_SYNONYMS" (
"STANDARD_NAME" VARCHAR2(128 BYTE) NULL ,
"CATEGORY" VARCHAR2(128 BYTE) NULL ,
"AKA" VARCHAR2(128 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OPENLS_CLASSIFICATIONS
-- ----------------------------
DROP TABLE "MDSYS"."OPENLS_CLASSIFICATIONS";
CREATE TABLE "MDSYS"."OPENLS_CLASSIFICATIONS" (
"CRITERION" VARCHAR2(32 BYTE) NOT NULL ,
"CLASSIFICATION" VARCHAR2(32 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"CHARACTERISTIC_XPATH" VARCHAR2(1024 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OPENLS_NAMESPACES
-- ----------------------------
DROP TABLE "MDSYS"."OPENLS_NAMESPACES";
CREATE TABLE "MDSYS"."OPENLS_NAMESPACES" (
"SHORTCUT" VARCHAR2(8 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"URI" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OPENLS_NODES
-- ----------------------------
DROP TABLE "MDSYS"."OPENLS_NODES";
CREATE TABLE "MDSYS"."OPENLS_NODES" (
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"OPENLS" "PUBLIC"."XMLTYPE" NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OPENLS_XPATHS
-- ----------------------------
DROP TABLE "MDSYS"."OPENLS_XPATHS";
CREATE TABLE "MDSYS"."OPENLS_XPATHS" (
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"XPATH" VARCHAR2(1024 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for OPENLSSERVICES
-- ----------------------------
DROP TABLE "MDSYS"."OPENLSSERVICES";
CREATE TABLE "MDSYS"."OPENLSSERVICES" (
"SERVICE" VARCHAR2(32 BYTE) NOT NULL ,
"URL" VARCHAR2(128 BYTE) NULL ,
"VERSION" VARCHAR2(16 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PARTITION_TMP_2
-- ----------------------------
DROP TABLE "MDSYS"."PARTITION_TMP_2";
CREATE TABLE "MDSYS"."PARTITION_TMP_2" (
"VERTEX_ID" NUMBER NULL ,
"P_ID" NUMBER NULL ,
"X" NUMBER NULL ,
"Y" NUMBER NULL ,
"M" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for PARTITION_TMP_3
-- ----------------------------
DROP TABLE "MDSYS"."PARTITION_TMP_3";
CREATE TABLE "MDSYS"."PARTITION_TMP_3" (
"VERTEX_ID" NUMBER NULL ,
"P_ID" NUMBER NULL ,
"X" NUMBER NULL ,
"Y" NUMBER NULL ,
"M" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for ROWTOKENMAP_T$
-- ----------------------------
DROP TABLE "MDSYS"."ROWTOKENMAP_T$";
CREATE TABLE "MDSYS"."ROWTOKENMAP_T$" (
"TOKENID" VARCHAR2(100 BYTE) NULL ,
"TABLENAME" VARCHAR2(61 BYTE) NULL ,
"RPOINTER" ROWID NULL ,
"MARKEDDELETED" VARCHAR2(1 BYTE) DEFAULT NULL  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_3DTHEMES_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_3DTHEMES_TABLE";
CREATE TABLE "MDSYS"."SDO_3DTHEMES_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"BASE_TABLE" VARCHAR2(64 BYTE) NOT NULL ,
"THEME_COLUMN" VARCHAR2(2048 BYTE) NOT NULL ,
"STYLE_COLUMN" VARCHAR2(32 BYTE) NOT NULL ,
"THEME_TYPE" VARCHAR2(32 BYTE) NULL ,
"DEFINITION" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_3DTXFMS_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_3DTXFMS_TABLE";
CREATE TABLE "MDSYS"."SDO_3DTXFMS_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"TYPE" VARCHAR2(32 BYTE) NULL ,
"AFFINE_PARAMETERS" "MDSYS"."SDO_NUMBER_ARRAY" NULL ,
"COORD_TXFM_SRC_SRID" NUMBER NULL ,
"COORD_TXFM_TGT_SRID" NUMBER NULL ,
"TXFM_SERIES_IDS" "MDSYS"."SDO_NUMBER_ARRAY" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_ANIMATIONS_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_ANIMATIONS_TABLE";
CREATE TABLE "MDSYS"."SDO_ANIMATIONS_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"DEFINITION" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_ANNOTATION_TEXT_METADATA
-- ----------------------------
DROP TABLE "MDSYS"."SDO_ANNOTATION_TEXT_METADATA";
CREATE TABLE "MDSYS"."SDO_ANNOTATION_TEXT_METADATA" (
"F_TABLE_CATALOG" VARCHAR2(1000 BYTE) NULL ,
"F_TABLE_SCHEMA" VARCHAR2(32 BYTE) NOT NULL ,
"F_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"F_TEXT_COLUMN" VARCHAR2(1024 BYTE) NOT NULL ,
"MAP_BASE_SCALE" NUMBER NULL ,
"TEXT_DEFAULT_EXPRESSION" VARCHAR2(4000 BYTE) NULL ,
"TEXT_DEFAULT_ATTRIBUTES" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_CACHED_MAPS_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_CACHED_MAPS_TABLE";
CREATE TABLE "MDSYS"."SDO_CACHED_MAPS_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"TILES_TABLE" VARCHAR2(32 BYTE) NULL ,
"IS_ONLINE" VARCHAR2(3 BYTE) NOT NULL ,
"IS_INTERNAL" VARCHAR2(4 BYTE) NOT NULL ,
"DEFINITION" CLOB NOT NULL ,
"BASE_MAP" VARCHAR2(32 BYTE) NULL ,
"MAP_ADAPTER" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_AXES
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_AXES";
CREATE TABLE "MDSYS"."SDO_COORD_AXES" (
"COORD_SYS_ID" NUMBER(10) NOT NULL ,
"COORD_AXIS_NAME_ID" NUMBER(10) NULL ,
"COORD_AXIS_ORIENTATION" VARCHAR2(24 BYTE) NULL ,
"COORD_AXIS_ABBREVIATION" VARCHAR2(24 BYTE) NULL ,
"UOM_ID" NUMBER(10) NULL ,
"ORDER" NUMBER(5) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_AXIS_NAMES
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_AXIS_NAMES";
CREATE TABLE "MDSYS"."SDO_COORD_AXIS_NAMES" (
"COORD_AXIS_NAME_ID" NUMBER(10) NOT NULL ,
"COORD_AXIS_NAME" VARCHAR2(80 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_OP_METHODS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_OP_METHODS";
CREATE TABLE "MDSYS"."SDO_COORD_OP_METHODS" (
"COORD_OP_METHOD_ID" NUMBER(10) NOT NULL ,
"COORD_OP_METHOD_NAME" VARCHAR2(50 BYTE) NULL ,
"LEGACY_NAME" VARCHAR2(50 BYTE) DEFAULT NULL  NULL ,
"REVERSE_OP" NUMBER(1) NOT NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(40 BYTE) NULL ,
"IS_IMPLEMENTED_FORWARD" NUMBER(1) NOT NULL ,
"IS_IMPLEMENTED_REVERSE" NUMBER(1) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_OP_PARAM_USE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_OP_PARAM_USE";
CREATE TABLE "MDSYS"."SDO_COORD_OP_PARAM_USE" (
"COORD_OP_METHOD_ID" NUMBER(10) NOT NULL ,
"PARAMETER_ID" NUMBER(10) NULL ,
"LEGACY_PARAM_NAME" VARCHAR2(80 BYTE) DEFAULT NULL  NULL ,
"SORT_ORDER" NUMBER(5) NOT NULL ,
"PARAM_SIGN_REVERSAL" VARCHAR2(3 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_OP_PARAM_VALS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_OP_PARAM_VALS";
CREATE TABLE "MDSYS"."SDO_COORD_OP_PARAM_VALS" (
"COORD_OP_ID" NUMBER(10) NOT NULL ,
"COORD_OP_METHOD_ID" NUMBER(10) NULL ,
"PARAMETER_ID" NUMBER(10) NOT NULL ,
"PARAMETER_VALUE" FLOAT(49) NULL ,
"PARAM_VALUE_FILE_REF" VARCHAR2(254 BYTE) NULL ,
"PARAM_VALUE_FILE" CLOB DEFAULT NULL  NULL ,
"PARAM_VALUE_XML" "PUBLIC"."XMLTYPE" DEFAULT NULL  NULL ,
"UOM_ID" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_OP_PARAMS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_OP_PARAMS";
CREATE TABLE "MDSYS"."SDO_COORD_OP_PARAMS" (
"PARAMETER_ID" NUMBER(10) NOT NULL ,
"PARAMETER_NAME" VARCHAR2(80 BYTE) NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(40 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_OP_PATHS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_OP_PATHS";
CREATE TABLE "MDSYS"."SDO_COORD_OP_PATHS" (
"CONCAT_OPERATION_ID" NUMBER(10) NOT NULL ,
"SINGLE_OPERATION_ID" NUMBER(10) NULL ,
"SINGLE_OP_SOURCE_ID" NUMBER(10) NULL ,
"SINGLE_OP_TARGET_ID" NUMBER(10) NULL ,
"OP_PATH_STEP" NUMBER(5) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_OPS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_OPS";
CREATE TABLE "MDSYS"."SDO_COORD_OPS" (
"COORD_OP_ID" NUMBER(10) NOT NULL ,
"COORD_OP_NAME" VARCHAR2(80 BYTE) NULL ,
"COORD_OP_TYPE" VARCHAR2(24 BYTE) NULL ,
"SOURCE_SRID" NUMBER(10) NULL ,
"TARGET_SRID" NUMBER(10) NULL ,
"COORD_TFM_VERSION" VARCHAR2(24 BYTE) NULL ,
"COORD_OP_VARIANT" NUMBER(5) NULL ,
"COORD_OP_METHOD_ID" NUMBER(10) NULL ,
"UOM_ID_SOURCE_OFFSETS" NUMBER(10) NULL ,
"UOM_ID_TARGET_OFFSETS" NUMBER(10) NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(40 BYTE) NULL ,
"SHOW_OPERATION" NUMBER(3) NOT NULL ,
"IS_LEGACY" VARCHAR2(5 BYTE) NOT NULL ,
"LEGACY_CODE" NUMBER(10) NULL ,
"REVERSE_OP" NUMBER(1) NULL ,
"IS_IMPLEMENTED_FORWARD" NUMBER(1) NULL ,
"IS_IMPLEMENTED_REVERSE" NUMBER(1) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_REF_SYS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_REF_SYS";
CREATE TABLE "MDSYS"."SDO_COORD_REF_SYS" (
"SRID" NUMBER(10) NOT NULL ,
"COORD_REF_SYS_NAME" VARCHAR2(80 BYTE) NOT NULL ,
"COORD_REF_SYS_KIND" VARCHAR2(24 BYTE) NOT NULL ,
"COORD_SYS_ID" NUMBER(10) NULL ,
"DATUM_ID" NUMBER(10) NULL ,
"GEOG_CRS_DATUM_ID" NUMBER(10) NULL ,
"SOURCE_GEOG_SRID" NUMBER(10) NULL ,
"PROJECTION_CONV_ID" NUMBER(10) NULL ,
"CMPD_HORIZ_SRID" NUMBER(10) NULL ,
"CMPD_VERT_SRID" NUMBER(10) NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(40 BYTE) NULL ,
"IS_LEGACY" VARCHAR2(5 BYTE) NOT NULL ,
"LEGACY_CODE" NUMBER(10) NULL ,
"LEGACY_WKTEXT" VARCHAR2(2046 BYTE) NULL ,
"LEGACY_CS_BOUNDS" "MDSYS"."SDO_GEOMETRY" NULL ,
"IS_VALID" VARCHAR2(5 BYTE) DEFAULT 'TRUE'  NULL ,
"SUPPORTS_SDO_GEOMETRY" VARCHAR2(5 BYTE) DEFAULT 'TRUE'  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_COORD_SYS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_COORD_SYS";
CREATE TABLE "MDSYS"."SDO_COORD_SYS" (
"COORD_SYS_ID" NUMBER(10) NOT NULL ,
"COORD_SYS_NAME" VARCHAR2(254 BYTE) NOT NULL ,
"COORD_SYS_TYPE" VARCHAR2(24 BYTE) NULL ,
"DIMENSION" NUMBER(5) NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(50 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_CRS_GEOGRAPHIC_PLUS_HEIGHT
-- ----------------------------
DROP TABLE "MDSYS"."SDO_CRS_GEOGRAPHIC_PLUS_HEIGHT";
CREATE TABLE "MDSYS"."SDO_CRS_GEOGRAPHIC_PLUS_HEIGHT" (
"SRID" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_CS_CONTEXT_INFORMATION
-- ----------------------------
DROP TABLE "MDSYS"."SDO_CS_CONTEXT_INFORMATION";
CREATE TABLE "MDSYS"."SDO_CS_CONTEXT_INFORMATION" (
"FROM_SRID" NUMBER NULL ,
"TO_SRID" NUMBER NULL ,
"CONTEXT" RAW(4) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_CS_SRS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_CS_SRS";
CREATE TABLE "MDSYS"."SDO_CS_SRS" (
"CS_NAME" VARCHAR2(80 BYTE) NULL ,
"SRID" NUMBER NOT NULL ,
"AUTH_SRID" NUMBER NULL ,
"AUTH_NAME" VARCHAR2(256 BYTE) NULL ,
"WKTEXT" VARCHAR2(2046 BYTE) NULL ,
"CS_BOUNDS" "MDSYS"."SDO_GEOMETRY" NULL ,
"WKTEXT3D" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_DATUMS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_DATUMS";
CREATE TABLE "MDSYS"."SDO_DATUMS" (
"DATUM_ID" NUMBER(10) NOT NULL ,
"DATUM_NAME" VARCHAR2(80 BYTE) NOT NULL ,
"DATUM_TYPE" VARCHAR2(24 BYTE) NULL ,
"ELLIPSOID_ID" NUMBER(10) NULL ,
"PRIME_MERIDIAN_ID" NUMBER(10) NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(40 BYTE) NULL ,
"SHIFT_X" NUMBER NULL ,
"SHIFT_Y" NUMBER NULL ,
"SHIFT_Z" NUMBER NULL ,
"ROTATE_X" NUMBER NULL ,
"ROTATE_Y" NUMBER NULL ,
"ROTATE_Z" NUMBER NULL ,
"SCALE_ADJUST" NUMBER NULL ,
"IS_LEGACY" VARCHAR2(5 BYTE) NOT NULL ,
"LEGACY_CODE" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_DATUMS_OLD_SNAPSHOT
-- ----------------------------
DROP TABLE "MDSYS"."SDO_DATUMS_OLD_SNAPSHOT";
CREATE TABLE "MDSYS"."SDO_DATUMS_OLD_SNAPSHOT" (
"NAME" VARCHAR2(64 BYTE) NULL ,
"SHIFT_X" NUMBER NULL ,
"SHIFT_Y" NUMBER NULL ,
"SHIFT_Z" NUMBER NULL ,
"ROTATE_X" NUMBER NULL ,
"ROTATE_Y" NUMBER NULL ,
"ROTATE_Z" NUMBER NULL ,
"SCALE_ADJUST" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_ELLIPSOIDS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_ELLIPSOIDS";
CREATE TABLE "MDSYS"."SDO_ELLIPSOIDS" (
"ELLIPSOID_ID" NUMBER NOT NULL ,
"ELLIPSOID_NAME" VARCHAR2(80 BYTE) NOT NULL ,
"SEMI_MAJOR_AXIS" NUMBER NULL ,
"UOM_ID" NUMBER NULL ,
"INV_FLATTENING" NUMBER NULL ,
"SEMI_MINOR_AXIS" NUMBER NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(40 BYTE) NULL ,
"IS_LEGACY" VARCHAR2(5 BYTE) NOT NULL ,
"LEGACY_CODE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_ELLIPSOIDS_OLD_SNAPSHOT
-- ----------------------------
DROP TABLE "MDSYS"."SDO_ELLIPSOIDS_OLD_SNAPSHOT";
CREATE TABLE "MDSYS"."SDO_ELLIPSOIDS_OLD_SNAPSHOT" (
"NAME" VARCHAR2(64 BYTE) NULL ,
"SEMI_MAJOR_AXIS" NUMBER NULL ,
"INVERSE_FLATTENING" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GEOM_METADATA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GEOM_METADATA_TABLE";
CREATE TABLE "MDSYS"."SDO_GEOM_METADATA_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) NOT NULL ,
"SDO_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"SDO_COLUMN_NAME" VARCHAR2(1024 BYTE) NOT NULL ,
"SDO_DIMINFO" "MDSYS"."SDO_DIM_ARRAY" NULL ,
"SDO_SRID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GEOR_DDL__TABLE$$
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GEOR_DDL__TABLE$$";
CREATE TABLE "MDSYS"."SDO_GEOR_DDL__TABLE$$" (
"ID" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GEOR_PLUGIN_REGISTRY
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GEOR_PLUGIN_REGISTRY";
CREATE TABLE "MDSYS"."SDO_GEOR_PLUGIN_REGISTRY" (
"PLUGIN_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"PLUGIN_TYPE" VARCHAR2(32 BYTE) NULL ,
"PLUGIN" VARCHAR2(32 BYTE) NULL ,
"COMPANY_NAME" VARCHAR2(1024 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1024 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GEOR_SYSDATA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GEOR_SYSDATA_TABLE";
CREATE TABLE "MDSYS"."SDO_GEOR_SYSDATA_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) NOT NULL ,
"GEORASTER_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"GEORASTER_COLUMN_NAME" VARCHAR2(1024 BYTE) NOT NULL ,
"GEOR_METADATA_COLUMN_NAME" VARCHAR2(1024 BYTE) NULL ,
"RDT_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"RASTER_ID" NUMBER NOT NULL ,
"OTHER_TABLE_NAMES" "MDSYS"."SDO_STRING_ARRAY" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GEOR_XMLSCHEMA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GEOR_XMLSCHEMA_TABLE";
CREATE TABLE "MDSYS"."SDO_GEOR_XMLSCHEMA_TABLE" (
"ID" NUMBER NOT NULL ,
"GEORASTERFORMAT" VARCHAR2(1024 BYTE) NULL ,
"XMLSCHEMA" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GR_MOSAIC_0
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GR_MOSAIC_0";
CREATE TABLE "MDSYS"."SDO_GR_MOSAIC_0" (
"RID" ROWID NULL ,
"RDT" VARCHAR2(100 BYTE) NULL ,
"RSTID" NUMBER NULL ,
"RSTYPE" NUMBER NULL ,
"SRID" NUMBER NULL ,
"RCTIF" VARCHAR2(10 BYTE) NULL ,
"R0" NUMBER NULL ,
"C0" NUMBER NULL ,
"B0" NUMBER NULL ,
"R1" NUMBER NULL ,
"C1" NUMBER NULL ,
"B1" NUMBER NULL ,
"BANDS" NUMBER NULL ,
"BCV" NUMBER NULL ,
"ILV" VARCHAR2(5 BYTE) NULL ,
"RBLKSZ" NUMBER NULL ,
"CBLKSZ" NUMBER NULL ,
"BBLKSZ" NUMBER NULL ,
"CDL" NUMBER NULL ,
"CDP" VARCHAR2(50 BYTE) NULL ,
"ULTR" NUMBER NULL ,
"ULTC" NUMBER NULL ,
"ULTB" NUMBER NULL ,
"RROWS" NUMBER NULL ,
"COLS" NUMBER NULL ,
"CPTYPE" VARCHAR2(10 BYTE) NULL ,
"META" "PUBLIC"."XMLTYPE" NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GR_MOSAIC_1
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GR_MOSAIC_1";
CREATE TABLE "MDSYS"."SDO_GR_MOSAIC_1" (
"RID" ROWID NULL ,
"ULTR" NUMBER NULL ,
"ULTC" NUMBER NULL ,
"RSIZE" NUMBER NULL ,
"CSIZE" NUMBER NULL ,
"R0" NUMBER NULL ,
"R1" NUMBER NULL ,
"C0" NUMBER NULL ,
"C1" NUMBER NULL ,
"B0" NUMBER NULL ,
"B1" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GR_MOSAIC_2
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GR_MOSAIC_2";
CREATE TABLE "MDSYS"."SDO_GR_MOSAIC_2" (
"RID" ROWID NULL ,
"ULTR" NUMBER NULL ,
"ULTC" NUMBER NULL ,
"RSIZE" NUMBER NULL ,
"CSIZE" NUMBER NULL ,
"R0" NUMBER NULL ,
"R1" NUMBER NULL ,
"C0" NUMBER NULL ,
"C1" NUMBER NULL ,
"B0" NUMBER NULL ,
"B1" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GR_MOSAIC_3
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GR_MOSAIC_3";
CREATE TABLE "MDSYS"."SDO_GR_MOSAIC_3" (
"P" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GR_RDT_1
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GR_RDT_1";
CREATE TABLE "MDSYS"."SDO_GR_RDT_1" (
"RASTERDATATABLE" VARCHAR2(100 BYTE) NOT NULL ,
"RASTERID" NUMBER NOT NULL ,
"PYRAMIDLEVEL" NUMBER NOT NULL ,
"BANDBLOCKNUMBER" NUMBER NOT NULL ,
"ROWBLOCKNUMBER" NUMBER NOT NULL ,
"COLUMNBLOCKNUMBER" NUMBER NOT NULL ,
"BLOCKMBR" "MDSYS"."SDO_GEOMETRY" NULL ,
"RASTERBLOCK" BLOB NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_GR_RDT_2
-- ----------------------------
DROP TABLE "MDSYS"."SDO_GR_RDT_2";
CREATE TABLE "MDSYS"."SDO_GR_RDT_2" (
"RASTERID" NUMBER NOT NULL ,
"PYRAMIDLEVEL" NUMBER NOT NULL ,
"BANDBLOCKNUMBER" NUMBER NOT NULL ,
"ROWBLOCKNUMBER" NUMBER NOT NULL ,
"COLUMNBLOCKNUMBER" NUMBER NOT NULL ,
"BLOCKMBR" "MDSYS"."SDO_GEOMETRY" NULL ,
"RASTERBLOCK" BLOB NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_INDEX_METADATA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_INDEX_METADATA_TABLE";
CREATE TABLE "MDSYS"."SDO_INDEX_METADATA_TABLE" (
"SDO_INDEX_OWNER" VARCHAR2(32 BYTE) NULL ,
"SDO_INDEX_TYPE" VARCHAR2(32 BYTE) NULL ,
"SDO_LEVEL" NUMBER NULL ,
"SDO_NUMTILES" NUMBER NULL ,
"SDO_MAXLEVEL" NUMBER NULL ,
"SDO_COMMIT_INTERVAL" NUMBER NULL ,
"SDO_INDEX_TABLE" VARCHAR2(32 BYTE) NULL ,
"SDO_INDEX_NAME" VARCHAR2(32 BYTE) NULL ,
"SDO_INDEX_PRIMARY" NUMBER NULL ,
"SDO_TSNAME" VARCHAR2(32 BYTE) NULL ,
"SDO_COLUMN_NAME" VARCHAR2(2048 BYTE) NULL ,
"SDO_RTREE_HEIGHT" NUMBER NULL ,
"SDO_RTREE_NUM_NODES" NUMBER NULL ,
"SDO_RTREE_DIMENSIONALITY" NUMBER NULL ,
"SDO_RTREE_FANOUT" NUMBER NULL ,
"SDO_RTREE_ROOT" VARCHAR2(32 BYTE) NULL ,
"SDO_RTREE_SEQ_NAME" VARCHAR2(32 BYTE) NULL ,
"SDO_FIXED_META" RAW(255) NULL ,
"SDO_TABLESPACE" VARCHAR2(32 BYTE) NULL ,
"SDO_INITIAL_EXTENT" VARCHAR2(32 BYTE) NULL ,
"SDO_NEXT_EXTENT" VARCHAR2(32 BYTE) NULL ,
"SDO_PCTINCREASE" NUMBER NULL ,
"SDO_MIN_EXTENTS" NUMBER NULL ,
"SDO_MAX_EXTENTS" NUMBER NULL ,
"SDO_INDEX_DIMS" NUMBER NULL ,
"SDO_LAYER_GTYPE" VARCHAR2(32 BYTE) NULL ,
"SDO_RTREE_PCTFREE" NUMBER NULL ,
"SDO_INDEX_PARTITION" VARCHAR2(32 BYTE) NULL ,
"SDO_PARTITIONED" NUMBER NULL ,
"SDO_RTREE_QUALITY" NUMBER NULL ,
"SDO_INDEX_VERSION" NUMBER NULL ,
"SDO_INDEX_GEODETIC" VARCHAR2(8 BYTE) NULL ,
"SDO_INDEX_STATUS" VARCHAR2(32 BYTE) NULL ,
"SDO_NL_INDEX_TABLE" VARCHAR2(33 BYTE) NULL ,
"SDO_DML_BATCH_SIZE" NUMBER NULL ,
"SDO_RTREE_ENT_XPND" NUMBER NULL ,
"SDO_ROOT_MBR" "MDSYS"."SDO_GEOMETRY" DEFAULT null  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_LIGHTSOURCES_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_LIGHTSOURCES_TABLE";
CREATE TABLE "MDSYS"."SDO_LIGHTSOURCES_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"TYPE" VARCHAR2(10 BYTE) NULL ,
"DEFINITION" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_LRS_METADATA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_LRS_METADATA_TABLE";
CREATE TABLE "MDSYS"."SDO_LRS_METADATA_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) NOT NULL ,
"SDO_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"SDO_COLUMN_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"SDO_DIM_POS" NUMBER NOT NULL ,
"SDO_DIM_UNIT" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_MAPS_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_MAPS_TABLE";
CREATE TABLE "MDSYS"."SDO_MAPS_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"DEFINITION" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_NETWORK_CONSTRAINTS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_NETWORK_CONSTRAINTS";
CREATE TABLE "MDSYS"."SDO_NETWORK_CONSTRAINTS" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')  NOT NULL ,
"CONSTRAINT" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(200 BYTE) NULL ,
"CLASS_NAME" VARCHAR2(4000 BYTE) NULL ,
"CLASS" BLOB NULL ,
"JAVA_INTERFACE" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_NETWORK_HISTORIES
-- ----------------------------
DROP TABLE "MDSYS"."SDO_NETWORK_HISTORIES";
CREATE TABLE "MDSYS"."SDO_NETWORK_HISTORIES" (
"OWNER" VARCHAR2(32 BYTE) DEFAULT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')  NOT NULL ,
"NETWORK" VARCHAR2(24 BYTE) NOT NULL ,
"NODE_HISTORY_TABLE" VARCHAR2(32 BYTE) NULL ,
"LINK_HISTORY_TABLE" VARCHAR2(32 BYTE) NULL ,
"NODE_TRIGGER" VARCHAR2(32 BYTE) NULL ,
"LINK_TRIGGER" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_NETWORK_LOCKS_WM
-- ----------------------------
DROP TABLE "MDSYS"."SDO_NETWORK_LOCKS_WM";
CREATE TABLE "MDSYS"."SDO_NETWORK_LOCKS_WM" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')  NOT NULL ,
"LOCK_ID" NUMBER NOT NULL ,
"NETWORK" VARCHAR2(24 BYTE) NULL ,
"WORKSPACE" VARCHAR2(32 BYTE) NULL ,
"ORIGINAL_NODE_FILTER" VARCHAR2(200 BYTE) NULL ,
"ORIGINAL_LINK_FILTER" VARCHAR2(200 BYTE) NULL ,
"ORIGINAL_PATH_FILTER" VARCHAR2(200 BYTE) NULL ,
"ADJUSTED_NODE_FILTER" VARCHAR2(200 BYTE) NULL ,
"ADJUSTED_LINK_FILTER" VARCHAR2(200 BYTE) NULL ,
"ADJUSTED_PATH_FILTER" VARCHAR2(200 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_NETWORK_METADATA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE";
CREATE TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv','CURRENT_SCHEMA')  NOT NULL ,
"NETWORK" VARCHAR2(24 BYTE) NOT NULL ,
"NETWORK_ID" NUMBER NOT NULL ,
"NETWORK_CATEGORY" VARCHAR2(12 BYTE) NOT NULL ,
"GEOMETRY_TYPE" VARCHAR2(24 BYTE) NULL ,
"NETWORK_TYPE" VARCHAR2(24 BYTE) NULL ,
"NO_OF_HIERARCHY_LEVELS" NUMBER DEFAULT 1  NULL ,
"NO_OF_PARTITIONS" NUMBER DEFAULT 1  NULL ,
"LRS_TABLE_NAME" VARCHAR2(32 BYTE) NULL ,
"LRS_GEOM_COLUMN" VARCHAR2(32 BYTE) NULL ,
"NODE_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"NODE_GEOM_COLUMN" VARCHAR2(32 BYTE) NULL ,
"NODE_COST_COLUMN" VARCHAR2(1024 BYTE) NULL ,
"LINK_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"LINK_GEOM_COLUMN" VARCHAR2(32 BYTE) NULL ,
"LINK_DIRECTION" VARCHAR2(12 BYTE) NOT NULL ,
"LINK_COST_COLUMN" VARCHAR2(1024 BYTE) NULL ,
"PATH_TABLE_NAME" VARCHAR2(32 BYTE) NULL ,
"PATH_GEOM_COLUMN" VARCHAR2(32 BYTE) NULL ,
"PATH_LINK_TABLE_NAME" VARCHAR2(32 BYTE) NULL ,
"PARTITION_TABLE_NAME" VARCHAR2(32 BYTE) NULL ,
"NODE_PARTITION_COLUMN" VARCHAR2(32 BYTE) NULL ,
"LINK_PARTITION_COLUMN" VARCHAR2(32 BYTE) NULL ,
"NODE_DURATION_COLUMN" VARCHAR2(32 BYTE) NULL ,
"LINK_DURATION_COLUMN" VARCHAR2(32 BYTE) NULL ,
"TOPOLOGY" VARCHAR2(32 BYTE) NULL ,
"USER_DEFINED_DATA" VARCHAR2(1 BYTE) NULL ,
"EXTERNAL_REFERENCES" VARCHAR2(1 BYTE) NULL ,
"SUBPATH_TABLE_NAME" VARCHAR2(32 BYTE) NULL ,
"SUBPATH_GEOM_COLUMN" VARCHAR2(32 BYTE) NULL ,
"PARTITION_BLOB_TABLE_NAME" VARCHAR2(32 BYTE) NULL ,
"COMPONENT_TABLE_NAME" VARCHAR2(32 BYTE) NULL ,
"NODE_LEVEL_TABLE_NAME" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_NETWORK_TIMESTAMPS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_NETWORK_TIMESTAMPS";
CREATE TABLE "MDSYS"."SDO_NETWORK_TIMESTAMPS" (
"OWNER" VARCHAR2(32 BYTE) DEFAULT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')  NOT NULL ,
"NETWORK" VARCHAR2(24 BYTE) NOT NULL ,
"TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"LAST_DML_TIME" TIMESTAMP(6)  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_NETWORK_USER_DATA
-- ----------------------------
DROP TABLE "MDSYS"."SDO_NETWORK_USER_DATA";
CREATE TABLE "MDSYS"."SDO_NETWORK_USER_DATA" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')  NOT NULL ,
"NETWORK" VARCHAR2(32 BYTE) NOT NULL ,
"TABLE_TYPE" VARCHAR2(12 BYTE) NOT NULL ,
"DATA_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DATA_TYPE" VARCHAR2(12 BYTE) NOT NULL ,
"DATA_LENGTH" NUMBER NULL ,
"CATEGORY_ID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_PC_BLK_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_PC_BLK_TABLE";
CREATE TABLE "MDSYS"."SDO_PC_BLK_TABLE" (
"OBJ_ID" NUMBER NULL ,
"BLK_ID" NUMBER NULL ,
"BLK_EXTENT" "MDSYS"."SDO_GEOMETRY" NULL ,
"BLK_DOMAIN" "MDSYS"."SDO_ORGSCL_TYPE" NULL ,
"PCBLK_MIN_RES" NUMBER NULL ,
"PCBLK_MAX_RES" NUMBER NULL ,
"NUM_POINTS" NUMBER NULL ,
"NUM_UNSORTED_POINTS" NUMBER NULL ,
"PT_SORT_DIM" NUMBER NULL ,
"POINTS" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_PREFERRED_OPS_SYSTEM
-- ----------------------------
DROP TABLE "MDSYS"."SDO_PREFERRED_OPS_SYSTEM";
CREATE TABLE "MDSYS"."SDO_PREFERRED_OPS_SYSTEM" (
"SOURCE_SRID" NUMBER(10) NOT NULL ,
"COORD_OP_ID" NUMBER(10) NOT NULL ,
"TARGET_SRID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_PREFERRED_OPS_USER
-- ----------------------------
DROP TABLE "MDSYS"."SDO_PREFERRED_OPS_USER";
CREATE TABLE "MDSYS"."SDO_PREFERRED_OPS_USER" (
"USE_CASE" VARCHAR2(32 BYTE) NOT NULL ,
"SOURCE_SRID" NUMBER(10) NOT NULL ,
"COORD_OP_ID" NUMBER(10) NOT NULL ,
"TARGET_SRID" NUMBER(10) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_PRIME_MERIDIANS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_PRIME_MERIDIANS";
CREATE TABLE "MDSYS"."SDO_PRIME_MERIDIANS" (
"PRIME_MERIDIAN_ID" NUMBER(10) NOT NULL ,
"PRIME_MERIDIAN_NAME" VARCHAR2(80 BYTE) NOT NULL ,
"GREENWICH_LONGITUDE" FLOAT(49) NULL ,
"UOM_ID" NUMBER(10) NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(254 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_PROJECTIONS_OLD_SNAPSHOT
-- ----------------------------
DROP TABLE "MDSYS"."SDO_PROJECTIONS_OLD_SNAPSHOT";
CREATE TABLE "MDSYS"."SDO_PROJECTIONS_OLD_SNAPSHOT" (
"NAME" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_SCENES_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_SCENES_TABLE";
CREATE TABLE "MDSYS"."SDO_SCENES_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"DEFINITION" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_ST_TOLERANCE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_ST_TOLERANCE";
CREATE TABLE "MDSYS"."SDO_ST_TOLERANCE" (
"TOLERANCE" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_STYLES_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_STYLES_TABLE";
CREATE TABLE "MDSYS"."SDO_STYLES_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"TYPE" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"DEFINITION" CLOB NOT NULL ,
"IMAGE" BLOB NULL ,
"GEOMETRY" "MDSYS"."SDO_GEOMETRY" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_THEMES_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_THEMES_TABLE";
CREATE TABLE "MDSYS"."SDO_THEMES_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"BASE_TABLE" VARCHAR2(64 BYTE) NOT NULL ,
"GEOMETRY_COLUMN" VARCHAR2(2048 BYTE) NOT NULL ,
"STYLING_RULES" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TIN_BLK_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TIN_BLK_TABLE";
CREATE TABLE "MDSYS"."SDO_TIN_BLK_TABLE" (
"OBJ_ID" NUMBER NULL ,
"BLK_ID" NUMBER NULL ,
"BLK_EXTENT" "MDSYS"."SDO_GEOMETRY" NULL ,
"BLK_DOMAIN" "MDSYS"."SDO_ORGSCL_TYPE" NULL ,
"PCBLK_MIN_RES" NUMBER NULL ,
"PCBLK_MAX_RES" NUMBER NULL ,
"NUM_POINTS" NUMBER NULL ,
"NUM_UNSORTED_POINTS" NUMBER NULL ,
"PT_SORT_DIM" NUMBER NULL ,
"POINTS" BLOB NULL ,
"TR_LVL" NUMBER NULL ,
"TR_RES" NUMBER NULL ,
"NUM_TRIANGLES" NUMBER NULL ,
"TR_SORT_DIM" NUMBER NULL ,
"TRIANGLES" BLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TIN_PC_SEQ
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TIN_PC_SEQ";
CREATE TABLE "MDSYS"."SDO_TIN_PC_SEQ" (
"SDO_OWNER" VARCHAR2(32 BYTE) NOT NULL ,
"TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"CUR_OBJ_ID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TIN_PC_SYSDATA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE";
CREATE TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) NOT NULL ,
"TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"COLUMN_NAME" VARCHAR2(1024 BYTE) NOT NULL ,
"DEP_TABLE_SCHEMA" VARCHAR2(32 BYTE) NOT NULL ,
"DEP_TABLE_NAME" VARCHAR2(32 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TOPO_DATA$
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TOPO_DATA$";
CREATE TABLE "MDSYS"."SDO_TOPO_DATA$" (
"TOPOLOGY" VARCHAR2(20 BYTE) NULL ,
"TG_LAYER_ID" NUMBER NULL ,
"TG_ID" NUMBER NULL ,
"TOPO_ID" NUMBER NULL ,
"TOPO_TYPE" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TOPO_MAPS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TOPO_MAPS";
CREATE TABLE "MDSYS"."SDO_TOPO_MAPS" (
"TOPOLOGY_ID" VARCHAR2(20 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TOPO_METADATA_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TOPO_METADATA_TABLE";
CREATE TABLE "MDSYS"."SDO_TOPO_METADATA_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) NULL ,
"TOPOLOGY" VARCHAR2(20 BYTE) NULL ,
"TOPOLOGY_ID" NUMBER NULL ,
"TOPO_GEOMETRY_LAYERS" "MDSYS"."SDO_TOPO_GEOMETRY_LAYER_ARRAY" NULL ,
"TOLERANCE" NUMBER NULL ,
"SRID" NUMBER NULL ,
"DIGITS_RIGHT_OF_DECIMAL" NUMBER DEFAULT 16  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TOPO_RELATION_DATA
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TOPO_RELATION_DATA";
CREATE TABLE "MDSYS"."SDO_TOPO_RELATION_DATA" (
"TG_LAYER_ID" NUMBER NULL ,
"TG_ID" NUMBER NULL ,
"TOPO_ID" NUMBER NULL ,
"TOPO_TYPE" NUMBER NULL ,
"TOPO_ATTRIBUTE" VARCHAR2(100 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TOPO_TRANSACT_DATA
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TOPO_TRANSACT_DATA";
CREATE TABLE "MDSYS"."SDO_TOPO_TRANSACT_DATA" (
"TOPO_SEQUENCE" NUMBER NULL ,
"TOPOLOGY_ID" VARCHAR2(20 BYTE) NULL ,
"TOPO_ID" NUMBER NULL ,
"TOPO_TYPE" NUMBER NULL ,
"TOPO_OP" VARCHAR2(3 BYTE) NULL ,
"PARENT_ID" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TXN_IDX_DELETES
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TXN_IDX_DELETES";
CREATE TABLE "MDSYS"."SDO_TXN_IDX_DELETES" (
"SDO_TXN_IDX_ID" VARCHAR2(32 BYTE) NOT NULL ,
"RID" VARCHAR2(24 BYTE) NOT NULL ,
"START_1" NUMBER NULL ,
"END_1" NUMBER NULL ,
"START_2" NUMBER NULL ,
"END_2" NUMBER NULL ,
"START_3" NUMBER NULL ,
"END_3" NUMBER NULL ,
"START_4" NUMBER NULL ,
"END_4" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TXN_IDX_EXP_UPD_RGN
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TXN_IDX_EXP_UPD_RGN";
CREATE TABLE "MDSYS"."SDO_TXN_IDX_EXP_UPD_RGN" (
"SDO_TXN_IDX_ID" VARCHAR2(32 BYTE) NOT NULL ,
"RID" VARCHAR2(24 BYTE) NOT NULL ,
"START_1" NUMBER NULL ,
"END_1" NUMBER NULL ,
"START_2" NUMBER NULL ,
"END_2" NUMBER NULL ,
"START_3" NUMBER NULL ,
"END_3" NUMBER NULL ,
"START_4" NUMBER NULL ,
"END_4" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_TXN_IDX_INSERTS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_TXN_IDX_INSERTS";
CREATE TABLE "MDSYS"."SDO_TXN_IDX_INSERTS" (
"SDO_TXN_IDX_ID" VARCHAR2(32 BYTE) NOT NULL ,
"RID" VARCHAR2(24 BYTE) NOT NULL ,
"START_1" NUMBER NULL ,
"END_1" NUMBER NULL ,
"START_2" NUMBER NULL ,
"END_2" NUMBER NULL ,
"START_3" NUMBER NULL ,
"END_3" NUMBER NULL ,
"START_4" NUMBER NULL ,
"END_4" NUMBER NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_UNITS_OF_MEASURE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_UNITS_OF_MEASURE";
CREATE TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" (
"UOM_ID" NUMBER(10) NOT NULL ,
"UNIT_OF_MEAS_NAME" VARCHAR2(2083 BYTE) NOT NULL ,
"SHORT_NAME" VARCHAR2(80 BYTE) NULL ,
"LEGACY_UNIT_NAME" VARCHAR2(80 BYTE) DEFAULT NULL  NULL ,
"UNIT_OF_MEAS_TYPE" VARCHAR2(50 BYTE) NULL ,
"TARGET_UOM_ID" NUMBER(10) NULL ,
"FACTOR_B" NUMBER NULL ,
"FACTOR_C" NUMBER NULL ,
"INFORMATION_SOURCE" VARCHAR2(254 BYTE) NULL ,
"DATA_SOURCE" VARCHAR2(40 BYTE) NULL ,
"IS_LEGACY" VARCHAR2(5 BYTE) NOT NULL ,
"LEGACY_CODE" NUMBER(10) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_VIEWFRAMES_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_VIEWFRAMES_TABLE";
CREATE TABLE "MDSYS"."SDO_VIEWFRAMES_TABLE" (
"SDO_OWNER" VARCHAR2(32 BYTE) DEFAULT sys_context('userenv', 'CURRENT_SCHEMA')  NOT NULL ,
"NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DESCRIPTION" VARCHAR2(4000 BYTE) NULL ,
"SCENE_NAME" VARCHAR2(32 BYTE) NOT NULL ,
"DEFINITION" CLOB NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_WFS_LOCAL_TXNS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_WFS_LOCAL_TXNS";
CREATE TABLE "MDSYS"."SDO_WFS_LOCAL_TXNS" (
"SESSIONID" VARCHAR2(30 BYTE) NULL 
)
NOLOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_WS_CONFERENCE
-- ----------------------------
DROP TABLE "MDSYS"."SDO_WS_CONFERENCE";
CREATE TABLE "MDSYS"."SDO_WS_CONFERENCE" (
"CONFERENCE_ID" VARCHAR2(128 BYTE) NOT NULL ,
"REQUEST" "PUBLIC"."XMLTYPE" NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_WS_CONFERENCE_PARTICIPANTS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS";
CREATE TABLE "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS" (
"CONFERENCE_ID" VARCHAR2(128 BYTE) NOT NULL ,
"PARTICIPANT" VARCHAR2(128 BYTE) NOT NULL ,
"HAS_APPROVED" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_WS_CONFERENCE_RESULTS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_WS_CONFERENCE_RESULTS";
CREATE TABLE "MDSYS"."SDO_WS_CONFERENCE_RESULTS" (
"CONFERENCE_ID" VARCHAR2(128 BYTE) NOT NULL ,
"RESULT" "PUBLIC"."XMLTYPE" NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SDO_XML_SCHEMAS
-- ----------------------------
DROP TABLE "MDSYS"."SDO_XML_SCHEMAS";
CREATE TABLE "MDSYS"."SDO_XML_SCHEMAS" (
"ID" NUMBER NOT NULL ,
"DESCRIPTION" VARCHAR2(300 BYTE) NULL ,
"XMLSCHEMA" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for SRSNAMESPACE_TABLE
-- ----------------------------
DROP TABLE "MDSYS"."SRSNAMESPACE_TABLE";
CREATE TABLE "MDSYS"."SRSNAMESPACE_TABLE" (
"SRSNAMESPACE" VARCHAR2(2000 BYTE) NOT NULL ,
"SRSNAME" VARCHAR2(2000 BYTE) NOT NULL ,
"SDO_SRID" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for TOKENSESSIONMAP_T$
-- ----------------------------
DROP TABLE "MDSYS"."TOKENSESSIONMAP_T$";
CREATE TABLE "MDSYS"."TOKENSESSIONMAP_T$" (
"SESSIONID" VARCHAR2(30 BYTE) NOT NULL ,
"TOKENID" VARCHAR2(100 BYTE) NOT NULL ,
"EXPIRYTIME" TIMESTAMP(6)  NULL ,
"EXPIRYOFFSET" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_CAPABILITIESINFO$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_CAPABILITIESINFO$";
CREATE TABLE "MDSYS"."WFS_CAPABILITIESINFO$" (
"LASTCAPABILITYINFOUPDTS" TIMESTAMP(6)  NULL ,
"CAPABILITIESINFOTMPL" "PUBLIC"."XMLTYPE" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATUREINSTANCEMETADATA$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATUREINSTANCEMETADATA$";
CREATE TABLE "MDSYS"."WFS_FEATUREINSTANCEMETADATA$" (
"FEATURETYPEID" NUMBER NULL ,
"FEATUREID" VARCHAR2(80 BYTE) NULL ,
"ISLOCKED" VARCHAR2(1 BYTE) NULL ,
"LOCKEXPIRY" NUMBER NULL ,
"LOCKACQUIRETIME" TIMESTAMP(6)  NULL ,
"LOCKID" VARCHAR2(80 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETABLEMDUPDATED$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETABLEMDUPDATED$";
CREATE TABLE "MDSYS"."WFS_FEATURETABLEMDUPDATED$" (
"FEATURETYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"FEATURETYPENAME" VARCHAR2(80 BYTE) NULL ,
"UPDATETS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETABLEUPDATED$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETABLEUPDATED$";
CREATE TABLE "MDSYS"."WFS_FEATURETABLEUPDATED$" (
"FEATURETYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"FEATURETYPENAME" VARCHAR2(80 BYTE) NULL ,
"ROWLIST" "MDSYS"."ROWPOINTERLIST" NULL ,
"UPDATETS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETYPE$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETYPE$";
CREATE TABLE "MDSYS"."WFS_FEATURETYPE$" (
"FEATURETYPEID" NUMBER NOT NULL ,
"FEATURETYPENAME" VARCHAR2(80 BYTE) NULL ,
"FEATUREDESC" "PUBLIC"."XMLTYPE" NULL ,
"DESCRIBEFEATURETYPE" "PUBLIC"."XMLTYPE" NULL ,
"LASTDESCRIBEFEATURETYPEGENTS" TIMESTAMP(6)  NULL ,
"LASTFEATUREUPDATETS" TIMESTAMP(6)  NULL ,
"NAMESPACEPREFIX" VARCHAR2(20 BYTE) NULL ,
"NAMESPACEURL" VARCHAR2(2083 BYTE) NULL ,
"SCHEMALOCATION" VARCHAR2(2083 BYTE) NULL ,
"KEYCOLS" VARCHAR2(4000 BYTE) NULL ,
"DATAPOINTER" VARCHAR2(61 BYTE) NULL ,
"ISDOCBASED" VARCHAR2(1 BYTE) NULL ,
"SPATIALCOLS" "MDSYS"."STRINGLIST" NULL ,
"MANDATORYCOLS" "MDSYS"."STRINGLIST" NULL ,
"TSCOLS" "MDSYS"."STRINGLIST" NULL ,
"DOCIDPATHS" "MDSYS"."STRINGLIST" NULL ,
"SPATIALPATHARRSEP" "MDSYS"."STRINGLIST" NULL ,
"PRIMARYSPATIALCOL" VARCHAR2(4000 BYTE) NULL ,
"FEATUREMEMBERNAME" VARCHAR2(2200 BYTE) NULL ,
"SRSNS" VARCHAR2(2083 BYTE) NULL ,
"SRSNSALIAS" VARCHAR2(80 BYTE) NULL ,
"FTXSDREFID" VARCHAR2(80 BYTE) NULL ,
"ISMTABLEVIEW" VARCHAR2(1 BYTE) NULL ,
"VTABLELIST" "MDSYS"."STRINGLIST" NULL ,
"VKEYCOLSLIST" "MDSYS"."STRINGLIST" NULL ,
"TKEYCOLSLIST" "MDSYS"."STRINGLIST" NULL ,
"NUMCOLS" "MDSYS"."STRINGLIST" NULL ,
"IDXPATHS" "MDSYS"."STRINGLIST" NULL ,
"IDXPATHTYPES" "MDSYS"."STRINGLIST" NULL ,
"XTIDXCREATED" VARCHAR2(1 BYTE) NULL ,
"FEATURECOLLECTIONNAME" VARCHAR2(2200 BYTE) NULL ,
"FORMATTEDKEYCOLS" "MDSYS"."STRINGLIST" NULL ,
"FORMATTEDTKEYCOLLIST" "MDSYS"."STRINGLISTLIST" NULL ,
"ISGML3" VARCHAR2(1 BYTE) NULL ,
"SPATIALARRLIST" "MDSYS"."STRINGLISTLIST" NULL ,
"SPATIALPATHSSRSNSLIST" "MDSYS"."STRINGLISTLIST" NULL ,
"SPATIALARRPATHSSRSNSLIST" "MDSYS"."STRINGLISTLIST" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETYPEATTRS$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETYPEATTRS$";
CREATE TABLE "MDSYS"."WFS_FEATURETYPEATTRS$" (
"FEATURETYPEID" NUMBER NULL ,
"ATTRNAME" VARCHAR2(80 BYTE) NULL ,
"ATTRSEQNO" NUMBER NULL ,
"ATTRTYPE" VARCHAR2(80 BYTE) NULL ,
"ATTRTYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"COLUMNNAME" VARCHAR2(30 BYTE) NULL ,
"ISNULLABLE" VARCHAR2(1 BYTE) NULL ,
"DATALENGTH" NUMBER NULL ,
"ISMANDATORY" VARCHAR2(1 BYTE) NULL ,
"DBTYPENAME" VARCHAR2(80 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETYPECOMPLEXTAGS$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETYPECOMPLEXTAGS$";
CREATE TABLE "MDSYS"."WFS_FEATURETYPECOMPLEXTAGS$" (
"XML_TYPENAME" VARCHAR2(80 BYTE) NULL ,
"XML_TYPENAMENSURL" VARCHAR2(2083 BYTE) NULL ,
"XML_TYPETAGNAME" VARCHAR2(80 BYTE) NULL ,
"XML_TYPETAGSEQNO" NUMBER NULL ,
"XML_TYPETAGTYPE" VARCHAR2(80 BYTE) NULL ,
"XML_TYPETAGTYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"DB_ATTRNAME" VARCHAR2(80 BYTE) NULL ,
"DB_ATTRTYPE" VARCHAR2(80 BYTE) NULL ,
"ISNULLABLE" VARCHAR2(1 BYTE) NULL ,
"DATALENGTH" NUMBER NULL ,
"DB_ARRTYPE" VARCHAR2(80 BYTE) NULL ,
"ISARRAYTYPE" VARCHAR2(1 BYTE) NULL ,
"ARRLENGTH" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETYPENESTEDSDOS$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETYPENESTEDSDOS$";
CREATE TABLE "MDSYS"."WFS_FEATURETYPENESTEDSDOS$" (
"FEATURETYPEID" NUMBER NULL ,
"OBJNAMESPACE" VARCHAR2(30 BYTE) NULL ,
"OBJNAME" VARCHAR2(30 BYTE) NULL ,
"OBJNAMEINDEX" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETYPESIMPLETAGATTRS$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETYPESIMPLETAGATTRS$";
CREATE TABLE "MDSYS"."WFS_FEATURETYPESIMPLETAGATTRS$" (
"FEATURETYPEID" NUMBER NULL ,
"TAGNAME" VARCHAR2(80 BYTE) NULL ,
"ATTRNAME" VARCHAR2(80 BYTE) NULL ,
"ATTRSEQNO" NUMBER NULL ,
"ATTRTYPE" VARCHAR2(80 BYTE) NULL ,
"ATTRTYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"COLUMNNAME" VARCHAR2(30 BYTE) NULL ,
"ISNULLABLE" VARCHAR2(1 BYTE) NULL ,
"DATALENGTH" NUMBER NULL ,
"ISMANDATORY" VARCHAR2(1 BYTE) NULL ,
"DBTYPENAME" VARCHAR2(80 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETYPETAGS$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETYPETAGS$";
CREATE TABLE "MDSYS"."WFS_FEATURETYPETAGS$" (
"FEATURETYPEID" NUMBER NULL ,
"TAGNAME" VARCHAR2(80 BYTE) NULL ,
"TAGSEQNO" NUMBER NULL ,
"TAGTYPE" VARCHAR2(80 BYTE) NULL ,
"TAGTYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"COLUMNNAME" VARCHAR2(30 BYTE) NULL ,
"ISNULLABLE" VARCHAR2(1 BYTE) NULL ,
"DATALENGTH" NUMBER NULL ,
"ISMANDATORY" VARCHAR2(1 BYTE) NULL ,
"DBTYPENAME" VARCHAR2(80 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FEATURETYPEXMLCOLINFO$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FEATURETYPEXMLCOLINFO$";
CREATE TABLE "MDSYS"."WFS_FEATURETYPEXMLCOLINFO$" (
"ID" NUMBER NOT NULL ,
"FEATURETYPEID" NUMBER NULL ,
"FTNAMESPACEURL" VARCHAR2(2083 BYTE) NULL ,
"XSDDESC" "PUBLIC"."XMLTYPE" NULL ,
"XSDWRAPPERDESC" "PUBLIC"."XMLTYPE" NULL ,
"COLUMNNAME" VARCHAR2(30 BYTE) NULL ,
"OBJPATHINFO" "MDSYS"."STRINGLIST" NULL ,
"LASTUPDATETS" TIMESTAMP(6)  NULL ,
"LASTWRAPPERGENERATETS" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FTTYPECOMPLEXTAGATTRS$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FTTYPECOMPLEXTAGATTRS$";
CREATE TABLE "MDSYS"."WFS_FTTYPECOMPLEXTAGATTRS$" (
"XML_TYPENAME" VARCHAR2(80 BYTE) NULL ,
"XML_TYPENAMENSURL" VARCHAR2(2083 BYTE) NULL ,
"XML_TYPETAGNAME" VARCHAR2(80 BYTE) NULL ,
"ATTRNAME" VARCHAR2(80 BYTE) NULL ,
"ATTRSEQNO" NUMBER NULL ,
"ATTRTYPE" VARCHAR2(80 BYTE) NULL ,
"ATTRTYPENSURL" VARCHAR2(2083 BYTE) NULL ,
"DB_ATTRNAME" VARCHAR2(80 BYTE) NULL ,
"DB_ATTRTYPE" VARCHAR2(80 BYTE) NULL ,
"ISNULLABLE" VARCHAR2(1 BYTE) NULL ,
"DATALENGTH" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_FTXSDINFO$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_FTXSDINFO$";
CREATE TABLE "MDSYS"."WFS_FTXSDINFO$" (
"FTXSDREFID" VARCHAR2(80 BYTE) NOT NULL ,
"FTDEF" "PUBLIC"."XMLTYPE" NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_PROC_MAP$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_PROC_MAP$";
CREATE TABLE "MDSYS"."WFS_PROC_MAP$" (
"ARRTYPENAME" VARCHAR2(80 BYTE) NULL ,
"PACKAGENAME" VARCHAR2(30 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for WFS_TRG_TABLE_TEMP$
-- ----------------------------
DROP TABLE "MDSYS"."WFS_TRG_TABLE_TEMP$";
CREATE TABLE "MDSYS"."WFS_TRG_TABLE_TEMP$" (
"R" ROWID NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- View structure for ALL_ANNOTATION_TEXT_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_ANNOTATION_TEXT_METADATA" AS 
SELECT F_TABLE_SCHEMA OWNER, F_TABLE_NAME TABLE_NAME,
               F_TEXT_COLUMN COLUMN_NAME,
               MAP_BASE_SCALE,
               TEXT_DEFAULT_EXPRESSION TEXT_EXPRESSION,
               TEXT_DEFAULT_ATTRIBUTES TEXT_ATTRIBUTES
FROM SDO_ANNOTATION_TEXT_METADATA, ALL_TABLES a
       where a.table_name = F_TABLE_NAME and a.owner = F_TABLE_SCHEMA
UNION ALL
SELECT F_TABLE_SCHEMA OWNER, F_TABLE_NAME TABLE_NAME,
               F_TEXT_COLUMN COLUMN_NAME,
               MAP_BASE_SCALE,
               TEXT_DEFAULT_EXPRESSION ,
               TEXT_DEFAULT_ATTRIBUTES
FROM SDO_ANNOTATION_TEXT_METADATA, ALL_VIEWS a
       where a.view_name = F_TABLE_NAME and a.owner = F_TABLE_SCHEMA
UNION ALL
SELECT F_TABLE_SCHEMA OWNER, F_TABLE_NAME TABLE_NAME,
               F_TEXT_COLUMN COLUMN_NAME,
               MAP_BASE_SCALE,
               TEXT_DEFAULT_EXPRESSION ,
               TEXT_DEFAULT_ATTRIBUTES
FROM SDO_ANNOTATION_TEXT_METADATA, ALL_OBJECT_TABLES a
       where a.table_name = F_TABLE_NAME and a.owner = F_TABLE_SCHEMA
UNION ALL
SELECT /*+ use_hash (a) */  F_TABLE_SCHEMA OWNER, F_TABLE_NAME TABLE_NAME,
               F_TEXT_COLUMN COLUMN_NAME,
               MAP_BASE_SCALE,
               TEXT_DEFAULT_EXPRESSION ,
               TEXT_DEFAULT_ATTRIBUTES
FROM SDO_ANNOTATION_TEXT_METADATA, ALL_SYNONYMS a
       where a.synonym_name = F_TABLE_NAME and a.owner = F_TABLE_SCHEMA;

-- ----------------------------
-- View structure for ALL_GEOMETRY_COLUMNS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_GEOMETRY_COLUMNS" AS 
select "F_TABLE_SCHEMA","F_TABLE_NAME","F_GEOMETRY_COLUMN","G_TABLE_SCHEMA","G_TABLE_NAME","STORAGE_TYPE","GEOMETRY_TYPE","COORD_DIMENSION","MAX_PPR","SRID" from OGIS_GEOMETRY_COLUMNS where
(exists (select table_name from all_tables
         where table_name=f_table_name and owner=f_table_schema)
 or
 exists (select view_name from all_views
         where view_name=f_table_name and owner=f_table_schema)
 or
 exists (select table_name from all_object_tables
         where table_name=f_table_name and owner=f_table_schema)
)
and
(exists (select table_name from all_tables
         where table_name=g_table_name and owner=g_table_schema)
 or
 exists (select view_name from all_views
         where view_name=g_table_name and owner=g_table_schema)
 or
 exists (select table_name from all_object_tables
         where table_name=g_table_name and owner=g_table_schema)
);

-- ----------------------------
-- View structure for ALL_SDO_3DTHEMES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_3DTHEMES" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION, BASE_TABLE,
                  THEME_COLUMN, STYLE_COLUMN, THEME_TYPE, DEFINITION
FROM SDO_3DTHEMES_TABLE
WHERE
(exists
   (select table_name from all_tables
    where table_name=base_table
      and owner = sdo_owner
    union all
      select table_name from all_object_tables
      where table_name=base_table
      and owner = sdo_owner
    union all
    select view_name table_name from all_views
    where  view_name=base_table
      and owner = sdo_owner));

-- ----------------------------
-- View structure for ALL_SDO_3DTXFMS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_3DTXFMS" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION,
TYPE, AFFINE_PARAMETERS, COORD_TXFM_SRC_SRID,
COORD_TXFM_TGT_SRID, TXFM_SERIES_IDS
FROM SDO_3DTXFMS_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_ANIMATIONS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_ANIMATIONS" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION,DEFINITION
FROM SDO_ANIMATIONS_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_CACHED_MAPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_CACHED_MAPS" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION, tiles_table, is_online, is_internal, DEFINITION, base_map, map_adapter
FROM mdsys.SDO_CACHED_MAPS_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_GEOM_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_GEOM_METADATA" AS 
SELECT  b.SDO_OWNER OWNER,
        b.SDO_TABLE_NAME TABLE_NAME,
        b.SDO_COLUMN_NAME COLUMN_NAME,
        b.SDO_DIMINFO DIMINFO,
        b.SDO_SRID SRID
FROM mdsys.SDO_GEOM_METADATA_TABLE b,
     all_objects a
WHERE  b.sdo_table_name = a.object_name
  AND  b.sdo_owner = a.owner
  AND  a.object_type in ('TABLE', 'SYNONYM', 'VIEW')
 UNION ALL
 SELECT b.SDO_OWNER OWNER,
        b.SDO_TABLE_NAME TABLE_NAME,
        b.SDO_COLUMN_NAME COLUMN_NAME,
        b.SDO_DIMINFO DIMINFO,
        b.SDO_SRID SRID
FROM mdsys.SDO_GEOM_METADATA_TABLE b,
     all_object_tables a
WHERE  b.sdo_table_name = a.table_name
  AND  b.sdo_owner = a.owner;

-- ----------------------------
-- View structure for ALL_SDO_GEOR_SYSDATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_GEOR_SYSDATA" AS 
SELECT SDO_OWNER                 OWNER,
       GEORASTER_TABLE_NAME      TABLE_NAME,
       GEORASTER_COLUMN_NAME     COLUMN_NAME,
       GEOR_METADATA_COLUMN_NAME METADATA_COLUMN_NAME,
       RDT_TABLE_NAME            RDT_TABLE_NAME,
       RASTER_ID                 RASTER_ID,
       OTHER_TABLE_NAMES         OTHER_TABLE_NAMES
FROM SDO_GEOR_SYSDATA_TABLE
WHERE
(
    (sdo_owner = sys_context('userenv', 'SESSION_USER'))
    or
    exists
    (
     select table_name from all_tables
     where table_name=georaster_table_name
     and owner = sdo_owner
     union all
     select table_name from all_object_tables
     where table_name=georaster_table_name
     and owner = sdo_owner
     union all
     select view_name table_name from all_views
     where  view_name=georaster_table_name
     and owner = sdo_owner
     )
);

-- ----------------------------
-- View structure for ALL_SDO_INDEX_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_INDEX_INFO" AS 
select SDO_INDEX_OWNER, SDO_INDEX_NAME index_name,  table_owner, table_name,
       REPLACE(sdo_column_name, '"')  column_name,
       SDO_INDEX_TYPE, SDO_INDEX_TABLE, SDO_INDEX_STATUS
 from all_sdo_index_metadata,
     all_indexes
 where index_name = sdo_index_name and owner=sdo_index_owner;

-- ----------------------------
-- View structure for ALL_SDO_INDEX_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_INDEX_METADATA" AS 
select SDO_INDEX_OWNER, SDO_INDEX_TYPE,
        SDO_LEVEL, SDO_NUMTILES, SDO_MAXLEVEL, SDO_COMMIT_INTERVAL,
        SDO_INDEX_TABLE, SDO_INDEX_NAME, SDO_INDEX_PRIMARY, SDO_TSNAME,
        SDO_COLUMN_NAME, SDO_RTREE_HEIGHT, SDO_RTREE_NUM_NODES,
        SDO_RTREE_DIMENSIONALITY, SDO_RTREE_FANOUT, SDO_RTREE_ROOT,
        SDO_RTREE_SEQ_NAME, SDO_FIXED_META, SDO_TABLESPACE,
        SDO_INITIAL_EXTENT, SDO_NEXT_EXTENT, SDO_PCTINCREASE,
        SDO_MIN_EXTENTS, SDO_MAX_EXTENTS, SDO_INDEX_DIMS, SDO_LAYER_GTYPE,
        SDO_RTREE_PCTFREE, SDO_INDEX_PARTITION, SDO_PARTITIONED,
        SDO_RTREE_QUALITY, SDO_INDEX_VERSION, SDO_INDEX_GEODETIC,
        SDO_INDEX_STATUS,
	SDO_NL_INDEX_TABLE,
        SDO_DML_BATCH_SIZE, SDO_RTREE_ENT_XPND,
	SDO_ROOT_MBR                                           --- bug2719909
 from SDO_INDEX_METADATA_TABLE
 where
 (exists
   (select index_name from all_indexes
    where index_name=sdo_index_name and
          owner = sdo_index_owner));

-- ----------------------------
-- View structure for ALL_SDO_LIGHTSOURCES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_LIGHTSOURCES" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION, TYPE, DEFINITION
FROM SDO_LIGHTSOURCEs_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_LRS_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_LRS_METADATA" AS 
SELECT 	SDO_OWNER 	OWNER,
	SDO_TABLE_NAME 	TABLE_NAME,
	SDO_COLUMN_NAME COLUMN_NAME,
	SDO_DIM_POS 	DIM_POS,
	SDO_DIM_UNIT 	DIM_UNIT
FROM SDO_LRS_METADATA_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_MAPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_MAPS" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION,DEFINITION
FROM SDO_MAPS_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_NETWORK_CONSTRAINTS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_NETWORK_CONSTRAINTS" AS 
SELECT  sdo_owner owner, constraint, description, class_name, class     FROM  sdo_network_constraints     WHERE EXISTS       (SELECT  NULL         FROM  all_java_classes          WHERE owner = sdo_owner            AND name = class_name );

-- ----------------------------
-- View structure for ALL_SDO_NETWORK_HISTORIES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_NETWORK_HISTORIES" AS 
SELECT  "OWNER","NETWORK","NODE_HISTORY_TABLE","LINK_HISTORY_TABLE","NODE_TRIGGER","LINK_TRIGGER"
    FROM  sdo_network_histories;

-- ----------------------------
-- View structure for ALL_SDO_NETWORK_JAVA_OBJECTS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_NETWORK_JAVA_OBJECTS" AS 
SELECT  sdo_owner owner, constraint name, description, class_name, class,java_interface     FROM  sdo_network_constraints     WHERE EXISTS       (SELECT  NULL         FROM  all_java_classes          WHERE owner = sdo_owner            AND name = class_name );

-- ----------------------------
-- View structure for ALL_SDO_NETWORK_LOCKS_WM
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_NETWORK_LOCKS_WM" AS 
SELECT  sdo_owner owner, lock_id, network, workspace,  original_node_filter,  original_link_filter,  original_path_filter, adjusted_node_filter, adjusted_link_filter, adjusted_path_filter
    FROM  sdo_network_locks_wm;

-- ----------------------------
-- View structure for ALL_SDO_NETWORK_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_NETWORK_METADATA" AS 
SELECT SDO_OWNER OWNER,
	 NETWORK,
	 NETWORK_ID,
         NETWORK_CATEGORY,
	 GEOMETRY_TYPE,
         NETWORK_TYPE,
 	 NO_OF_HIERARCHY_LEVELS,
	 NO_OF_PARTITIONS,
	 LRS_TABLE_NAME,
	 LRS_GEOM_COLUMN,
         NODE_TABLE_NAME,
         NODE_GEOM_COLUMN,
         NODE_COST_COLUMN,
         NODE_PARTITION_COLUMN,
         NODE_DURATION_COLUMN,
         LINK_TABLE_NAME,
         LINK_GEOM_COLUMN,
	 LINK_DIRECTION,
	 LINK_COST_COLUMN,
         LINK_PARTITION_COLUMN,
	 LINK_DURATION_COLUMN,
	 PATH_TABLE_NAME,
	 PATH_GEOM_COLUMN,
	 PATH_LINK_TABLE_NAME,
	 SUBPATH_TABLE_NAME,
	 SUBPATH_GEOM_COLUMN,
	 PARTITION_TABLE_NAME,
         PARTITION_BLOB_TABLE_NAME,
         COMPONENT_TABLE_NAME,
         NODE_LEVEL_TABLE_NAME,
	 TOPOLOGY,
         USER_DEFINED_DATA,
         EXTERNAL_REFERENCES
  	FROM SDO_NETWORK_METADATA_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_NETWORK_TIMESTAMPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_NETWORK_TIMESTAMPS" AS 
SELECT  "OWNER","NETWORK","TABLE_NAME","LAST_DML_TIME"
    FROM  sdo_network_timestamps;

-- ----------------------------
-- View structure for ALL_SDO_NETWORK_USER_DATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_NETWORK_USER_DATA" AS 
SELECT  sdo_owner owner, network, table_type, data_name, data_type,data_length, category_id
    FROM  sdo_network_user_data;

-- ----------------------------
-- View structure for ALL_SDO_SCENES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_SCENES" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION,DEFINITION
FROM SDO_SCENES_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_STYLES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_STYLES" AS 
SELECT SDO_OWNER OWNER, NAME, TYPE, DESCRIPTION,DEFINITION,
IMAGE,GEOMETRY
FROM SDO_STYLES_TABLE;

-- ----------------------------
-- View structure for ALL_SDO_THEMES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_THEMES" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION, BASE_TABLE,
                  GEOMETRY_COLUMN, STYLING_RULES
FROM SDO_THEMES_TABLE
WHERE
(exists
   (select table_name from all_tables
    where table_name=base_table
      and owner = sdo_owner
    union all
      select table_name from all_object_tables
      where table_name=base_table
      and owner = sdo_owner
    union all
    select view_name table_name from all_views
    where  view_name=base_table
      and owner = sdo_owner));

-- ----------------------------
-- View structure for ALL_SDO_TIN_PC_SYSDATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_TIN_PC_SYSDATA" AS 
SELECT SDO_OWNER                 OWNER,
       TABLE_NAME,
       COLUMN_NAME,
       DEP_TABLE_SCHEMA,
       DEP_TABLE_NAME
FROM SDO_TIN_PC_SYSDATA_TABLE a
WHERE
(
    exists
    (
     select table_name from all_tables
     where table_name=a.table_name
     and owner = sdo_owner
     union all
     select table_name from all_object_tables
     where table_name=a.table_name
     and owner = sdo_owner
     union all
     select view_name table_name from all_views
     where  view_name=a.table_name
     and owner = sdo_owner
     )
);

-- ----------------------------
-- View structure for ALL_SDO_TOPO_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_TOPO_INFO" AS 
SELECT SDO_OWNER OWNER,
       Topology,
       Topology_id,
       Tolerance,
       SRID,
       b.owner Table_Schema,
       b.Table_Name Table_Name,
       b.Column_Name Column_Name,
       b.Layer_ID TG_Layer_ID,
       b.Layer_Type TG_Layer_Type,
       b.Layer_Level TG_Layer_Level,
       b.Child_Layer_id Child_Layer_id,
       Digits_Right_Of_Decimal
FROM SDO_TOPO_METADATA_TABLE a,
     TABLE (a.Topo_Geometry_Layers) b
WHERE
(exists
   (select table_name from all_tables
    where table_name=topology || '_NODE$'
      and owner = sdo_owner
    union all
    select view_name from all_views
    where  view_name=topology || '_NODE$'
      and owner = sdo_owner));

-- ----------------------------
-- View structure for ALL_SDO_TOPO_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_TOPO_METADATA" AS 
SELECT SDO_OWNER OWNER,
       Topology,
       Topology_id,
       Tolerance,
       SRID,
       b.owner Table_owner,
       b.Table_Name Table_Name,
       b.Column_Name Column_Name,
       b.Layer_ID TG_Layer_ID,
       b.Layer_Type TG_Layer_Type,
       b.Layer_Level TG_Layer_Level,
       b.Child_Layer_id Child_Layer_id,
       Topology||'_NODE_S' Node_Sequence,
       Topology||'_EDGE_S' Edge_Sequence,
       Topology||'_FACE_S' Face_Sequence,
       Topology||'_TG_S' TG_Sequence,
       Digits_Right_Of_Decimal
FROM SDO_TOPO_METADATA_TABLE a,
     TABLE (a.Topo_Geometry_Layers) b
WHERE
(exists
   (select table_name from all_tables
    where table_name=topology || '_NODE$'
      and owner = sdo_owner
    union all
    select view_name from all_views
    where  view_name=topology || '_NODE$'
      and owner = sdo_owner));

-- ----------------------------
-- View structure for ALL_SDO_VIEWFRAMES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ALL_SDO_VIEWFRAMES" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION, SCENE_NAME, DEFINITION
FROM SDO_VIEWFRAMES_TABLE;

-- ----------------------------
-- View structure for CS_SRS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."CS_SRS" AS 
(SELECT "CS_NAME","SRID","AUTH_SRID","AUTH_NAME","WKTEXT","CS_BOUNDS","WKTEXT3D" FROM MDSYS.SDO_CS_SRS);

-- ----------------------------
-- View structure for CURRENTSESSIONTOKENMAP$
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."CURRENTSESSIONTOKENMAP$" AS 
select sessionId , tokenId from MDSYS.CurrentSessionTokenMap_t$ where sessionId in (select dbms_session.unique_session_id from dual);

-- ----------------------------
-- View structure for DBA_GEOMETRY_COLUMNS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."DBA_GEOMETRY_COLUMNS" AS 
select "F_TABLE_SCHEMA","F_TABLE_NAME","F_GEOMETRY_COLUMN","G_TABLE_SCHEMA","G_TABLE_NAME","STORAGE_TYPE","GEOMETRY_TYPE","COORD_DIMENSION","MAX_PPR","SRID" from OGIS_GEOMETRY_COLUMNS;

-- ----------------------------
-- View structure for DBA_SDO_MAPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."DBA_SDO_MAPS" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION,DEFINITION
FROM SDO_MAPS_TABLE;

-- ----------------------------
-- View structure for DBA_SDO_STYLES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."DBA_SDO_STYLES" AS 
SELECT SDO_OWNER OWNER, NAME, TYPE, DESCRIPTION,DEFINITION,
IMAGE,GEOMETRY
FROM SDO_STYLES_TABLE;

-- ----------------------------
-- View structure for DBA_SDO_THEMES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."DBA_SDO_THEMES" AS 
SELECT SDO_OWNER OWNER, NAME, DESCRIPTION, BASE_TABLE,
              GEOMETRY_COLUMN, STYLING_RULES
FROM SDO_THEMES_TABLE
WHERE
(exists
   (select table_name from dba_tables
    where table_name=base_table
    union all
      select table_name from dba_object_tables
      where table_name=base_table
    union all
    select view_name table_name from dba_views
    where  view_name=base_table));

-- ----------------------------
-- View structure for GEODETIC_SRIDS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."GEODETIC_SRIDS" AS 
select srid from MDSYS.CS_SRS where WKTEXT like 'GEOGCS%';

-- ----------------------------
-- View structure for MY_SDO_INDEX_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."MY_SDO_INDEX_METADATA" AS 
select SDO_INDEX_OWNER, SDO_INDEX_TYPE,
        SDO_LEVEL, SDO_NUMTILES, SDO_MAXLEVEL,
        SDO_COMMIT_INTERVAL, SDO_INDEX_TABLE,
        SDO_INDEX_NAME,  SDO_INDEX_PRIMARY,
	SDO_TSNAME, SDO_COLUMN_NAME,
	SDO_RTREE_HEIGHT, SDO_RTREE_NUM_NODES,
        SDO_RTREE_DIMENSIONALITY, SDO_RTREE_FANOUT,
        SDO_RTREE_ROOT, SDO_RTREE_SEQ_NAME,
        SDO_FIXED_META, SDO_TABLESPACE,
        SDO_INITIAL_EXTENT, SDO_NEXT_EXTENT,
        SDO_PCTINCREASE, SDO_MIN_EXTENTS,
        SDO_MAX_EXTENTS, SDO_INDEX_DIMS,
        SDO_LAYER_GTYPE, SDO_RTREE_PCTFREE,
        SDO_INDEX_PARTITION, SDO_PARTITIONED,
        SDO_RTREE_QUALITY, SDO_INDEX_VERSION,
        SDO_INDEX_GEODETIC, SDO_INDEX_STATUS,
  	SDO_NL_INDEX_TABLE,
        SDO_DML_BATCH_SIZE, SDO_RTREE_ENT_XPND,
	SDO_ROOT_MBR
 from SDO_INDEX_METADATA_TABLE
 where sdo_index_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for ROWTOKENMAP$
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."ROWTOKENMAP$" AS 
select tokenId , tableName , rpointer , markedDeleted from  MDSYS.RowTokenMap_t$  where tokenId in (select tokenId from mdsys.TokenSessionMap$);

-- ----------------------------
-- View structure for SDO_ANGLE_UNITS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_ANGLE_UNITS" AS 
SELECT
    SHORT_NAME "SDO_UNIT",
    UNIT_OF_MEAS_NAME "UNIT_NAME",
    (FACTOR_B/FACTOR_C) "CONVERSION_FACTOR"
  FROM
    MDSYS.SDO_UNITS_OF_MEASURE
  WHERE
    lower(UNIT_OF_MEAS_TYPE)='angle';

-- ----------------------------
-- View structure for SDO_AREA_UNITS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_AREA_UNITS" AS 
SELECT
    SHORT_NAME "SDO_UNIT",
    UNIT_OF_MEAS_NAME "UNIT_NAME",
    (FACTOR_B/FACTOR_C) "CONVERSION_FACTOR"
  FROM
    MDSYS.SDO_UNITS_OF_MEASURE
  WHERE
    lower(UNIT_OF_MEAS_TYPE)='area';

-- ----------------------------
-- View structure for SDO_AVAILABLE_ELEM_OPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_AVAILABLE_ELEM_OPS" AS 
(
            SELECT
              OPS.SOURCE_SRID,
              OPS.COORD_OP_ID             "COORD_OP_ID",
              OPS.TARGET_SRID,
              OPS.IS_IMPLEMENTED_FORWARD  "IS_IMPLEMENTED"
            FROM
              MDSYS.SDO_COORD_OPS         OPS
            WHERE
              NOT (OPS.COORD_OP_TYPE = 'CONCATENATED OPERATION')
          )
          UNION
          (
            SELECT
              OPS.TARGET_SRID "SOURCE_SRID",
              -OPS.COORD_OP_ID            "COORD_OP_ID",
              OPS.SOURCE_SRID "TARGET_SRID",
              OPS.IS_IMPLEMENTED_REVERSE  "IS_IMPLEMENTED"
            FROM
              MDSYS.SDO_COORD_OPS         OPS
            WHERE
              NOT (OPS.COORD_OP_TYPE = 'CONCATENATED OPERATION')
              AND
              OPS.REVERSE_OP = 1
          );

-- ----------------------------
-- View structure for SDO_AVAILABLE_NON_ELEM_OPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_AVAILABLE_NON_ELEM_OPS" AS 
SELECT SOURCE_SRID, COORD_OP_ID, TARGET_SRID, IS_IMPLEMENTED_FORWARD "IS_IMPLEMENTED" FROM MDSYS.SDO_COORD_OPS WHERE COORD_OP_TYPE = 'CONCATENATED OPERATION'
          UNION
          SELECT TARGET_SRID "SOURCE_SRID", -COORD_OP_ID, SOURCE_SRID "TARGET_SRID", IS_IMPLEMENTED_REVERSE "IS_IMPLEMENTED" FROM MDSYS.SDO_COORD_OPS WHERE COORD_OP_TYPE = 'CONCATENATED OPERATION' AND REVERSE_OP = 1;

-- ----------------------------
-- View structure for SDO_AVAILABLE_OPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_AVAILABLE_OPS" AS 
SELECT SOURCE_SRID, COORD_OP_ID, TARGET_SRID, IS_IMPLEMENTED FROM MDSYS.SDO_AVAILABLE_ELEM_OPS
          UNION
          SELECT SOURCE_SRID, COORD_OP_ID, TARGET_SRID, IS_IMPLEMENTED FROM MDSYS.SDO_AVAILABLE_NON_ELEM_OPS;

-- ----------------------------
-- View structure for SDO_COORD_REF_SYSTEM
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_COORD_REF_SYSTEM" AS 
SELECT "SRID","COORD_REF_SYS_NAME","COORD_REF_SYS_KIND","COORD_SYS_ID","DATUM_ID","GEOG_CRS_DATUM_ID","SOURCE_GEOG_SRID","PROJECTION_CONV_ID","CMPD_HORIZ_SRID","CMPD_VERT_SRID","INFORMATION_SOURCE","DATA_SOURCE","IS_LEGACY","LEGACY_CODE","LEGACY_WKTEXT","LEGACY_CS_BOUNDS","IS_VALID","SUPPORTS_SDO_GEOMETRY" FROM MDSYS.SDO_COORD_REF_SYS;

-- ----------------------------
-- View structure for SDO_CRS_COMPOUND
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_CRS_COMPOUND" AS 
SELECT
          SRID,
          COORD_REF_SYS_NAME,
          CMPD_HORIZ_SRID,
          CMPD_VERT_SRID,
          INFORMATION_SOURCE,
          DATA_SOURCE
        FROM
          MDSYS.SDO_COORD_REF_SYS
        WHERE
          COORD_REF_SYS_KIND = 'COMPOUND';

-- ----------------------------
-- View structure for SDO_CRS_ENGINEERING
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_CRS_ENGINEERING" AS 
SELECT
          SRID,
          COORD_REF_SYS_NAME,
          COORD_SYS_ID,
          DATUM_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
        FROM
          MDSYS.SDO_COORD_REF_SYS
        WHERE
          COORD_REF_SYS_KIND = 'ENGINEERING';

-- ----------------------------
-- View structure for SDO_CRS_GEOCENTRIC
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_CRS_GEOCENTRIC" AS 
SELECT
          SRID,
          COORD_REF_SYS_NAME,
          COORD_SYS_ID,
          DATUM_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
        FROM
          MDSYS.SDO_COORD_REF_SYS
        WHERE
          COORD_REF_SYS_KIND = 'GEOCENTRIC';

-- ----------------------------
-- View structure for SDO_CRS_GEOGRAPHIC2D
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_CRS_GEOGRAPHIC2D" AS 
SELECT
          SRID,
          COORD_REF_SYS_NAME,
          COORD_SYS_ID,
          DATUM_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
        FROM
          MDSYS.SDO_COORD_REF_SYS
        WHERE
          COORD_REF_SYS_KIND = 'GEOGRAPHIC2D';

-- ----------------------------
-- View structure for SDO_CRS_GEOGRAPHIC3D
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_CRS_GEOGRAPHIC3D" AS 
SELECT
          SRID,
          COORD_REF_SYS_NAME,
          COORD_SYS_ID,
          DATUM_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
        FROM
          MDSYS.SDO_COORD_REF_SYS
        WHERE
          COORD_REF_SYS_KIND = 'GEOGRAPHIC3D';

-- ----------------------------
-- View structure for SDO_CRS_PROJECTED
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_CRS_PROJECTED" AS 
SELECT
          SRID,
          COORD_REF_SYS_NAME,
          COORD_SYS_ID,
          SOURCE_GEOG_SRID,
          PROJECTION_CONV_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
        FROM
          MDSYS.SDO_COORD_REF_SYS
        WHERE
          COORD_REF_SYS_KIND = 'PROJECTED';

-- ----------------------------
-- View structure for SDO_CRS_VERTICAL
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_CRS_VERTICAL" AS 
SELECT
          SRID,
          COORD_REF_SYS_NAME,
          COORD_SYS_ID,
          DATUM_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
        FROM
          MDSYS.SDO_COORD_REF_SYS
        WHERE
          COORD_REF_SYS_KIND = 'VERTICAL';

-- ----------------------------
-- View structure for SDO_DATUM_ENGINEERING
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_DATUM_ENGINEERING" AS 
SELECT
          DATUM_ID,
          DATUM_NAME,
          ELLIPSOID_ID,
          PRIME_MERIDIAN_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
          SHIFT_X,
          SHIFT_Y,
          SHIFT_Z,
          ROTATE_X,
          ROTATE_Y,
          ROTATE_Z,
          SCALE_ADJUST
        FROM
          MDSYS.SDO_DATUMS
        WHERE
          DATUM_TYPE = 'ENGINEERING';

-- ----------------------------
-- View structure for SDO_DATUM_GEODETIC
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_DATUM_GEODETIC" AS 
SELECT
          DATUM_ID,
          DATUM_NAME,
          ELLIPSOID_ID,
          PRIME_MERIDIAN_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
          SHIFT_X,
          SHIFT_Y,
          SHIFT_Z,
          ROTATE_X,
          ROTATE_Y,
          ROTATE_Z,
          SCALE_ADJUST
        FROM
          MDSYS.SDO_DATUMS
        WHERE
          DATUM_TYPE = 'GEODETIC';

-- ----------------------------
-- View structure for SDO_DATUM_VERTICAL
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_DATUM_VERTICAL" AS 
SELECT
          DATUM_ID,
          DATUM_NAME,
          ELLIPSOID_ID,
          PRIME_MERIDIAN_ID,
          INFORMATION_SOURCE,
          DATA_SOURCE
          SHIFT_X,
          SHIFT_Y,
          SHIFT_Z,
          ROTATE_X,
          ROTATE_Y,
          ROTATE_Z,
          SCALE_ADJUST
        FROM
          MDSYS.SDO_DATUMS
        WHERE
          DATUM_TYPE = 'VERTICAL';

-- ----------------------------
-- View structure for SDO_DATUMS_OLD_FORMAT
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_DATUMS_OLD_FORMAT" AS 
SELECT
    DATUM_NAME "NAME",
    SHIFT_X,
    SHIFT_Y,
    SHIFT_Z,
    ROTATE_X,
    ROTATE_Y,
    ROTATE_Z,
    SCALE_ADJUST
  FROM
    MDSYS.SDO_DATUMS;

-- ----------------------------
-- View structure for SDO_DIST_UNITS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_DIST_UNITS" AS 
SELECT
    SHORT_NAME "SDO_UNIT",
    UNIT_OF_MEAS_NAME "UNIT_NAME",
    (FACTOR_B/FACTOR_C) "CONVERSION_FACTOR"
  FROM
    MDSYS.SDO_UNITS_OF_MEASURE
  WHERE
    lower(UNIT_OF_MEAS_TYPE)='length';

-- ----------------------------
-- View structure for SDO_ELLIPSOIDS_OLD_FORMAT
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_ELLIPSOIDS_OLD_FORMAT" AS 
SELECT
    ELLIPSOID_NAME "NAME",
    SEMI_MAJOR_AXIS "SEMI_MAJOR_AXIS",
    INV_FLATTENING "INVERSE_FLATTENING"
  FROM
    MDSYS.SDO_ELLIPSOIDS
  WHERE
    NOT (INV_FLATTENING IS NULL)
UNION
  SELECT
    ELLIPSOID_NAME "NAME",
    SEMI_MAJOR_AXIS "SEMI_MAJOR_AXIS",
    (SEMI_MAJOR_AXIS/(SEMI_MAJOR_AXIS - SEMI_MINOR_AXIS)) "INVERSE_FLATTENING"
  FROM
    MDSYS.SDO_ELLIPSOIDS
  WHERE
    (INV_FLATTENING IS NULL)
    AND
    (SEMI_MINOR_AXIS < SEMI_MAJOR_AXIS)
UNION
  SELECT
    ELLIPSOID_NAME "NAME",
    SEMI_MAJOR_AXIS "SEMI_MAJOR_AXIS",
    1000000000000 "INVERSE_FLATTENING"
  FROM
    MDSYS.SDO_ELLIPSOIDS
  WHERE
    (INV_FLATTENING IS NULL)
    AND
    NOT (SEMI_MINOR_AXIS < SEMI_MAJOR_AXIS);

-- ----------------------------
-- View structure for SDO_PROJECTIONS_OLD_FORMAT
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_PROJECTIONS_OLD_FORMAT" AS 
(
  SELECT DISTINCT
    OP.COORD_OP_NAME "NAME"
  FROM
    MDSYS.SDO_COORD_REF_SYS CRS,
    MDSYS.SDO_COORD_OPS OP
  WHERE
    CRS.PROJECTION_CONV_ID = OP.COORD_OP_ID
UNION
  SELECT
    NAME
  FROM
    MDSYS.SDO_PROJECTIONS_OLD_SNAPSHOT);

-- ----------------------------
-- View structure for SDO_RELATEMASK_TABLE
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_RELATEMASK_TABLE" AS 
select sdo_mask, sdo_relation from md$relate;

-- ----------------------------
-- View structure for SDO_TOPO_TRANSACT_DATA$
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."SDO_TOPO_TRANSACT_DATA$" AS 
select TOPOLOGY_ID,TOPO_ID, TOPO_TYPE, TOPO_OP, PARENT_ID
       from SDO_TOPO_TRANSACT_DATA;

-- ----------------------------
-- View structure for TOKENSESSIONMAP$
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."TOKENSESSIONMAP$" AS 
select sessionId , tokenId , expiryTime, expiryOffset from MDSYS.TokenSessionMap_t$ where (tokenId in (select tokenId from MDSYS.CurrentSessionTokenMap$ where sessionId in (select dbms_session.unique_session_id from dual))) or expiryTime < sysdate;

-- ----------------------------
-- View structure for USER_ANNOTATION_TEXT_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_ANNOTATION_TEXT_METADATA" AS 
SELECT F_TABLE_NAME TABLE_NAME, F_TEXT_COLUMN COLUMN_NAME,
               MAP_BASE_SCALE,
               TEXT_DEFAULT_EXPRESSION TEXT_EXPRESSION ,
               TEXT_DEFAULT_ATTRIBUTES TEXT_ATTRIBUTES
FROM SDO_ANNOTATION_TEXT_METADATA
WHERE F_TABLE_SCHEMA =  sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_GEOMETRY_COLUMNS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_GEOMETRY_COLUMNS" AS 
select "F_TABLE_SCHEMA","F_TABLE_NAME","F_GEOMETRY_COLUMN","G_TABLE_SCHEMA","G_TABLE_NAME","STORAGE_TYPE","GEOMETRY_TYPE","COORD_DIMENSION","MAX_PPR","SRID" from OGIS_GEOMETRY_COLUMNS
where f_table_schema=user and g_table_schema=user;

-- ----------------------------
-- View structure for USER_SDO_3DTHEMES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_3DTHEMES" AS 
SELECT NAME, DESCRIPTION, BASE_TABLE, THEME_COLUMN, STYLE_COLUMN, THEME_TYPE, DEFINITION
FROM SDO_3DTHEMES_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_3DTXFMS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_3DTXFMS" AS 
SELECT NAME, DESCRIPTION,
TYPE, AFFINE_PARAMETERS, COORD_TXFM_SRC_SRID,
COORD_TXFM_TGT_SRID, TXFM_SERIES_IDS
FROM SDO_3DTXFMS_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_ANIMATIONS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_ANIMATIONS" AS 
SELECT NAME, DESCRIPTION,DEFINITION
FROM SDO_ANIMATIONS_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_CACHED_MAPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_CACHED_MAPS" AS 
SELECT NAME, DESCRIPTION, tiles_table, is_online, is_internal, DEFINITION, base_map, map_adapter
FROM mdsys.SDO_CACHED_MAPS_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_GEOM_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_GEOM_METADATA" AS 
SELECT SDO_TABLE_NAME TABLE_NAME,
       SDO_COLUMN_NAME COLUMN_NAME,
       SDO_DIMINFO DIMINFO,
       SDO_SRID SRID
FROM SDO_GEOM_METADATA_TABLE
WHERE  sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_GEOR_SYSDATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_GEOR_SYSDATA" AS 
SELECT TABLE_NAME, COLUMN_NAME,METADATA_COLUMN_NAME,
              RDT_TABLE_NAME,RASTER_ID,OTHER_TABLE_NAMES
FROM ALL_SDO_GEOR_SYSDATA
WHERE owner = sys_context('userenv', 'SESSION_USER');

-- ----------------------------
-- View structure for USER_SDO_INDEX_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_INDEX_INFO" AS 
select SDO_INDEX_NAME index_name,  table_owner, table_name,
       REPLACE(sdo_column_name, '"') column_name,
       SDO_INDEX_TYPE, SDO_INDEX_TABLE, SDO_INDEX_STATUS
 from user_sdo_index_metadata,
     user_indexes
 where index_name = sdo_index_name;

-- ----------------------------
-- View structure for USER_SDO_INDEX_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_INDEX_METADATA" AS 
select SDO_INDEX_OWNER, SDO_INDEX_TYPE,
        SDO_LEVEL, SDO_NUMTILES, SDO_MAXLEVEL,
        SDO_COMMIT_INTERVAL, SDO_INDEX_TABLE,
        SDO_INDEX_NAME,  SDO_INDEX_PRIMARY,
	SDO_TSNAME, SDO_COLUMN_NAME,
	SDO_RTREE_HEIGHT, SDO_RTREE_NUM_NODES,
        SDO_RTREE_DIMENSIONALITY, SDO_RTREE_FANOUT,
        SDO_RTREE_ROOT, SDO_RTREE_SEQ_NAME,
        SDO_FIXED_META, SDO_TABLESPACE,
        SDO_INITIAL_EXTENT, SDO_NEXT_EXTENT,
        SDO_PCTINCREASE, SDO_MIN_EXTENTS,
        SDO_MAX_EXTENTS, SDO_INDEX_DIMS,
        SDO_LAYER_GTYPE, SDO_RTREE_PCTFREE,
        SDO_INDEX_PARTITION, SDO_PARTITIONED,
        SDO_RTREE_QUALITY, SDO_INDEX_VERSION,
        SDO_INDEX_GEODETIC, SDO_INDEX_STATUS,
  	SDO_NL_INDEX_TABLE,
        SDO_DML_BATCH_SIZE, SDO_RTREE_ENT_XPND,
	SDO_ROOT_MBR                                           --- bug2719909
 from SDO_INDEX_METADATA_TABLE
 where
 (exists
   (select index_name from user_indexes
    where index_name=sdo_index_name and
          sdo_index_owner = sys_context('userenv', 'CURRENT_SCHEMA')));

-- ----------------------------
-- View structure for USER_SDO_LIGHTSOURCES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_LIGHTSOURCES" AS 
SELECT NAME, DESCRIPTION, TYPE, DEFINITION
FROM SDO_LIGHTSOURCEs_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_LRS_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_LRS_METADATA" AS 
SELECT 	SDO_TABLE_NAME 	TABLE_NAME,
	SDO_COLUMN_NAME COLUMN_NAME,
	SDO_DIM_POS 	DIM_POS,
	SDO_DIM_UNIT 	DIM_UNIT
FROM SDO_LRS_METADATA_TABLE,
     (select sys_context('userenv', 'CURRENT_SCHEMA') username from dual)
WHERE  sdo_owner = username;

-- ----------------------------
-- View structure for USER_SDO_MAPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_MAPS" AS 
SELECT NAME, DESCRIPTION,DEFINITION
FROM SDO_MAPS_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_NETWORK_CONSTRAINTS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_NETWORK_CONSTRAINTS" AS 
SELECT  constraint, description, class_name, class
    FROM  sdo_network_constraints
    WHERE sdo_owner = sys_context('USERENV', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_NETWORK_HISTORIES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_NETWORK_HISTORIES" AS 
SELECT  network, node_history_table, link_history_table, node_trigger, link_trigger
    FROM  sdo_network_histories
    WHERE owner = sys_context('USERENV', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_NETWORK_JAVA_OBJECTS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_NETWORK_JAVA_OBJECTS" AS 
SELECT  constraint name, description, class_name, class,java_interface
    FROM  sdo_network_constraints
    WHERE sdo_owner = sys_context('USERENV', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_NETWORK_LOCKS_WM
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_NETWORK_LOCKS_WM" AS 
SELECT  lock_id, network, workspace, original_node_filter, original_link_filter, original_path_filter, adjusted_node_filter, adjusted_link_filter, adjusted_path_filter
    FROM  sdo_network_locks_wm
    WHERE sdo_owner = sys_context('USERENV', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_NETWORK_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_NETWORK_METADATA" AS 
SELECT NETWORK,
	 NETWORK_ID,
         NETWORK_CATEGORY,
	 GEOMETRY_TYPE,
	 NETWORK_TYPE,
	 NO_OF_HIERARCHY_LEVELS,
	 NO_OF_PARTITIONS,
	 LRS_TABLE_NAME,
	 LRS_GEOM_COLUMN,
         NODE_TABLE_NAME,
         NODE_GEOM_COLUMN,
         NODE_COST_COLUMN,
         NODE_PARTITION_COLUMN,
         NODE_DURATION_COLUMN,
         LINK_TABLE_NAME,
         LINK_GEOM_COLUMN,
	 LINK_DIRECTION,
	 LINK_COST_COLUMN,
         LINK_PARTITION_COLUMN,
	 LINK_DURATION_COLUMN,
	 PATH_TABLE_NAME,
	 PATH_GEOM_COLUMN,
	 PATH_LINK_TABLE_NAME,
	 SUBPATH_TABLE_NAME,
	 SUBPATH_GEOM_COLUMN,
         PARTITION_TABLE_NAME,
         PARTITION_BLOB_TABLE_NAME,
         COMPONENT_TABLE_NAME,
         NODE_LEVEL_TABLE_NAME,
	 TOPOLOGY,
         USER_DEFINED_DATA,
         EXTERNAL_REFERENCES
  FROM SDO_NETWORK_METADATA_TABLE
  	WHERE SDO_OWNER = sys_context('userenv','CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_NETWORK_TIMESTAMPS
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_NETWORK_TIMESTAMPS" AS 
SELECT  network, table_name, last_dml_time
    FROM  sdo_network_timestamps
    WHERE owner = sys_context('USERENV', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_NETWORK_USER_DATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_NETWORK_USER_DATA" AS 
SELECT  network, table_type, data_name, data_type,data_length, category_id
    FROM  sdo_network_user_data
    WHERE sdo_owner = sys_context('USERENV', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_SCENES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_SCENES" AS 
SELECT NAME, DESCRIPTION,DEFINITION
FROM SDO_SCENES_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_STYLES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_STYLES" AS 
SELECT NAME, TYPE, DESCRIPTION,DEFINITION, IMAGE,GEOMETRY
FROM SDO_STYLES_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_THEMES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_THEMES" AS 
SELECT NAME, DESCRIPTION, BASE_TABLE, GEOMETRY_COLUMN, STYLING_RULES
FROM SDO_THEMES_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_TIN_PC_SYSDATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_TIN_PC_SYSDATA" AS 
SELECT "OWNER","TABLE_NAME","COLUMN_NAME","DEP_TABLE_SCHEMA","DEP_TABLE_NAME"  FROM all_sdo_tin_pc_sysdata
WHERE owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_TOPO_INFO
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_TOPO_INFO" AS 
SELECT SDO_OWNER OWNER,
       Topology,
       Topology_id,
       Tolerance,
       SRID,
       b.owner Table_Schema,
       b.Table_Name Table_Name,
       b.Column_Name Column_Name,
       b.Layer_ID TG_Layer_ID,
       b.Layer_Type TG_Layer_Type,
       b.Layer_Level TG_Layer_Level,
       b.Child_Layer_id Child_Layer_id,
       Digits_Right_Of_Decimal
FROM SDO_TOPO_METADATA_TABLE a,
     TABLE (a.Topo_Geometry_Layers) b
WHERE  sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_TOPO_METADATA
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_TOPO_METADATA" AS 
SELECT SDO_OWNER OWNER,
       Topology,
       Topology_id,
       Tolerance,
       SRID,
       b.owner Table_Schema,
       b.Table_Name Table_Name,
       b.Column_Name Column_Name,
       b.Layer_ID TG_Layer_ID,
       b.Layer_Type TG_Layer_Type,
       b.Layer_Level TG_Layer_Level,
       b.Child_Layer_id Child_Layer_id,
       Topology||'_NODE_S' Node_Sequence,
       Topology||'_EDGE_S' Edge_Sequence,
       Topology||'_FACE_S' Face_Sequence,
       Topology||'_TG_S' TG_Sequence,
       Digits_Right_Of_Decimal
FROM SDO_TOPO_METADATA_TABLE a,
     TABLE (a.Topo_Geometry_Layers) b
WHERE  sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- View structure for USER_SDO_VIEWFRAMES
-- ----------------------------
CREATE OR REPLACE FORCE VIEW "MDSYS"."USER_SDO_VIEWFRAMES" AS 
SELECT NAME, DESCRIPTION, SCENE_NAME, DEFINITION
FROM SDO_VIEWFRAMES_TABLE
WHERE sdo_owner = sys_context('userenv', 'CURRENT_SCHEMA');

-- ----------------------------
-- Procedure structure for ELOCATIONSETJVMHEAPSIZE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "MDSYS"."ELOCATIONSETJVMHEAPSIZE"(sz NUMBER)
 AS LANGUAGE JAVA NAME
  'oracle.aurora.vm.OracleRuntime.setMaxMemorySize(long)';
/

-- ----------------------------
-- Procedure structure for RESET_INPROG_INDEX
-- ----------------------------
CREATE OR REPLACE PROCEDURE "MDSYS"."RESET_INPROG_INDEX" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
161 11b
/y2Sk78OMa1Yuol28mrfzha8VeUwg43QmMvWfHTp2v7VVhvIdUWfwLaZZrM2WFDG2+HlBJIv
AY9O/QKAKbRW99DNE25u8MqTZTWxNBO8JyxkuULH6lV0a6324Gmr3IVm6RmVus67FmIpCd56
JXsbm3/lpkVU4PBYZIJ3ofS9NwQMMnBd1QSngJMtAVGXLRV4EOC4ZJi8EsSBLzAwK99EOKAy
LRxdhUj/AMxnV3PPJ3JmGXxAk8PFNzxWyu+QtPVBc0XbnYfZPBhKCrM/Tvs1acNH
/

-- ----------------------------
-- Function structure for HHAND
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHAND" ( hh1 IN RAW, hh2 IN RAW )
    RETURN RAW IS
begin
 return md.hhand(hh1, hh2);
end;
/

-- ----------------------------
-- Function structure for HHBYTELEN
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHBYTELEN" (ndim IN BINARY_INTEGER, mlv IN BINARY_INTEGER)
    RETURN BINARY_INTEGER IS
begin
  return md.hhbytelen(ndim,mlv);
end;
/

-- ----------------------------
-- Function structure for HHCBIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCBIT" (hhc IN RAW, bit_number IN BINARY_INTEGER)
    RETURN RAW IS
begin
 return md.hhcbit(hhc,bit_number);
end;
/

-- ----------------------------
-- Function structure for HHCELLBNDRY
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCELLBNDRY" (hhc IN RAW, dim IN BINARY_INTEGER,
           lb IN NUMBER, ub IN NUMBER,lv IN BINARY_INTEGER, mm IN VARCHAR2)
    RETURN NUMBER IS
begin
 return md.hhcellbndry(hhc,dim,lb,ub,lv,mm);
end;
/

-- ----------------------------
-- Function structure for HHCELLSIZE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCELLSIZE" (
      l01 IN NUMBER,      u01 IN NUMBER,      lv01 IN BINARY_INTEGER,
      l02 IN NUMBER:=NULL,u02 IN NUMBER:=NULL,lv02 IN BINARY_INTEGER:=NULL)
    RETURN NUMBER IS
begin
  return md.hhcellsize(l01,u01,lv01,l02,u02,lv02);
end;
/

-- ----------------------------
-- Function structure for HHCLDATE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCLDATE" (jd IN NUMBER, fmt IN VARCHAR2)
    RETURN VARCHAR2 IS
begin
  return md.hhcldate(jd,fmt);
end;
/

-- ----------------------------
-- Function structure for HHCOLLAPSE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCOLLAPSE"( hhc IN RAW,
           d01 IN BINARY_INTEGER)
    RETURN RAW IS
begin
 return md.hhcollapse(hhc, d01);
end;
/

-- ----------------------------
-- Function structure for HHCOMMONCODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCOMMONCODE" (hh1 IN RAW, hh2 IN RAW)
    RETURN RAW IS
begin
 return md.hhcommoncode(hh1,hh2);
end;
/

-- ----------------------------
-- Function structure for HHCOMPARE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCOMPARE" (hh1 IN RAW, hh2 IN RAW)
    RETURN BINARY_INTEGER IS
begin
 return md.hhcompare(hh1,hh2);
end;
/

-- ----------------------------
-- Function structure for HHCOMPOSE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHCOMPOSE"( hhc IN RAW,
           d01 IN BINARY_INTEGER)
    RETURN RAW IS
begin
 return md.hhcompose(hhc,d01);
end;
/

-- ----------------------------
-- Function structure for HHDECODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHDECODE" (
           hhc IN RAW, dim IN BINARY_INTEGER, lb IN NUMBER, ub IN NUMBER)
    RETURN NUMBER IS
begin
  return md.hhdecode(hhc,dim,lb,ub);
end;
/

-- ----------------------------
-- Function structure for HHDISTANCE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHDISTANCE" (type IN VARCHAR2, hh1 IN RAW, hh2 IN RAW,
           l01 IN NUMBER,       u01 IN NUMBER)
    RETURN NUMBER IS
begin
  return md.hhdistance(type,hh1,hh2,l01,u01);
end;
/

-- ----------------------------
-- Function structure for HHENCODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHENCODE" (
           v01 IN NUMBER,         l01 IN NUMBER,
           u01 IN NUMBER,         p01 IN BINARY_INTEGER,
           v02 IN NUMBER := NULL, l02 IN NUMBER := NULL,
           u02 IN NUMBER := NULL, p02 IN BINARY_INTEGER := NULL,
           v03 IN NUMBER := NULL, l03 IN NUMBER := NULL,
           u03 IN NUMBER := NULL, p03 IN BINARY_INTEGER := NULL,
           v04 IN NUMBER := NULL, l04 IN NUMBER := NULL,
           u04 IN NUMBER := NULL, p04 IN BINARY_INTEGER := NULL,
           v05 IN NUMBER := NULL, l05 IN NUMBER := NULL,
           u05 IN NUMBER := NULL, p05 IN BINARY_INTEGER := NULL,
           v06 IN NUMBER := NULL, l06 IN NUMBER := NULL,
           u06 IN NUMBER := NULL, p06 IN BINARY_INTEGER := NULL,
           v07 IN NUMBER := NULL, l07 IN NUMBER := NULL,
           u07 IN NUMBER := NULL, p07 IN BINARY_INTEGER := NULL,
           v08 IN NUMBER := NULL, l08 IN NUMBER := NULL,
           u08 IN NUMBER := NULL, p08 IN BINARY_INTEGER := NULL,
           v09 IN NUMBER := NULL, l09 IN NUMBER := NULL,
           u09 IN NUMBER := NULL, p09 IN BINARY_INTEGER := NULL,
           v10 IN NUMBER := NULL, l10 IN NUMBER := NULL,
           u10 IN NUMBER := NULL, p10 IN BINARY_INTEGER := NULL,
           v11 IN NUMBER := NULL, l11 IN NUMBER := NULL,
           u11 IN NUMBER := NULL, p11 IN BINARY_INTEGER := NULL,
           v12 IN NUMBER := NULL, l12 IN NUMBER := NULL,
           u12 IN NUMBER := NULL, p12 IN BINARY_INTEGER := NULL,
           v13 IN NUMBER := NULL, l13 IN NUMBER := NULL,
           u13 IN NUMBER := NULL, p13 IN BINARY_INTEGER := NULL,
           v14 IN NUMBER := NULL, l14 IN NUMBER := NULL,
           u14 IN NUMBER := NULL, p14 IN BINARY_INTEGER := NULL,
           v15 IN NUMBER := NULL, l15 IN NUMBER := NULL,
           u15 IN NUMBER := NULL, p15 IN BINARY_INTEGER := NULL,
           v16 IN NUMBER := NULL, l16 IN NUMBER := NULL,
           u16 IN NUMBER := NULL, p16 IN BINARY_INTEGER := NULL,
           v17 IN NUMBER := NULL, l17 IN NUMBER := NULL,
           u17 IN NUMBER := NULL, p17 IN BINARY_INTEGER := NULL,
           v18 IN NUMBER := NULL, l18 IN NUMBER := NULL,
           u18 IN NUMBER := NULL, p18 IN BINARY_INTEGER := NULL,
           v19 IN NUMBER := NULL, l19 IN NUMBER := NULL,
           u19 IN NUMBER := NULL, p19 IN BINARY_INTEGER := NULL,
           v20 IN NUMBER := NULL, l20 IN NUMBER := NULL,
           u20 IN NUMBER := NULL, p20 IN BINARY_INTEGER := NULL,
           v21 IN NUMBER := NULL, l21 IN NUMBER := NULL,
           u21 IN NUMBER := NULL, p21 IN BINARY_INTEGER := NULL,
           v22 IN NUMBER := NULL, l22 IN NUMBER := NULL,
           u22 IN NUMBER := NULL, p22 IN BINARY_INTEGER := NULL,
           v23 IN NUMBER := NULL, l23 IN NUMBER := NULL,
           u23 IN NUMBER := NULL, p23 IN BINARY_INTEGER := NULL,
           v24 IN NUMBER := NULL, l24 IN NUMBER := NULL,
           u24 IN NUMBER := NULL, p24 IN BINARY_INTEGER := NULL,
           v25 IN NUMBER := NULL, l25 IN NUMBER := NULL,
           u25 IN NUMBER := NULL, p25 IN BINARY_INTEGER := NULL,
           v26 IN NUMBER := NULL, l26 IN NUMBER := NULL,
           u26 IN NUMBER := NULL, p26 IN BINARY_INTEGER := NULL,
           v27 IN NUMBER := NULL, l27 IN NUMBER := NULL,
           u27 IN NUMBER := NULL, p27 IN BINARY_INTEGER := NULL,
           v28 IN NUMBER := NULL, l28 IN NUMBER := NULL,
           u28 IN NUMBER := NULL, p28 IN BINARY_INTEGER := NULL,
           v29 IN NUMBER := NULL, l29 IN NUMBER := NULL,
           u29 IN NUMBER := NULL, p29 IN BINARY_INTEGER := NULL,
           v30 IN NUMBER := NULL, l30 IN NUMBER := NULL,
           u30 IN NUMBER := NULL, p30 IN BINARY_INTEGER := NULL,
           v31 IN NUMBER := NULL, l31 IN NUMBER := NULL,
           u31 IN NUMBER := NULL, p31 IN BINARY_INTEGER := NULL,
           v32 IN NUMBER := NULL, l32 IN NUMBER := NULL,
           u32 IN NUMBER := NULL, p32 IN BINARY_INTEGER := NULL)
    RETURN RAW IS
begin
 return  md.hhencode(v01,l01,u01,p01, v02,l02,u02,p02, v03,l03,u03,p03,
 v04,l04,u04,p04, v05,l05,u05,p05, v06,l06,u06,p06,
 v07,l07,u07,p07, v08,l08,u08,p08, v09,l09,u09,p09,
 v10,l10,u10,p10,
 v11,l11,u11,p11, v12,l12,u12,p12, v13,l13,u13,p13,
 v14,l14,u14,p14, v15,l15,u15,p15, v16,l16,u16,p16,
 v17,l17,u17,p17, v18,l18,u18,p18, v19,l19,u19,p19,
 v20,l20,u20,p20,
 v21,l21,u21,p21, v22,l22,u22,p22, v23,l23,u23,p23,
 v24,l24,u24,p24, v25,l25,u25,p25, v26,l26,u26,p26,
 v27,l27,u27,p27, v28,l28,u28,p28, v29,l29,u29,p29,
 v30,l30,u30,p30,
 v31,l31,u31,p31, v32,l32,u32,p32);
end;
/

-- ----------------------------
-- Function structure for HHENCODE_BYLEVEL
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHENCODE_BYLEVEL" (
       v01 IN NUMBER, l01 IN NUMBER, u01 IN NUMBER, p01 IN BINARY_INTEGER,
       v02 IN NUMBER:=NULL, l02 IN NUMBER:=NULL, u02 IN NUMBER:=NULL,
       p02 IN BINARY_INTEGER:=NULL,
       v03 IN NUMBER:=NULL, l03 IN NUMBER:=NULL, u03 IN NUMBER:=NULL,
       p03 IN BINARY_INTEGER:=NULL,
       v04 IN NUMBER:=NULL, l04 IN NUMBER:=NULL, u04 IN NUMBER:=NULL,
       p04 IN BINARY_INTEGER:=NULL)
    RETURN RAW IS
begin
 return md.hhencode_bylevel(v01, l01, u01, p01, v02, l02, u02, p02,
                            v03, l03, u03, p03, v04, l04, u04, p04);
end;
/

-- ----------------------------
-- Function structure for HHGBIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHGBIT" (hhc IN RAW, bit_number IN BINARY_INTEGER)
    RETURN BINARY_INTEGER IS
begin
 return md.hhgbit(hhc, bit_number);
end;
/

-- ----------------------------
-- Function structure for HHGETCID
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHGETCID" ( hhc IN RAW, lv IN BINARY_INTEGER )
    RETURN NUMBER IS
begin
 return md.hhgetcid(hhc, lv);
end;
/

-- ----------------------------
-- Function structure for HHGROUP
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHGROUP" (hhc IN RAW)
    RETURN RAW IS
begin
 return md.hhgroup(hhc);
end;
/

-- ----------------------------
-- Function structure for HHGTBIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHGTBIT" (hhc IN RAW, topology IN BINARY_INTEGER)
    RETURN VARCHAR2 IS
begin
 return md.hhgtbit(hhc, topology);
end;
/

-- ----------------------------
-- Function structure for HHGTYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHGTYPE" (hhc IN RAW)
    RETURN BINARY_INTEGER IS
begin
 return md.hhgtype(hhc);
end;
/

-- ----------------------------
-- Function structure for HHIDLPART
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHIDLPART" (type IN VARCHAR2, hhc IN RAW,
           v001 IN NUMBER,       v002 IN NUMBER,
           v003 IN NUMBER:=NULL, v004 IN NUMBER:=NULL,
           v005 IN NUMBER:=NULL, v006 IN NUMBER:=NULL,
           v007 IN NUMBER:=NULL, v008 IN NUMBER:=NULL,
           v009 IN NUMBER:=NULL, v010 IN NUMBER:=NULL,
           v011 IN NUMBER:=NULL, v012 IN NUMBER:=NULL,
           v013 IN NUMBER:=NULL, v014 IN NUMBER:=NULL)
    RETURN VARCHAR2 IS
begin
 return md.hhidlpart(type,hhc,
    v001,v002,v003,v004,v005,v006,v007,v008,v009,v010,v011,v012,v013,v014);
end;
/

-- ----------------------------
-- Function structure for HHIDPART
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHIDPART" (type IN VARCHAR2,hhc IN RAW,
           v001 IN NUMBER,       v002 IN NUMBER,
           v003 IN NUMBER:=NULL, v004 IN NUMBER:=NULL,
           v005 IN NUMBER:=NULL, v006 IN NUMBER:=NULL,
           v007 IN NUMBER:=NULL, v008 IN NUMBER:=NULL,
           v009 IN NUMBER:=NULL, v010 IN NUMBER:=NULL,
           v011 IN NUMBER:=NULL, v012 IN NUMBER:=NULL,
           v013 IN NUMBER:=NULL, v014 IN NUMBER:=NULL)
    RETURN VARCHAR2 IS
begin
  return md.hhidpart(type,hhc,
    v001,v002,v003,v004,v005,v006,v007,v008,v009,v010,v011,v012,v013,v014);
end;
/

-- ----------------------------
-- Function structure for HHINCRLEV
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHINCRLEV" (hhc IN RAW, lv IN BINARY_INTEGER)
    RETURN RAW IS
begin
 return md.hhincrlev(hhc, lv);
end;
/

-- ----------------------------
-- Function structure for HHJLDATE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHJLDATE" (ds IN VARCHAR2, fmt IN VARCHAR2)
    RETURN NUMBER IS
begin
 return md.hhjldate(ds,fmt);
end;
/

-- ----------------------------
-- Function structure for HHLENGTH
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHLENGTH" (hhc IN RAW, dim IN BINARY_INTEGER := NULL)
    RETURN BINARY_INTEGER IS
begin
 if dim is NULL then
   return md.hhlength(hhc);
 end if;
 return md.hhlength(hhc,dim);
end;
/

-- ----------------------------
-- Function structure for HHLEVELS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHLEVELS" (lb IN NUMBER, ub IN NUMBER, pr IN BINARY_INTEGER)
    RETURN BINARY_INTEGER IS
begin
 return md.hhlevels(lb,ub,pr);
end;
/

-- ----------------------------
-- Function structure for HHMATCH
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHMATCH" (hh1 IN RAW, hh2 IN RAW)
    RETURN BINARY_INTEGER IS
begin
  return md.hhmatch(hh1,hh2);
end;
/

-- ----------------------------
-- Function structure for HHMAXCODE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHMAXCODE"(hhc IN RAW, maxlen IN NUMBER)
    RETURN RAW IS
begin
 return md.hhmaxcode(hhc, maxlen);
end;
/

-- ----------------------------
-- Function structure for HHNCOMPARE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHNCOMPARE" (hh1 IN RAW, hh2 IN RAW, lv IN BINARY_INTEGER)
    RETURN BINARY_INTEGER IS
begin
 return md.hhncompare(hh1,hh2,lv);
end;
/

-- ----------------------------
-- Function structure for HHNDIM
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHNDIM" (hhc IN RAW) RETURN BINARY_INTEGER IS
begin
  return md.hhndim(hhc);
end;
/

-- ----------------------------
-- Function structure for HHOR
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHOR" ( hh1 IN RAW, hh2 IN RAW )
    RETURN RAW IS
begin
 return md.hhor(hh1, hh2);
end;
/

-- ----------------------------
-- Function structure for HHORDER
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHORDER" (hhc IN RAW)
    RETURN RAW IS
begin
 return md.hhorder(hhc);
end;
/

-- ----------------------------
-- Function structure for HHPRECISION
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHPRECISION" (lb IN NUMBER, ub IN NUMBER, lv IN BINARY_INTEGER)
    RETURN BINARY_INTEGER IS
begin
  return md.hhprecision(lb,ub,lv);
end;
/

-- ----------------------------
-- Function structure for HHSBIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHSBIT" (hhc IN RAW, bit_number IN BINARY_INTEGER)
    RETURN RAW IS
begin
 return md.hhsbit(hhc, bit_number);
end;
/

-- ----------------------------
-- Function structure for HHSETCID
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHSETCID" ( hhc IN RAW, lv IN BINARY_INTEGER, cid IN NUMBER )
    RETURN RAW IS
begin
 return md.hhsetcid(hhc, lv, cid);
end;
/

-- ----------------------------
-- Function structure for HHSTBIT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHSTBIT" (hhc IN RAW, topology IN BINARY_INTEGER, type IN VARCHAR2)
    RETURN RAW IS
begin
 return md.hhstbit(hhc, topology,type);
end;
/

-- ----------------------------
-- Function structure for HHSTYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHSTYPE" (hhc IN RAW, type_id IN BINARY_INTEGER)
    RETURN RAW IS
begin
 return md.hhstype(hhc, type_id);
end;
/

-- ----------------------------
-- Function structure for HHSUBDIVIDE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHSUBDIVIDE" (hh1 IN RAW, cid IN BINARY_INTEGER)
    RETURN RAW IS
begin
 return md.hhsubdivide(hh1, cid);
end;
/

-- ----------------------------
-- Function structure for HHSUBSTR
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHSUBSTR" (hhc IN RAW, slv IN BINARY_INTEGER, elv IN BINARY_INTEGER)
    RETURN RAW IS
begin
  return md.hhsubstr(hhc, slv, elv);
end;
/

-- ----------------------------
-- Function structure for HHXOR
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."HHXOR" ( hh1 IN RAW, hh2 IN RAW )
    RETURN RAW IS
begin
 return md.hhxor(hh1, hh2);
end;
/

-- ----------------------------
-- Function structure for OGC_AREA
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_AREA"(
  s ST_Geometry)
    RETURN NUMBER DETERMINISTIC IS
BEGIN
  IF(UPPER(OGC_GeometryType(s)) IN ('POLYGON', 'ST_POLYGON')) THEN
    RETURN TREAT(s AS ST_Surface).ST_Area();
  END IF;
  IF(UPPER(OGC_GeometryType(s)) IN ('MULTIPOLYGON', 'ST_MULTIPOLYGON')) THEN
    RETURN TREAT(s AS ST_MultiSurface).ST_Area();
  END IF;
  RETURN NULL;
END OGC_Area;
/

-- ----------------------------
-- Function structure for OGC_ASBINARY
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ASBINARY"(
  g ST_Geometry)
    RETURN BLOB IS
BEGIN
  RETURN g.GET_WKB();
END OGC_AsBinary;
/

-- ----------------------------
-- Function structure for OGC_ASTEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ASTEXT"(
  g ST_Geometry)
    RETURN VARCHAR2 IS
BEGIN
  RETURN g.GET_WKT();
END OGC_AsText;
/

-- ----------------------------
-- Function structure for OGC_BOUNDARY
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_BOUNDARY"(
  g ST_Geometry)
    RETURN ST_Geometry IS
BEGIN
  RETURN g.ST_Boundary();
END OGC_Boundary;
/

-- ----------------------------
-- Function structure for OGC_BUFFER
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_BUFFER"(
  g ST_Geometry,
  d NUMBER)
    RETURN ST_Geometry DETERMINISTIC IS
BEGIN
  RETURN g.ST_Buffer(d);
END OGC_Buffer;
/

-- ----------------------------
-- Function structure for OGC_CENTROID
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_CENTROID"(
  g ST_Geometry)
    RETURN ST_Geometry IS
BEGIN
  RETURN g.ST_Centroid();
END OGC_Centroid;
/

-- ----------------------------
-- Function structure for OGC_CONTAINS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_CONTAINS"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer IS
BEGIN
  RETURN g1.ST_Contains(g2);
END OGC_Contains;
/

-- ----------------------------
-- Function structure for OGC_CONVEXHULL
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_CONVEXHULL"(
  g ST_Geometry)
    RETURN ST_Geometry IS
BEGIN
  RETURN g.ST_ConvexHull();
END OGC_ConvexHull;
/

-- ----------------------------
-- Function structure for OGC_CROSS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_CROSS"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer DETERMINISTIC IS
BEGIN
  RETURN g1.ST_Cross(g2);
END OGC_Cross;
/

-- ----------------------------
-- Function structure for OGC_DIFFERENCE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_DIFFERENCE"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN ST_Geometry IS
BEGIN
  RETURN g1.ST_Difference(g2);
END OGC_Difference;
/

-- ----------------------------
-- Function structure for OGC_DIMENSION
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_DIMENSION"(
  g ST_Geometry)
    RETURN Integer IS
BEGIN
  RETURN g.ST_CoordDim();
END OGC_Dimension;
/

-- ----------------------------
-- Function structure for OGC_DISJOINT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_DISJOINT"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer IS
BEGIN
  RETURN g1.ST_Disjoint(g2);
END OGC_Disjoint;
/

-- ----------------------------
-- Function structure for OGC_DISTANCE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_DISTANCE"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN NUMBER DETERMINISTIC IS
BEGIN
  RETURN g1.ST_Distance(g2);
END OGC_Distance;
/

-- ----------------------------
-- Function structure for OGC_ENDPOINT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ENDPOINT"(
  c ST_Curve)
    RETURN ST_Point IS
BEGIN
  RETURN c.ST_EndPoint();
END OGC_EndPoint;
/

-- ----------------------------
-- Function structure for OGC_ENVELOPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ENVELOPE"(
  g ST_Geometry)
    RETURN ST_Geometry IS
BEGIN
  RETURN g.ST_Envelope();
END OGC_Envelope;
/

-- ----------------------------
-- Function structure for OGC_EQUALS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_EQUALS"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer DETERMINISTIC IS
BEGIN
  RETURN g1.ST_Equals(g2);
END OGC_Equals;
/

-- ----------------------------
-- Function structure for OGC_EXTERIORRING
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_EXTERIORRING"(
  p ST_Polygon)
    RETURN ST_LineString IS
BEGIN
  RETURN p.ST_ExteriorRing();
END OGC_ExteriorRing;
/

-- ----------------------------
-- Function structure for OGC_GEOMETRYN
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_GEOMETRYN"(
  g ST_GeomCollection,
  n Integer)
    RETURN ST_Geometry IS
  arr ST_GEOMETRY_ARRAY;
BEGIN
  arr := g.ST_Geometries();
  RETURN arr(n);
END OGC_GeometryN;
/

-- ----------------------------
-- Function structure for OGC_GEOMETRYTYPE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_GEOMETRYTYPE"(
  g ST_Geometry)
    RETURN VARCHAR2 IS
BEGIN
  RETURN g.ST_GeometryType();
END OGC_GeometryType;
/

-- ----------------------------
-- Function structure for OGC_INTERIORRINGN
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_INTERIORRINGN"(
  p ST_Polygon,
  n Integer)
    RETURN ST_LineString IS
  arr ST_LineString_Array;
BEGIN
  arr := p.ST_InteriorRingsP();
  RETURN arr(n);
END OGC_InteriorRingN;
/

-- ----------------------------
-- Function structure for OGC_INTERSECTION
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_INTERSECTION"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN ST_Geometry IS
BEGIN
  RETURN g1.ST_Intersection(g2);
END OGC_Intersection;
/

-- ----------------------------
-- Function structure for OGC_INTERSECTS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_INTERSECTS"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer DETERMINISTIC IS
BEGIN
  RETURN g1.ST_Intersects(g2);
END OGC_Intersects;
/

-- ----------------------------
-- Function structure for OGC_ISCLOSED
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ISCLOSED"(
  g ST_Geometry)
    RETURN Integer DETERMINISTIC IS
BEGIN
  IF(UPPER(OGC_GeometryType(g)) IN ('LINESTRING', 'ST_LINESTRING', 'ST_CIRCULARSTRING', 'ST_COMPOUNDCURVE')) THEN
    RETURN TREAT(g AS ST_Curve).ST_IsClosed();
  END IF;
  IF(UPPER(OGC_GeometryType(g)) IN ('MULTILINESTRING', 'ST_MULTILINESTRING', 'ST_MULTICURVE')) THEN
    RETURN TREAT(g AS ST_MultiCurve).ST_IsClosed();
  END IF;
  RETURN NULL;
END OGC_IsClosed;
/

-- ----------------------------
-- Function structure for OGC_ISEMPTY
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ISEMPTY"(
  g ST_Geometry)
    RETURN Integer IS
BEGIN
  RETURN g.ST_IsEmpty();
END OGC_IsEmpty;
/

-- ----------------------------
-- Function structure for OGC_ISRING
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ISRING"(
  c ST_Curve)
    RETURN Integer DETERMINISTIC IS
BEGIN
  RETURN c.ST_IsRing();
END OGC_IsRing;
/

-- ----------------------------
-- Function structure for OGC_ISSIMPLE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_ISSIMPLE"(
  g ST_Geometry)
    RETURN Integer DETERMINISTIC IS
BEGIN
  RETURN g.ST_IsSimple();
END OGC_IsSimple;
/

-- ----------------------------
-- Function structure for OGC_LENGTH
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_LENGTH"(
  g ST_Geometry) RETURN NUMBER DETERMINISTIC IS
BEGIN
  IF(UPPER(OGC_GeometryType(g)) IN ('LINESTRING', 'ST_CIRCULARSTRING', 'ST_COMPOUNDCURVE', 'ST_LINESTRING')) THEN
    RETURN TREAT(g AS ST_Curve).ST_Length();
  END IF;
  IF(UPPER(OGC_GeometryType(g)) IN ('MULTILINESTRING', 'ST_MULTILINESTRING')) THEN
    RETURN TREAT(g AS ST_MultiCurve).ST_Length();
  END IF;
  RETURN NULL;
END OGC_Length;
/

-- ----------------------------
-- Function structure for OGC_LINESTRINGFROMTEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_LINESTRINGFROMTEXT"(
  wkt   IN VARCHAR2,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_LineString IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKT(wkt, srid) AS ST_LineString);
END OGC_LineStringFromText;
/

-- ----------------------------
-- Function structure for OGC_LINESTRINGFROMWKB
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_LINESTRINGFROMWKB"(
  wkb   IN BLOB,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_LineString IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKB(wkb, srid) AS ST_LineString);
END OGC_LineStringFromWKB;
/

-- ----------------------------
-- Function structure for OGC_MULTILINESTRINGFROMTEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_MULTILINESTRINGFROMTEXT"(
  wkt   IN VARCHAR2,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_MultiLineString IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKT(wkt, srid) AS ST_MultiLineString);
END OGC_MultiLineStringFromText;
/

-- ----------------------------
-- Function structure for OGC_MULTILINESTRINGFROMWKB
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_MULTILINESTRINGFROMWKB"(
  wkb   IN BLOB,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_MultiLineString IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKB(wkb, srid) AS ST_MultiLineString);
END OGC_MultiLineStringFromWKB;
/

-- ----------------------------
-- Function structure for OGC_MULTIPOLYGONFROMTEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_MULTIPOLYGONFROMTEXT"(
  wkt   IN VARCHAR2,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_MULTIPOLYGON IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKT(wkt, srid) AS ST_MULTIPOLYGON);
END OGC_MultiPolygonFromText;
/

-- ----------------------------
-- Function structure for OGC_MULTIPOLYGONFROMWKB
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_MULTIPOLYGONFROMWKB"(
  wkb   IN BLOB,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_MULTIPOLYGON IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKB(wkb, srid) AS ST_MULTIPOLYGON);
END OGC_MultiPolygonFromWKB;
/

-- ----------------------------
-- Function structure for OGC_NUMGEOMETRIES
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_NUMGEOMETRIES"(
  g ST_GeomCollection)
    RETURN Integer IS
BEGIN
  RETURN g.ST_Geometries().LAST;
END OGC_NumGeometries;
/

-- ----------------------------
-- Function structure for OGC_NUMINTERIORRINGS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_NUMINTERIORRINGS"(
  p ST_Polygon)
    RETURN Integer IS
BEGIN
  RETURN p.ST_InteriorRingsP().LAST;
END OGC_NumInteriorRings;
/

-- ----------------------------
-- Function structure for OGC_NUMPOINTS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_NUMPOINTS"(
  c ST_Curve)
    RETURN Integer IS
BEGIN
  RETURN c.ST_NumPoints();
END OGC_NumPoints;
/

-- ----------------------------
-- Function structure for OGC_OVERLAP
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_OVERLAP"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer IS
BEGIN
  RETURN g1.ST_Overlap(g2);
END OGC_Overlap;
/

-- ----------------------------
-- Function structure for OGC_POINTFROMTEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_POINTFROMTEXT"(
  wkt   IN VARCHAR2,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_Point IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKT(wkt, srid) AS ST_Point);
END OGC_PointFromText;
/

-- ----------------------------
-- Function structure for OGC_POINTFROMWKB
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_POINTFROMWKB"(
  wkb   IN BLOB,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_Point IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKB(wkb, srid) AS ST_Point);
END OGC_PointFromWKB;
/

-- ----------------------------
-- Function structure for OGC_POINTN
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_POINTN"(
  c ST_Curve,
  n Integer)
    RETURN ST_Point IS
BEGIN
  RETURN c.ST_PointN(n);
END OGC_PointN;
/

-- ----------------------------
-- Function structure for OGC_POINTONSURFACE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_POINTONSURFACE"(
  s ST_Geometry)
    RETURN ST_Point DETERMINISTIC IS
BEGIN
  IF(UPPER(OGC_GeometryType(s)) IN ('POLYGON')) THEN
    RETURN TREAT(s AS ST_Surface).ST_PointOnSurface();
  END IF;
  IF(UPPER(OGC_GeometryType(s)) IN ('MULTIPOLYGON')) THEN
    RETURN TREAT(s AS ST_MultiSurface).ST_PointOnSurface();
  END IF;
  RETURN NULL;
END OGC_PointOnSurface;
/

-- ----------------------------
-- Function structure for OGC_POLYGONFROMTEXT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_POLYGONFROMTEXT"(
  wkt   IN VARCHAR2,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_POLYGON IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKT(wkt, srid) AS ST_POLYGON);
END OGC_PolygonFromText;
/

-- ----------------------------
-- Function structure for OGC_POLYGONFROMWKB
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_POLYGONFROMWKB"(
  wkb   IN BLOB,
  srid  IN INTEGER DEFAULT NULL)
    RETURN ST_POLYGON IS
BEGIN
  RETURN TREAT(ST_GEOMETRY.FROM_WKB(wkb, srid) AS ST_POLYGON);
END OGC_PolygonFromWKB;
/

-- ----------------------------
-- Function structure for OGC_RELATE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_RELATE"(
  g1            ST_Geometry,
  g2            ST_Geometry,
  PatternMatrix VARCHAR2)
    RETURN Integer DETERMINISTIC IS
BEGIN
  RETURN g1.ST_Relate(g2, PatternMatrix);
END OGC_Relate;
/

-- ----------------------------
-- Function structure for OGC_SRID
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_SRID"(
  g ST_Geometry)
    RETURN Integer IS
BEGIN
  RETURN g.ST_SRID();
END OGC_SRID;
/

-- ----------------------------
-- Function structure for OGC_STARTPOINT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_STARTPOINT"(
  c ST_Curve)
    RETURN ST_Point IS
BEGIN
  RETURN c.ST_StartPoint();
END OGC_StartPoint;
/

-- ----------------------------
-- Function structure for OGC_SYMMETRICDIFFERENCE
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_SYMMETRICDIFFERENCE"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN ST_Geometry DETERMINISTIC IS
BEGIN
  RETURN g1.ST_SymmetricDifference(g2);
END OGC_SymmetricDifference;
/

-- ----------------------------
-- Function structure for OGC_TOUCH
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_TOUCH"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer IS
  result VARCHAR2(128);
BEGIN
  RETURN g1.ST_Touch(g2);
END OGC_Touch;
/

-- ----------------------------
-- Function structure for OGC_UNION
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_UNION"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN ST_Geometry IS
BEGIN
  RETURN g1.ST_Union(g2);
END OGC_Union;
/

-- ----------------------------
-- Function structure for OGC_WITHIN
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_WITHIN"(
  g1 ST_Geometry,
  g2 ST_Geometry)
    RETURN Integer IS
BEGIN
  RETURN g1.ST_Within(g2);
END OGC_Within;
/

-- ----------------------------
-- Function structure for OGC_X
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_X"(
  p ST_Point)
    RETURN NUMBER IS
BEGIN
  RETURN p.ST_X();
END OGC_X;
/

-- ----------------------------
-- Function structure for OGC_Y
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."OGC_Y"(
  p ST_Point)
    RETURN NUMBER IS
BEGIN
  RETURN p.ST_Y();
END OGC_Y;
/

-- ----------------------------
-- Function structure for QRY2OPT
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."QRY2OPT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
e28 5e8
/wTuxmZnXr+G8N/L6DgCbbk84BQwg+3qzCAF3y8ZA6pEDzkM4x6tuYffxB0RCHa2yFpYGoPO
oYUrHZlpFDuGa82dmqTpoaALxst8R3zg9DTaGRD+VaQDTcOLGiuKHjPG0gjZ0frFaoqDPDlv
zhENiH/GwQ3Xp2m4MzcTfvrX9ds5ijEHXY6WyvHx8nEa8sBb5Vj/KJxKFvybaREBPHgOmckC
4in7bpPQShGnaKUVnxhZ3azqvgvll0532f24jcyRhVo3r0OPnEJDpwl8osapwDIBr86BCafI
DETgUOxyx4X2aRr603G4JYQuL3KxXwoylzklUVNf5OwMlddFp5evsnWIucmX7UsMUPd5g3nW
oRncXoMDWJh5Kpk33qS2xU37xCrhA3dRvEFaIAL+HMhub1jSwAliIb19m75n3meg+NU6z6pc
N5PE4Q4ierYODZqaxmT6kdvsZHIdPmbOM2nzscDeVV8WN6JrgjMzauzG3VLqRB3lxYuyJ+bV
V0o+rSFYlVneXwRbBhpXGFcW4R8om2eSCb8SBxPHU/cn3QZaZloVCea74Ie07LpdE/26k4mt
d589jqElsREjX4p+JK3BVrNq9s3YxUHZAjazEycMzm4mOHEKavP9I+LLchHzNaPCUB/6JS+t
rGSMpZOm+NyBUcScda39mzXA9PqhMNz9Bp0aVRHFHtS+/1fmUGnSdxcokEEa+xpXb2kK8toR
4b1GgZS0LZyJ5b4yGyl08AQzaHZ38LozbSkT3sccn/AW/XmdWoM2TwcDMu/dm+YOAFb1dGib
R5RoAdkKc7ImwjTTj5mS/An2kPHRE1NLBelSMhDRWKA/YVXVIbyCLstjwDvZNZyXRA7BP2lw
E7NM0E86LpGgCyycj0n6cvKYAuKJpSvjtQuukj9odvrSfzzx5qVXV6gfPyeziYmn7q3wmEfu
s/u+UHEI4+uGY5aiKCPmhL0gOXry6NFSSAxWzxfFBDOdOKfQFUsc86e0gv3phWLkckhGhmo6
8sqiLvKDOqkcccT0Z9KsD7v5486RClYd9v5wVjYEgt9xo02ZzIZt38MUXR3eIs+Dz8SYmM1I
VyPHc5+SHiD362pktX5hJLSfTnkSnQVL15/4UwH+KF3Sw5xIdf8zNIGWP5IN1m2onBRVaeTF
0eioZ1EU/XRFqARz0qm2XwCgQcT69WU1SOtoSKj9oBhkNUNlcW8TVQ+qLK9D4JHLS965ugSI
OiT/S6BxxO+ErBPEphPP/kHDJTMRD/qQ/Y58k/KRI8IYgwXvgpIL1WitxIDSV0Kx99s/pq/M
QjKkgFo/1wYh1G1zx8eUvUIn0QAwKxixXK/Ps27nho5swnG6WjMRpQ+c1D6eNMIhM7h+0bWC
cqp04fL8Y0wGLf7FTJm5MM0Tu0OgAc7B5+rQVRhBvGjNubsigiyGiymcVVVPT3iuiuvvEjBo
Ldf++LBVfFH0JJYjefkSWJUi9vXrtBAXriay51+pd4qwqvvgXQBm
/

-- ----------------------------
-- Function structure for RTREEJOINFUNC
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."RTREEJOINFUNC" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
199 144
RCSOpq+cFpgF0Z9BMxahatCrSQQwg/DIf64df3QCk2SdFQv3xRRIAZtsvAbxx2bGPmiJ+zJ9
CRQ2tU9xBwlvw648+ORB2HhvUtTMZ50iKAdVxgghP08Z6kyxr2X26o6bbgoltDx2Msc43c5T
Swd9pAMwIwuIhiwZtdkLZkQ+62dFNw9CFeTgx2a0jEUXd/mXBgM9boX72UTWsPMMS2+UFT15
Er4bbHLL8Eh/BMtzskoSVGLuK8PK+FQqvMJykS4uTQThAvKshMpUeK/OaLsJXXwdl88zSdyO
VIWE+la6aV5RTJEmemMnrr8knmE4NQ==
/

-- ----------------------------
-- Function structure for SDO_AGGR_CENTROID
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_CENTROID" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
b5 aa
z+5VVM8NN7BRQZfS8T5Pqb5Pfk0wg8eZgcfLCNL+XuefCNC/Wa6WGL/c19U+l3JZs7j1vyjA
Mr90UjK/gf4ysr0Yw48Jyh/ORTaAOR77zaaIq9OIj+W9IdWFKhQhhSioH9BL50jE5hFLsE+Y
4eO7ivwf0127KeDXpqYfY8VM
/

-- ----------------------------
-- Function structure for SDO_AGGR_CONCAT_LINES
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_CONCAT_LINES" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
75 9e
+jWKoIAFaJfWNyvZs8Dm2rmP67Ywg8eZgcfLCNL+XuefCNC/Wa6WGL//cgzcVvT++kcMYjy4
v4H+MrK9GMOlMr1KdDwdPqy93sA+Fja+QEY5Ojj3w4/A9b8owDK/dFJc57Iz0sfqpgiQc3Nu
pITYiKatV6i5
/

-- ----------------------------
-- Function structure for SDO_AGGR_CONVEXHULL
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_CONVEXHULL" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
b6 b2
634JY53wuXqZokpoKqunVsONbQAwg8eZgcfLCNL+XuefCNC/Wa6WGL//ctUMO6UW1/qzuPW/
KMAyv3RSMr+B/jKyvRjDjwnKmc5FNoA5Hvs7plgE04iP5b0hFoUqFCGFKKgf0EtESC3mEUuw
T5jh47uKux+Lq+7z/IYL16ama/LVEA==
/

-- ----------------------------
-- Function structure for SDO_AGGR_LRS_CONCAT
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_LRS_CONCAT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
a0 ae
SlJs1QTKW8lBbWIMVCbJR4O4yuUwg8eZgcfLCNL+XuefCNC/Wa6WGP69nkq//3IM3FazuPW/
KMAyv3RSMr+B/jKyvRjDjwnKNs9MrO/WganoNyEHojlTJ+GBNr5ARjk6qF0G8zkVzWnnsjPS
x+qmCDfcuDP+x590LcmmpmrPFhw=
/

-- ----------------------------
-- Function structure for SDO_AGGR_LRS_CONCAT_3D
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_LRS_CONCAT_3D" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
b3 b6
CcrtweszyHM/DTqIyUadVln3f9swg8eZgcfLCNL+XuefCNC/Wa6WGP69nkq//3IM3Fb0eJ+z
uPW/KMAyv3RSMr+B/jKyvRjDjwnKss5FNoA5HvvwW4iU04iP5b0hqIUqFCGFKKgf0HwcSIzm
EUuwT5jh4yj1twOdTwML4y1tKh2mrqnV1Q==
/

-- ----------------------------
-- Function structure for SDO_AGGR_MBR
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_MBR" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
65 8d
0U3HMSZDAsKxzMGsc3qZfsXqZ1Mwg8eZgcfLCNL+XuefCNC/Wa6WGP4yniW4v4H+XKUyvUp0
PB301lPiqDX37HGenjXiqGs1P1QUlFN2VVXWcVWkhHGU5tYAc2iUZ88O3jx0phXKduE=
/

-- ----------------------------
-- Function structure for SDO_AGGR_SET_UNION
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_SET_UNION" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
e05 50d
7Rk2W1TNV4dafJrFx0V4jPseJ/wwgw3qBUqDfC/Nx7zgGVo2bVq05VVgO9vTt6OXRK1rrLBN
H5+YKETenPmqxpxXYb2ToyZa4zBlnIIX1AsDg47Z7KdEw6ExVhwsTxMnqiffB7CGr66hWLfs
zcqu5UwqQ6s7TZN8YbQuDtGCFt86ADg3W91a7Tjp0HsUGhtWsEQ7J0U2o0LkLufo3FaRzNDY
gEbullEYAOx+Na/TbVCj6VUYkTrCTYGbmTg8wJNIisSI1955ksJEvdevqQLZb7PAauzADeVa
sEfpFO++1Z1JPmJ6aa8kz0aTXwrf3+JqMc34xLtIzEXFiKVx3vuoWbBQm3yNYZOT4i3F9URF
iSLlW+Fx+tOjVicJOCp8n6dEaaobBAQkTH6BIUDnavv6xcChOMqsRu92jr0V9JQWAfihF7E1
UHfg58+8vb6yyGIyVbQjFga7MAbOERviFjUzX3pcnSd9OA52uMGs0gHq4T3VJ0TBivZWGP6q
qIeAw64YMHxRCrB/R9fx0lSHXPcixsFAUa7eLcUS8jHzuTdoPX3ZaI0/IRNV3FmnAnIYs5Fm
53XjdPDQlAlIqCR1qVjm1UOUtsyQNvphYHC8FGor/PHM8mUIqUndv0v7quzxRQXUUXVrBCM3
64c/FLfyHlXscJw4l2CM+q9AP7Iys8zCn5IN2aNX+3ipcNdDDMxh0d7MeHaviNEudMIgEw88
X+GTHIGMb9TL+wvlJnnuyypsvCcKdIGQtNUBzbmcPFIw3+GWM+LLMWDX2UbV77FO3VgoYiTc
mueBLbcn3ccq54j+jikGF6YN52/bO3gArLWrbv4Pj32h2G/g06UpfXDNhJJ7By/UhMtRh1tq
306oE0gzD3jtlr+RIVD3/wTf2sIXiVLaWE03v90mUCj/8gaTRClttrwcoll1KSsjHv7TTB4B
sHwypNLQXwVehSdPHkpnff264n2XC7N+kvtwzH59NKtCHLpZiOmNwavE/OKQTiETwN5e4r26
pdnt0IB1evK4lwIDMTagyieuZQDxkPN1SUYtPrpQGCFCJY9RkfkWrmC2BDgh5L69we5VVTFr
ISWqFI/4sWruMKwgEs5zwrX7KMYXV3PPIzecc71KKMi50J0zsMGwc9laMztFnAjmEx9lKM6x
+/YPpXtd1FX/rSc6qlttfPi71pZ/FtczSnAHvt77Xz1Wipj0x/YmpKu6ce3zLl1IKFYyHldQ
bOqcMf8lmzsQddv0tcDel6t+T8lepctpYJKbJfEYnQgTJL0Kx7o=
/

-- ----------------------------
-- Function structure for SDO_AGGR_UNION
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_AGGR_UNION" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
75 9e
r6JsRRjeDhfQtnfjlyXR9p7SbRowg8eZgcfLCNL+XuefCNC/Wa6WGCjX2Udy67j1vyjAMr90
UjK/gf4ysr0Yw6UyvUp0PB3FHaECojlTJ8A+Fja+QEY5OqhdBu6Xvo8bFkY5EpK+1anOaz9n
CtiIppvGqCo=
/

-- ----------------------------
-- Function structure for SDO_CONSTRUCT_DIM_ARRAY
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."SDO_CONSTRUCT_DIM_ARRAY" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
36b 20f
Xp5SO+p/GsNEXT2+F5pIFNSos4Qwg43xryCsfI7UvzNkMHjKUjZon4hFNinrKms73tnosNR9
AQfXolU4tXODGONap1+4jw0sD5r+EpBcNFDDuFd+v8kD+Ht2/poTjDE/z+yBP535vb6oiftD
Mz1XgK02YvLqThguzGAd9EXxdgTM1ZTVZm4ZXQmL1Q4nprg+EhSTYt3TiPU2SLK+n9OewbC5
FWJl4Baq2QzyX3m9Af+Z0qtxb1O4a3vFufEhrgwqdQZuwL//dPzdCwQ3yLjFh49/4XMY3OHK
x+VLHh5K5tzYhCv4V1mGvRRSm7GdLsF51t+JwaEkp3zKlAsKcOf+3m5weyOr5k44TIyKGHPw
8A/LZFx/0Q3N7kbdINdWHfzokNQI9Ok+2xWAvnVQhTFPEtpbUuYsY7zKO1h4fc25mOnHghpA
H+8WAYomiNXCAsg43ePwpLQUInOE8RS8MasgPIYjvsq1oNzrh/Y4eRr8Rz05A76kj+a4YwFc
fTwunfhExMcFCQ==
/

-- ----------------------------
-- Function structure for SDO_JOIN
-- ----------------------------
CREATE OR REPLACE Function "MDSYS"."SDO_JOIN" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
3cbb 110f
9j9XHuCsZFsEeHSFVNbumyzmU/kwg0P99seDWpu8FWR1g+XVolEvBEkxBVd+jXTWO7Jaoqvx
zrcYtF0V4rKtypwuXD/kgTQX0qY4+DMzuZuv8+sAAABzQTwRIW05IV/vicuGipyBwAJ6q27w
oW9EtiWEINaRuPMUtIDWMHoTojruG8X4FxaPwJ7OLwLeyDa3wwtrqIhEA3/ps356M8wDsy9U
vaGhm6eRnds4iZX6yBSpf63WtXdG4mTIrV7tdBbryLvOplJK0CjuxDe1RlCT02v6fO1Z2llK
oeTRduhGZqY5giPzy7NwpxQUUTF0BECz3ldshnxmhI7o423KY7YYqyeyu5P+sB/NXrKvb+e/
T3MurE1pBzftMEiEuD7bTbEWwnRfUr0EiXVDHwCvQo+HFhmZVgLo1pllvSMSZ2N86JgAtzNW
XP85jOqVEBirWXMIuC8VZHyrr0+Jq3wZHSi+UPJ9nmc+FD8fXErq8RWNpnE1CsB6KGnUtzdj
77yxVqjvzvfU9GFWBKu4wSWHZbIVXaCv7o9gq0FObEAChzPZQADuDWgfbBI1lgzeCfx8OKnV
OB+gsRFG82zBFMzvV3jxyDjUpfI5LdpXdIDvBDJbSS/omwsL0yqrZif0NzDylrA2iFaoAN+n
Rmp02BduCA8ve1PEUTAaej1qcoMOs6hC0P/Rs4h9375HcclqOJbW3psxyOtwNFt2UWCMX/zK
UQ7SZYV8AkvJICg5wvXyOafLQQppeG3m7IuOGje3yhBMRJmMxBRriIRSbwPTHcLGSQt7pBe3
0jL8DrAhDgN3Q5zc3omZZkeOWK+INjQoqHqiqHqiqE+YdQRZuCJCr7O6CpZ4eGL24SLgFePp
N3R+876snozeyeC86FAerGuUf7g+1BZ2vLsmR9FOglaaKmlxvWM+AdhOqgHc1Z4Ch8v5NNWv
Nl8IeXw5hMnoN4X4+1hlQoX6obgivUcWygd3x8HOfaG7Nr8S7HDmtuZl7jAqKZNeNr62L7IT
j8iRSLeir85X5SenFHTLr01B90580zfvdqiup14vfDBuotKsosKl8bM5FBnajYSXs1PwNrNs
D2YEad7FkW7xFZFWOPPDIe+IwolIplYciNxeuwU+oqYHAjPuMRTXrI4YFINCgh1sX+bn4in9
OIef3qMr4nYMNpgBjlnEQsCePltALZ6XFXsMPGyzE5NZr4zmG5gtd6lx0PaApxCRWTmObud9
tAUeOk093i1U3AunZlAW9EkR55itPaMBaiSM4ozcA5QhE9yhBmMDA2bedTpTsUjvY1L6AnX3
WdY487W9asFofRjVxvEBHxgc4+C1dhPuEW7JrB0SCGH2VMahkHvoCRLsBt/qEKdHWWr6jlQ9
YQHXaLCHX7uMhzSu7V/Sf/yNzkKBrHikOxkGdhPuZYHgz6qBBtrlH8EoHQ09bTLt2XfDV+rC
Fv1e1SVmbJmHW3dU1NO36VNVPOY7lqhhGtULXcBKHsBK0F12mk/HbsFoFCheZKZi7oefB+Fo
2fYN8JaI0uoQpRYFY2iexn93hJgN6jTZHJBjgc8HWNbTlow4vvzuLty3xCHWq9jvb4Vg88or
fi75SZ57p4FPncgzXRT5q6sVv3cvvANApRAqRpmr0zfOFpTuo8UVgOXnnOXnu8zzwJvrfFne
BK8d2qNOhgs5F8/xzgZW+rEv94fSH889WBHfMNsoj8gR6MKLOcD4I7vRWubYnp6BXAa/COGP
s4Mf/MFWxONiEcBI+7pjJy0M/36QS2yfbJEEJyyt2OpcawQKnbdnk8uneXX4no4sbGlxrkEE
Js/GdTvVaYqfdScMdxrqTgeA5xwym5T3jlPtgNHqCh8mbJ4lRzbgJ9sUFN4p4/rj/cu2B2Pi
vGWyQydIGuLzGJcMoxfWzn2y5eUefbIGGLIGJXzqvxIC8f+J/TTkPncELkbFunaKphijO2+S
+UwrrqXdP8T13tmDi3QuGClOzwO6uaceXGHsmtFGkYt4eDHAMpDetG9/GC6zwQcXqKhnk+RB
O53ib/0vldkc5k49KpdrnhTc/bhLZ39tP4cgOh38wYtCRPkhxcGzlcl2u4ssnnaYlqGOhqlC
A1B6kOe8x6ym3YJ13V3qz4YlBoI2iO21wU1521kZt69frJQuG5EEOaXbRJZmBF5fG3sMan1x
V8iX07xfgbxQa2RRoGbR/WHm8MKA/9fxlQAod7JZmdCOg/6NoVqqVuc5vdjxP5ic/bd3XINw
Jd4htJEB9SdEDbkoz7RXvG4I1qnCyBDcBr1r+mME7qT2asA3zAXlEHeBmD9yB6wMIC3kgVTw
7NYf+UBS2TRws1eG1+AczETTum9vSJBRnsaDh2QD10gDVJFPb9mdqoNr0BOBYnjDOfNIUpi0
12TBmDoiCyq0l9ESTX6wFRuyYWEX7r8y6BFeIiYXhR93xXwapAxqsgyy6jQPBjWXdlF6iZnq
TXkq/1C1jdecwvpF/0omA/tdbQ3+o4tPdyENkH8D2PYR4hBc/SvVnC6Q9Rj+sF7PypAGJCGQ
GSQTiz1p1SZv9b+daKPdeVzouvcgEygT3lKh6D3GW1jeLYWgVDGU31hvsRh7UyH8j1tte42J
ii9G1YRpOtISQ3B+Q3D1Fr2xobxUSZr8aNlSWan4KEbEnh8+cjR7CCIwGQJe9mqe41QUcQU/
E4Vx3U3cU1N1uLVGpw+nIP79+GrBuvdItRPXJZdFgddHKsJx9Xc8XI2fgdW06CKTgBZA2BMa
3JhuVQ+ooSWhrHxsMZF1r9BXCGfMcaFiCOIzMa4iwcv/2bJKJviem2BYya97ogMl7pQFGLfN
le3T1HvdlIhCHelf4NLb3VadSxcGJVgAIrbqdvwA9PjlKHaVvQsvjOrPHLXwNMIMIxDbh3gx
ZgPRuLiy9W0ciuDSl46R4jJU6ueKE6T/pGY8zJAbCKka3hsZcpexoORd5eqG6uH94n/l6l0i
mP8GExLVvJXmBSM9ZpyqgYLTN6jyqPZHOX7e6vcqzegNcXPHPwNdMlsw10gtMVFV7BLGZB5D
5WMFr60Mlz6u7WuxHx11OQBz+Q8oA2D3xkibTfdhilC6YkVo7TfMV+gUs0omSHNT/qNutrOF
VsyS0/IOEcyYxIiKdnlkPeax2c1IvEWj0pAdOY+g8J2TyZ90+/d5zkvJ2WYn7evYUjsVjWCN
23HC4oF4Lg9PmV4jf78u+DKe3RoFwTWSrBNSEDdC7ITdG+VT50oU1eMAuaQUF2loxG86uUbo
jMIlNAOTqkyH1lvZSVabCbxK9vRmaJjtGT8Fn9OnxrTNwbOcPY2/gQEDTCB37gbMrfuEFRQV
OoHNwD1/nWQfBQrXmyMe+hUDzH0GdYIwKYiaISB3DZEBPwmgeT/mp0Rpk1uNr0Jsunr0ei/+
PZS3au1euNoT3QIujxUbcCh5nYp84pIW8dv+u8JQC0R0wHYraFwnumgEpw32i2FREGlfhHcT
Tu8/IjAqDQtCK57gk0qAd+WOda51vmnJOLqxA34ox39FnmoYL0CCF3k6GDX4txi84MSU941b
y2w+WgHF1B/vuK8AYigQkn1/7Mhdbkv475MhMyKgs4ywl0wQ0jV6tIexhfjyxgQaKSv06L0o
+sedV7YTWCv6YiciIinWPW4RWIP1A1NYu28ZB9wtxSAtFobfxiH7yYS1zsK0zwUQ+DR9qgLs
MnOUawU6M8Q/2WFXAaPItqMhWPMw4kcMtQzgc1M0N+VDONujPiJ4HdolVpebP/FWhffQHI6G
s+agos4yvvigcQHlIq3cp5TxoIwc21A0kRPikfe9ocYC8arqVlgsw1xc4dkFPzUd+YdkJlDS
Gcjx6l93
6ofwKP0JuZRei8bbiSSH4mXoeuNxa6ZN049qoo1Cc03xt101rRxilQA1QxY4POfF
+F+CH1yKD4ueDuRgOaxGkoMR25J0cZvlIf3GCMNMRmb1uGvMcsmGsV/eQtWc1JISBJrPkmXL
SajpSc7GHyT848YiuPvtxYr/ykHpw4SEwfnkmG24Wcgf5lxb64OXBBRen7cHELt37k9lgX78
h7QiYoBq07IfUFeZaxCg4JoEZnVDoZ55+FqVdX8ugrTRuwGhf3OUy4/vtA4ner62OYZXbJ5c
4IXfHSQQp5/6UVf9OSGFV5P+hZOYwfc/QbunTv2Owvma4PiJLHBhfSPwKx6ko+TLGwXCROo8
XoSw3+q+coR2YUpwVonXBNyiv5FQxoFgzyuZjb+y1MjZWHOQ9BKiZANkaElsxtNL7Owu9Zzo
6ON8kQP7iFbq4ypjh1EKrm0KmlAr5fcKuykJFgNKBuxHy41nrrWblpgzJks=
/

-- ----------------------------
-- Function structure for SDO_PQRY
-- ----------------------------
CREATE OR REPLACE Function "MDSYS"."SDO_PQRY" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
f16 66e
9Yf1NpsVJifqlOuigYJtM4YpVYowgw0fTNCDYEtkxmR1IsN1PKh2nCEn+ullM6thLb9VgUVb
EC0Ra5ehv7h74/Hk+P/i7Rkqdadh5WwUepqagkqZb/KXiF3zlgNPldN6iFnZem63IakP4fP/
HX8zNfuTyNOZ/DWxhJP1l9ipnHwHeq1RHUFM4itQ51T33PRnjUKt73pm8UB8Y1Yv2fFlocnj
HkxM3hz1b6EJzb6ShBpUQfNPRGZaTtTn41p2jvSieaFlpl3zom+sNatD2c/j4bOOX1TmL5SO
wEpAAgIvRvrChfRnEWCC8WlgZqCOoAme6up5DEmrHGW9UPTMrTUt4+k7Y8p/vF1oS6hRmdHr
R1cZmzQVZsWQxdS2X3HJNlA707eJiZKyYrHc4dAuETQICjfyOZPd9b1MYIzjHtMx/LUraKI1
5Vr1ww6/gqtZViuxNvU42p6l5xJBsY66Sd9j2HGJ5YQO4mWZD0E3tYNEKG9VwC+8eh278Wpm
7OyS9e7LtDwL9FBlL2ZU3MNfsJFgk2TqW2jw/tDEyB/rcZ4XdM6p8HUv37fHW3swf+Jmhhsa
1+KpxkeeyZOQfpMrmfVYYqDXP1ExptBYBeyQcbo8q33APA4YLfRUdEHBKoRb/WvsNvtt3QoF
DAftNU4jVHSpmYILShQE8Z3IUWx0Z/+9Hj29G+Z06WfHCejM9JZxMHMh/PhQxpptHhMICizP
fKv4T7nEHlVJUOGxmNccYZgdeuLLnaqpBz2c1wPU0gov8yHW1IDctV5tTPGDntWGzdpXySdC
wUfFje8UvU5rjvvZC9EJjFAg6LVnH3jIFElM4fydt4MssSRVWVrTSXYdETGgTIIqQYeH0GCB
Fk3eeccCbjiBjmugeYs+9CJfQIyGwYHMpN49u4+LmrANtca5hoKKQe5S/jQ3agc9byGRELVT
Mbm7vwUA2C9rCe21ztKgEiJ+PDJK14snbGh0BoPmv40/EJmMp5AbNngDkVSW8E3blAbe/nnK
ENokea1BEOyIKQUI/AW9QvQ2ghAQ2mcewkjljHkAk1oNT0JxmymuFIm119YMNFNZWgfvVOpV
YuU/eu9ZIKqK94P/bhR9LzaD6u2QDDQRFD0HD+nTmYr3puotbK9DLKI3dMpNWrmLosinLz/G
46kFPATqjN0yR2OxHf48iAXG20EuodzrVqgBWbahRuqh824MXHE7w1fMuZCiuaDAe5kd8PwL
HbciIX/aMQ7XVw50rleTG8/J2Iy51FGftaDNKXS1tcEY3qW5sLHFH8ehQYlHxFw4fYJk3MvF
iE5ZI1q7mLDWICg32cWY7bW6N4Is4R/f7ANyEBGDDXuDW4FTla9BPWPckVcgcUFv+hJjrpht
nMXEHyfmXsXuyeSL+HiNX/wExrMgWkColnUhWuVpsbbrYo6WC9C87VxZ1p4R8FAspsrOkBeR
QvVwXujps7tffD3BGLE00VDRfsYbUpqPQfCziRElx6e6avMbeklAPDd9xEEDNiHBZhRYxdeD
bzsH7kT0jA538m5EpXiYnntIyLmwnaqjpLnqKGfEHtfB1/lDOIEFHRlJHpAZuhNy/vjWuiWj
T06jEKoucROt7D6bYS3BtCPFh4u2MJs9Tzq541I=
/

-- ----------------------------
-- Function structure for SDO_SIMPLE_FILTER
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_SIMPLE_FILTER" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
427 243
jBIyTX2EmJkzS97Lq9RAnrQ9dUEwg5AJLiCsZy/NDeQYvvs+DRbtoBG2iZR492OTp2A0L7Z/
bMx8qbWd2ZxM06sFSOYVRzQQgiAzYh3CcLTvaYoDTVrcwQt2pPELiMEY1nofzwVt5SzbEU03
9XIo48aVFIOmvWitUatTPIva8Y+WsGaeEqLutfRhAFHRCWwYVGe9z1T1LcJ9Nn7bL0MfS3Kl
4Uty2vP9mKm9hMtR6CGAyxt6bZwOIZmvIhe6ZFylFndYzA1m0IN1VHQ6sUWefgJaACMFXIej
9iz6G3Ko4MfyA/b+e9bVt2oVv9IhPDJViTDtzUxqGd0vVEz9zHtRbzPMXYPzKHrlheJi9spO
u1J+WUEPIRGcSSzCDMuTy7BW0GvkaGNpFzP6PtxtFAyZtAjm7I1pcf/BVpaG7djseIsfsBP/
Zx/UHkYuOaUdEl7UxbHq+LCjedqByqVrUSs4gzC7OSMls0DEqQCDpb+7sSkmlf/lwS0w6d5W
VK2vCzu67M95YH+W9Tref2CwcNUWBDxw0iF+6TOolFEoROmkyLMOFQgYQv5E3ZDOzA==
/

-- ----------------------------
-- Function structure for SDO_VERSION
-- ----------------------------
CREATE OR REPLACE function "MDSYS"."SDO_VERSION" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
b1 c2
EkpqEbvhrE3NFNCAIWM5nplFga8wg1xKLcvWfHSi2vjVNLNIXIiMy6h/bNO0jXlNdZu1qrNW
w/XaKRnaVVPAm2Zfp2NIGjxlDvFkl1PpLl53W2DWgqXV4nNzb3AO6t7xs1n6CHCemORkSsWZ
i6greay+uc5YWr23VrujmwP29R+m+9AdFySmUsuclskj0Q8=
/

-- ----------------------------
-- Function structure for SPCLUSTERS
-- ----------------------------
CREATE OR REPLACE FUNCTION "MDSYS"."SPCLUSTERS" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
110 10f
Pvuost3VGMRMF/sVJ8DRJYJYFEgwg3lKmCcdNXTpVYMPa2U3bHDEJl2IMW9HER8ArF4ujdEC
CIa1AIcGZ8rFu74GaExawBxEiom8IJwesTqbBlNiFFS9Imnr+zKCZ6vZmpFEtUyVCwxsR6Gy
FPyn9ak9wK1qfzSlHUvkfIWgahbLHu6T7EO25U56CupPl5rCoj5kVWRda+EqBbDtkxwTJby1
BEIHBD+PdD7DoTQCMrrQSUFNS2lAfKcABDxCIIZ7KqoPaPuolKJI
/

-- ----------------------------
-- Sequence structure for FT_SQ$
-- ----------------------------
DROP SEQUENCE "MDSYS"."FT_SQ$";
CREATE SEQUENCE "MDSYS"."FT_SQ$"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for NTV2_SEQUENCE
-- ----------------------------
DROP SEQUENCE "MDSYS"."NTV2_SEQUENCE";
CREATE SEQUENCE "MDSYS"."NTV2_SEQUENCE"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for RT_SQ$
-- ----------------------------
DROP SEQUENCE "MDSYS"."RT_SQ$";
CREATE SEQUENCE "MDSYS"."RT_SQ$"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for SAMPLE_SEQ
-- ----------------------------
DROP SEQUENCE "MDSYS"."SAMPLE_SEQ";
CREATE SEQUENCE "MDSYS"."SAMPLE_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for SDO_GEOR_SEQ
-- ----------------------------
DROP SEQUENCE "MDSYS"."SDO_GEOR_SEQ";
CREATE SEQUENCE "MDSYS"."SDO_GEOR_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 CACHE 10;

-- ----------------------------
-- Sequence structure for SDO_IDX_TAB_SEQUENCE
-- ----------------------------
DROP SEQUENCE "MDSYS"."SDO_IDX_TAB_SEQUENCE";
CREATE SEQUENCE "MDSYS"."SDO_IDX_TAB_SEQUENCE"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999999999999999999999
 START WITH 1
 CACHE 20
 CYCLE ;

-- ----------------------------
-- Sequence structure for SDO_NDM_ID_SEQ
-- ----------------------------
DROP SEQUENCE "MDSYS"."SDO_NDM_ID_SEQ";
CREATE SEQUENCE "MDSYS"."SDO_NDM_ID_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for SDO_NDM_NETWORK_ID_SEQ
-- ----------------------------
DROP SEQUENCE "MDSYS"."SDO_NDM_NETWORK_ID_SEQ";
CREATE SEQUENCE "MDSYS"."SDO_NDM_NETWORK_ID_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 CACHE 20;

-- ----------------------------
-- Sequence structure for SDO_TOPO_TRANSACT_SEQ
-- ----------------------------
DROP SEQUENCE "MDSYS"."SDO_TOPO_TRANSACT_SEQ";
CREATE SEQUENCE "MDSYS"."SDO_TOPO_TRANSACT_SEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for SDO_TOPO_TRANSACT_SUBSEQ
-- ----------------------------
DROP SEQUENCE "MDSYS"."SDO_TOPO_TRANSACT_SUBSEQ";
CREATE SEQUENCE "MDSYS"."SDO_TOPO_TRANSACT_SUBSEQ"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE 
 ORDER ;

-- ----------------------------
-- Sequence structure for SDO_WS_CONFERENCE_IDS
-- ----------------------------
DROP SEQUENCE "MDSYS"."SDO_WS_CONFERENCE_IDS";
CREATE SEQUENCE "MDSYS"."SDO_WS_CONFERENCE_IDS"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for TMP_COORD_OPS
-- ----------------------------
DROP SEQUENCE "MDSYS"."TMP_COORD_OPS";
CREATE SEQUENCE "MDSYS"."TMP_COORD_OPS"
 INCREMENT BY 1
 MINVALUE 1000000
 MAXVALUE 2000000
 START WITH 1000000
 NOCACHE 
 CYCLE ;

-- ----------------------------
-- Sequence structure for TOKEN_SQ$
-- ----------------------------
DROP SEQUENCE "MDSYS"."TOKEN_SQ$";
CREATE SEQUENCE "MDSYS"."TOKEN_SQ$"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for WFS_PROC_SQ$
-- ----------------------------
DROP SEQUENCE "MDSYS"."WFS_PROC_SQ$";
CREATE SEQUENCE "MDSYS"."WFS_PROC_SQ$"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Sequence structure for XMLINFO_SQ$
-- ----------------------------
DROP SEQUENCE "MDSYS"."XMLINFO_SQ$";
CREATE SEQUENCE "MDSYS"."XMLINFO_SQ$"
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 9999999999999999999999999999
 START WITH 1
 NOCACHE ;

-- ----------------------------
-- Indexes structure for table CSW_RECORD_TYPES$
-- ----------------------------

-- ----------------------------
-- Uniques structure for table CSW_RECORD_TYPES$
-- ----------------------------
ALTER TABLE "MDSYS"."CSW_RECORD_TYPES$" ADD UNIQUE ("TYPENAMENS", "TYPENAME");

-- ----------------------------
-- Checks structure for table CSW_RECORD_TYPES$
-- ----------------------------
ALTER TABLE "MDSYS"."CSW_RECORD_TYPES$" ADD CHECK ( idExtractorType IN ('XPATH', 'USER_FUNC', 'NONE'));

-- ----------------------------
-- Primary Key structure for table CSW_RECORD_TYPES$
-- ----------------------------
ALTER TABLE "MDSYS"."CSW_RECORD_TYPES$" ADD PRIMARY KEY ("RECORDTYPEID");

-- ----------------------------
-- Uniques structure for table CSW_RECORDTABLEUPDATED$
-- ----------------------------
ALTER TABLE "MDSYS"."CSW_RECORDTABLEUPDATED$" ADD UNIQUE ("SYS_NC0000300004$");

-- ----------------------------
-- Indexes structure for table CSW_RTXSDINFO$
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table CSW_RTXSDINFO$
-- ----------------------------
ALTER TABLE "MDSYS"."CSW_RTXSDINFO$" ADD PRIMARY KEY ("RTXSDREFID");

-- ----------------------------
-- Indexes structure for table CURRENTSESSIONTOKENMAP_T$
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table CURRENTSESSIONTOKENMAP_T$
-- ----------------------------
ALTER TABLE "MDSYS"."CURRENTSESSIONTOKENMAP_T$" ADD PRIMARY KEY ("SESSIONID", "TOKENID");

-- ----------------------------
-- Indexes structure for table MD$RELATE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table MD$RELATE
-- ----------------------------
ALTER TABLE "MDSYS"."MD$RELATE" ADD PRIMARY KEY ("SDO_MASK");

-- ----------------------------
-- Indexes structure for table NTV2_XML_DATA
-- ----------------------------

-- ----------------------------
-- Checks structure for table NTV2_XML_DATA
-- ----------------------------
ALTER TABLE "MDSYS"."NTV2_XML_DATA" ADD CHECK ("NTV2_FILE_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."NTV2_XML_DATA" ADD CHECK ("SEQUENCE_NUMBER" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table NTV2_XML_DATA
-- ----------------------------
ALTER TABLE "MDSYS"."NTV2_XML_DATA" ADD PRIMARY KEY ("NTV2_FILE_ID", "SEQUENCE_NUMBER");

-- ----------------------------
-- Indexes structure for table OGIS_SPATIAL_REFERENCE_SYSTEMS
-- ----------------------------

-- ----------------------------
-- Triggers structure for table OGIS_SPATIAL_REFERENCE_SYSTEMS
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."OGIS_CRS_DELETE_TRIGGER" BEFORE DELETE ON "MDSYS"."OGIS_SPATIAL_REFERENCE_SYSTEMS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
BEGIN
  DELETE FROM MDSYS.sdo_coord_ref_system WHERE SRID = :old.srid;
END;CREATE OR REPLACE TRIGGER "MDSYS"."OGIS_CRS_INSERT_TRIGGER" BEFORE INSERT ON "MDSYS"."OGIS_SPATIAL_REFERENCE_SYSTEMS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
BEGIN
  IF(UPPER(TRIM(:new.srtext)) like 'GEOGCS%') THEN
    insert into MDSYS.sdo_coord_ref_system (
      SRID,
      COORD_REF_SYS_NAME,
      COORD_REF_SYS_KIND,
      COORD_SYS_ID,
      DATUM_ID,
      GEOG_CRS_DATUM_ID,
      SOURCE_GEOG_SRID,
      PROJECTION_CONV_ID,
      CMPD_HORIZ_SRID,
      CMPD_VERT_SRID,
      INFORMATION_SOURCE,
      DATA_SOURCE,
      IS_LEGACY,
      LEGACY_CODE,
      LEGACY_WKTEXT,
      LEGACY_CS_BOUNDS,
      IS_VALID,
      SUPPORTS_SDO_GEOMETRY)
    VALUES (
      :new.SRID,
      'OGIS ' || :new.SRID,
      'GEOGRAPHIC2D',
      NULL,
      1000000123,
      1000000123,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      'TRUE',
      NULL,
      :new.SRTEXT,
      NULL,
      'TRUE',
      'TRUE');
  ELSE
    insert into MDSYS.sdo_coord_ref_system (
      SRID,
      COORD_REF_SYS_NAME,
      COORD_REF_SYS_KIND,
      COORD_SYS_ID,
      DATUM_ID,
      GEOG_CRS_DATUM_ID,
      SOURCE_GEOG_SRID,
      PROJECTION_CONV_ID,
      CMPD_HORIZ_SRID,
      CMPD_VERT_SRID,
      INFORMATION_SOURCE,
      DATA_SOURCE,
      IS_LEGACY,
      LEGACY_CODE,
      LEGACY_WKTEXT,
      LEGACY_CS_BOUNDS,
      IS_VALID,
      SUPPORTS_SDO_GEOMETRY)
    VALUES (
      :new.SRID,
      'OGIS ' || :new.SRID,
      'PROJECTED',
      NULL,
      NULL,
      1000000123,
      1000000123,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      'TRUE',
      NULL,
      :new.SRTEXT,
      NULL,
      'TRUE',
      'TRUE');
  END IF;
END;
-- ----------------------------
-- Primary Key structure for table OGIS_SPATIAL_REFERENCE_SYSTEMS
-- ----------------------------
ALTER TABLE "MDSYS"."OGIS_SPATIAL_REFERENCE_SYSTEMS" ADD PRIMARY KEY ("SRID");

-- ----------------------------
-- Indexes structure for table OLS_DIR_BUSINESS_CHAINS
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table OLS_DIR_BUSINESS_CHAINS
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_BUSINESS_CHAINS" ADD PRIMARY KEY ("CHAIN_ID");

-- ----------------------------
-- Indexes structure for table OLS_DIR_BUSINESSES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OLS_DIR_BUSINESSES
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_BUSINESSES" ADD CHECK ("BUSINESS_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."OLS_DIR_BUSINESSES" ADD CHECK ("COUNTRY" IS NOT NULL);
ALTER TABLE "MDSYS"."OLS_DIR_BUSINESSES" ADD CHECK ("POSTAL_CODE" IS NOT NULL);
ALTER TABLE "MDSYS"."OLS_DIR_BUSINESSES" ADD CHECK ("STREET" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OLS_DIR_BUSINESSES
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_BUSINESSES" ADD PRIMARY KEY ("BUSINESS_ID");

-- ----------------------------
-- Indexes structure for table OLS_DIR_CATEGORIES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OLS_DIR_CATEGORIES
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIES" ADD CHECK ("CATEGORY_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIES" ADD CHECK ("CATEGORY_TYPE_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIES" ADD CHECK ("CATEGORY_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OLS_DIR_CATEGORIES
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIES" ADD PRIMARY KEY ("CATEGORY_ID", "CATEGORY_TYPE_ID");

-- ----------------------------
-- Indexes structure for table OLS_DIR_CATEGORIZATIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OLS_DIR_CATEGORIZATIONS
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIZATIONS" ADD CHECK (CATEGORIZATION_TYPE IN ('EXPLICIT', 'IMPLICIT'));

-- ----------------------------
-- Primary Key structure for table OLS_DIR_CATEGORIZATIONS
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIZATIONS" ADD PRIMARY KEY ("BUSINESS_ID", "CATEGORY_ID", "CATEGORY_TYPE_ID");

-- ----------------------------
-- Indexes structure for table OLS_DIR_CATEGORY_TYPES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OLS_DIR_CATEGORY_TYPES
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORY_TYPES" ADD CHECK ("CATEGORY_TYPE_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OLS_DIR_CATEGORY_TYPES
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORY_TYPES" ADD PRIMARY KEY ("CATEGORY_TYPE_ID");

-- ----------------------------
-- Indexes structure for table OPENLS_CLASSIFICATIONS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OPENLS_CLASSIFICATIONS
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLS_CLASSIFICATIONS" ADD CHECK ("CRITERION" IS NOT NULL);
ALTER TABLE "MDSYS"."OPENLS_CLASSIFICATIONS" ADD CHECK ("CLASSIFICATION" IS NOT NULL);
ALTER TABLE "MDSYS"."OPENLS_CLASSIFICATIONS" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "MDSYS"."OPENLS_CLASSIFICATIONS" ADD CHECK ("CHARACTERISTIC_XPATH" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OPENLS_CLASSIFICATIONS
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLS_CLASSIFICATIONS" ADD PRIMARY KEY ("CRITERION", "CLASSIFICATION", "VERSION");

-- ----------------------------
-- Indexes structure for table OPENLS_NAMESPACES
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table OPENLS_NAMESPACES
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLS_NAMESPACES" ADD PRIMARY KEY ("SHORTCUT", "VERSION");

-- ----------------------------
-- Indexes structure for table OPENLS_NODES
-- ----------------------------

-- ----------------------------
-- Checks structure for table OPENLS_NODES
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLS_NODES" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."OPENLS_NODES" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OPENLS_NODES
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLS_NODES" ADD PRIMARY KEY ("NAME", "VERSION");

-- ----------------------------
-- Indexes structure for table OPENLS_XPATHS
-- ----------------------------

-- ----------------------------
-- Checks structure for table OPENLS_XPATHS
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLS_XPATHS" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."OPENLS_XPATHS" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "MDSYS"."OPENLS_XPATHS" ADD CHECK ("XPATH" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table OPENLS_XPATHS
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLS_XPATHS" ADD PRIMARY KEY ("NAME", "VERSION");

-- ----------------------------
-- Uniques structure for table OPENLSSERVICES
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLSSERVICES" ADD UNIQUE ("SERVICE");

-- ----------------------------
-- Checks structure for table OPENLSSERVICES
-- ----------------------------
ALTER TABLE "MDSYS"."OPENLSSERVICES" ADD CHECK (
                SERVICE IN (
                  'Location Utility Service',
                  'Presentation Service',
                  'Route Service',
                  'Directory Service'));
ALTER TABLE "MDSYS"."OPENLSSERVICES" ADD CHECK ("SERVICE" IS NOT NULL);
ALTER TABLE "MDSYS"."OPENLSSERVICES" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Uniques structure for table ROWTOKENMAP_T$
-- ----------------------------
ALTER TABLE "MDSYS"."ROWTOKENMAP_T$" ADD UNIQUE ("TABLENAME", "RPOINTER");

-- ----------------------------
-- Indexes structure for table SDO_3DTHEMES_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_3DTHEMES_IDX"
ON "MDSYS"."SDO_3DTHEMES_TABLE" ("SDO_OWNER" ASC, "BASE_TABLE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SDO_3DTHEMES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_3DTHEMES_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_3DTHEMES_TABLE" ADD CHECK ("BASE_TABLE" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_3DTHEMES_TABLE" ADD CHECK ("THEME_COLUMN" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_3DTHEMES_TABLE" ADD CHECK ("STYLE_COLUMN" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_3DTHEMES_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_3DTHEMES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_3DTHEMES_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_3DTXFMS_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_3DTXFMS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_3DTXFMS_TABLE" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_3DTXFMS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_3DTXFMS_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_ANIMATIONS_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_ANIMATIONS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_ANIMATIONS_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_ANIMATIONS_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_ANIMATIONS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_ANIMATIONS_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_ANNOTATION_TEXT_METADATA
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_ANNOTATION_TEXT_METADATA
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_ANNOTATION_TEXT_METADATA" ADD PRIMARY KEY ("F_TABLE_SCHEMA", "F_TABLE_NAME", "F_TEXT_COLUMN");

-- ----------------------------
-- Indexes structure for table SDO_CACHED_MAPS_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_CACHED_MAPS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_CACHED_MAPS_TABLE" ADD CHECK ("IS_ONLINE" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_CACHED_MAPS_TABLE" ADD CHECK ("IS_INTERNAL" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_CACHED_MAPS_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_CACHED_MAPS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_CACHED_MAPS_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_COORD_AXES
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_COORD_AXES
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_AXES" ADD PRIMARY KEY ("COORD_SYS_ID", "ORDER");

-- ----------------------------
-- Indexes structure for table SDO_COORD_AXIS_NAMES
-- ----------------------------

-- ----------------------------
-- Uniques structure for table SDO_COORD_AXIS_NAMES
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_AXIS_NAMES" ADD UNIQUE ("COORD_AXIS_NAME");

-- ----------------------------
-- Checks structure for table SDO_COORD_AXIS_NAMES
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_AXIS_NAMES" ADD CHECK ("COORD_AXIS_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_COORD_AXIS_NAMES
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_AXIS_NAMES" ADD PRIMARY KEY ("COORD_AXIS_NAME_ID");

-- ----------------------------
-- Indexes structure for table SDO_COORD_OP_METHODS
-- ----------------------------

-- ----------------------------
-- Triggers structure for table SDO_COORD_OP_METHODS
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."SDO_COORD_OP_METHODS_TRIGGER" BEFORE INSERT OR DELETE OR UPDATE ON "MDSYS"."SDO_COORD_OP_METHODS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
BEGIN
  MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, 'This cannot change the actual implementation status of a method.');
END;
-- ----------------------------
-- Checks structure for table SDO_COORD_OP_METHODS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK (COORD_OP_METHOD_ID > 0);
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK (IS_IMPLEMENTED_FORWARD IN (0, 1));
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK (IS_IMPLEMENTED_REVERSE IN (0, 1));
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK (REVERSE_OP IN (0, 1));
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK ("COORD_OP_METHOD_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK ("REVERSE_OP" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK ("IS_IMPLEMENTED_FORWARD" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD CHECK ("IS_IMPLEMENTED_REVERSE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_COORD_OP_METHODS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_METHODS" ADD PRIMARY KEY ("COORD_OP_METHOD_ID");

-- ----------------------------
-- Indexes structure for table SDO_COORD_OP_PARAM_USE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_COORD_OP_PARAM_USE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_USE" ADD PRIMARY KEY ("COORD_OP_METHOD_ID", "SORT_ORDER");

-- ----------------------------
-- Indexes structure for table SDO_COORD_OP_PARAM_VALS
-- ----------------------------

-- ----------------------------
-- Triggers structure for table SDO_COORD_OP_PARAM_VALS
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."SDO_COORD_OP_PARAM_VAL_TRIGG2" AFTER INSERT OR DELETE OR UPDATE ON "MDSYS"."SDO_COORD_OP_PARAM_VALS" REFERENCING OLD AS "OLD" NEW AS "NEW" ENABLE
BEGIN
  update
    sdo_cs_srs
  set
    wktext = MDSYS.sdo_cs.internal_det_srid_wkt(srid),
    wktext3d = mdsys.sdo_cs.get_3d_wkt(srid)
  where
    wktext = 'Getting updated';
end;CREATE OR REPLACE TRIGGER "MDSYS"."SDO_COORD_OP_PARAM_VAL_TRIGGER" AFTER INSERT OR DELETE OR UPDATE ON "MDSYS"."SDO_COORD_OP_PARAM_VALS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
BEGIN
delete from mdsys.sdo_cs_context_information;
  update
    sdo_cs_srs
  set
    wktext = 'Getting updated'
  where
    srid in (
      select
        crs.srid
      from
        sdo_coord_ref_sys crs
      where
        crs.projection_conv_id = :new.coord_op_id);
end;
-- ----------------------------
-- Primary Key structure for table SDO_COORD_OP_PARAM_VALS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_VALS" ADD PRIMARY KEY ("COORD_OP_ID", "PARAMETER_ID");

-- ----------------------------
-- Indexes structure for table SDO_COORD_OP_PARAMS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_COORD_OP_PARAMS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAMS" ADD CHECK (PARAMETER_ID > 0);
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAMS" ADD CHECK ("PARAMETER_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_COORD_OP_PARAMS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAMS" ADD PRIMARY KEY ("PARAMETER_ID");

-- ----------------------------
-- Triggers structure for table SDO_COORD_OP_PATHS
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."SDO_COORD_OP_PATHS_TRIGGER" BEFORE INSERT OR UPDATE ON "MDSYS"."SDO_COORD_OP_PATHS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
DECLARE
  c NUMBER;
  is_impl_single NUMBER;
  is_impl_concat NUMBER;
BEGIN

delete from mdsys.sdo_cs_context_information;

  SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_NON_ELEM_OPS WHERE COORD_OP_ID = :new.CONCAT_OPERATION_ID;
  IF(c < 1) THEN
    SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_ELEM_OPS WHERE COORD_OP_ID = :new.CONCAT_OPERATION_ID;
    IF(c < 1) THEN
      IF(:new.CONCAT_OPERATION_ID > 0) THEN
        MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.CONCAT_OPERATION_ID || ' does not exist.'));
      ELSE
        SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_NON_ELEM_OPS WHERE COORD_OP_ID = -:new.CONCAT_OPERATION_ID;
        IF(c < 1) THEN
          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.CONCAT_OPERATION_ID || ' does not exist, neither does its forward version ' || -:new.CONCAT_OPERATION_ID || '.'));
        ELSE
          dbms_output.put_line('Concatenated operation ' || -:new.CONCAT_OPERATION_ID || ' is not reversible, because of its following elementary component(s):');

          <<FIND_CULPRITS>>
          DECLARE
            CURSOR CULPRITS IS
              SELECT
                -PATHS.SINGLE_OPERATION_ID "COORD_OP_ID"
              FROM
                MDSYS.SDO_COORD_OP_PATHS PATHS
              WHERE
                PATHS.CONCAT_OPERATION_ID = -:new.CONCAT_OPERATION_ID
              MINUS
              SELECT
                COORD_OP_ID
              FROM
                MDSYS.SDO_AVAILABLE_OPS;
            CULPRIT CULPRITS%ROWTYPE;
          BEGIN
            FOR CULPRIT IN CULPRITS LOOP
              dbms_output.put_line('Elementary operation ' || (-CULPRIT.COORD_OP_ID) || ' is not reversible.');
            END LOOP;
          END FIND_CULPRITS;

          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Concatenated operation ' || -:new.CONCAT_OPERATION_ID || ' is not reversible'));
        END IF;
      END IF;
    ELSE
      MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.CONCAT_OPERATION_ID || ' is an elementary operation, not a concatenated one.'));
    END IF;
  END IF;

  SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_ELEM_OPS WHERE COORD_OP_ID = :new.SINGLE_OPERATION_ID;
  IF(c < 1) THEN
    SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_NON_ELEM_OPS WHERE COORD_OP_ID = :new.SINGLE_OPERATION_ID;
    IF(c < 1) THEN
      IF(:new.SINGLE_OPERATION_ID > 0) THEN
        MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.SINGLE_OPERATION_ID || ' does not exist.'));
      ELSE
        SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_ELEM_OPS WHERE COORD_OP_ID = -:new.SINGLE_OPERATION_ID;
        IF(c < 1) THEN
          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.SINGLE_OPERATION_ID || ' does not exist, neither does its forward version ' || -:new.SINGLE_OPERATION_ID || '.'));
        ELSE
          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || -:new.SINGLE_OPERATION_ID || ' is not reversible.'));
        END IF;
      END IF;
    ELSE
      MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.SINGLE_OPERATION_ID || ' is a concatenated operation, not an elementary one.'));
    END IF;
  END IF;

  SELECT IS_IMPLEMENTED INTO is_impl_single FROM MDSYS.SDO_AVAILABLE_ELEM_OPS WHERE COORD_OP_ID = :new.SINGLE_OPERATION_ID;
  IF(is_impl_single = 0) THEN
    SELECT IS_IMPLEMENTED INTO is_impl_concat FROM MDSYS.SDO_AVAILABLE_NON_ELEM_OPS WHERE COORD_OP_ID = :new.CONCAT_OPERATION_ID;
    IF(is_impl_concat = 1) THEN
      MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, (
        'Single operation ' || :new.SINGLE_OPERATION_ID ||
        ' is not implemented. Then concatenated operation ' || :new.CONCAT_OPERATION_ID ||
        ' cannot be, neither.'));
    END IF;
  END IF;
END;
-- ----------------------------
-- Checks structure for table SDO_COORD_OP_PATHS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PATHS" ADD CHECK (CONCAT_OPERATION_ID > 10);
ALTER TABLE "MDSYS"."SDO_COORD_OP_PATHS" ADD CHECK (OP_PATH_STEP > 0);
ALTER TABLE "MDSYS"."SDO_COORD_OP_PATHS" ADD CHECK ("CONCAT_OPERATION_ID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table SDO_COORD_OPS
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_COORD_OPS_COORD_OP_TYPE"
ON "MDSYS"."SDO_COORD_OPS" ("COORD_OP_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Triggers structure for table SDO_COORD_OPS
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."SDO_COORD_OPS_TRIGGER" BEFORE INSERT OR DELETE OR UPDATE ON "MDSYS"."SDO_COORD_OPS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
BEGIN
delete from mdsys.sdo_cs_context_information;
END;
-- ----------------------------
-- Uniques structure for table SDO_COORD_OPS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD UNIQUE ("COORD_OP_NAME");

-- ----------------------------
-- Checks structure for table SDO_COORD_OPS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD CHECK (COORD_OP_ID > 10);
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD CHECK (
          COORD_OP_NAME NOT IN (
            'Geographic (Lat/Long)',
            'Universal Transverse Mercator',
            'State Plane Coordinates',
            'Albers Conical Equal Area',
            'Lambert Conformal Conic',
            'Mercator',
            'Polar Stereographic',
            'Polyconic',
            'Equidistant Conic',
            'Transverse Mercator',
            'Stereographic',
            'Lambert Azimuthal Equal Area',
            'Azimuthal Equidistant',
            'Gnomonic',
            'Orthographic',
            'General Vertical Near-Side Perspective',
            'Sinusoidal',
            'Equirectangular',
            'Miller Cylindrical',
            'Van der Grinten',
            'Hotine Oblique Mercator',
            'Robinson',
            'Space Oblique Mercator',
            'Alaska Conformal',
            'Interrupted Goode Homolosine',
            'Mollweide',
            'Interrupted Mollweide',
            'Hammer',
            'Wagner IV',
            'Wagner VII',
            'Oblated Equal Area',
            'Non-earth',
            'Transverse Mercator Danish System 45 Bornholm',
            'Transverse Mercator Danish System 34 Jylland-Fyn',
            'Transverse Mercator Sjaelland',
            'Transverse Mercator Finnish KKJ',
            'Eckert IV',
            'Eckert VI',
            'Gall',
            'Lambert Conformal Conic (Belgium 1972)',
            'New Zealand Map Grid',
            'Cylindrical Equal Area',
            'Swiss Oblique Mercator',
            'Bonne',
            'Cassini'));
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD CHECK (COORD_OP_VARIANT > 0);
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD CHECK ("COORD_OP_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD CHECK ("SHOW_OPERATION" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD CHECK ("IS_LEGACY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_COORD_OPS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD PRIMARY KEY ("COORD_OP_ID");

-- ----------------------------
-- Indexes structure for table SDO_COORD_REF_SYS
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_COORD_REF_SYS_KIND"
ON "MDSYS"."SDO_COORD_REF_SYS" ("COORD_REF_SYS_KIND" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SDO_COORD_REF_SYS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (
          (IS_VALID = 'FALSE') OR
          (IS_LEGACY = 'TRUE') OR
          (coord_ref_sys_kind <> 'COMPOUND') OR
          (
            (     SOURCE_GEOG_SRID    IS NULL) AND
            (     PROJECTION_CONV_ID  IS NULL) AND
            (NOT  CMPD_HORIZ_SRID     IS NULL) AND
            (NOT  CMPD_VERT_SRID      IS NULL) AND
            (     COORD_SYS_ID        IS NULL) AND
            (     DATUM_ID            IS NULL)
          )
        );
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (
          (IS_VALID = 'FALSE') OR
          (IS_LEGACY = 'TRUE') OR
          (coord_ref_sys_kind <> 'ENGINEERING') OR
          (
            (     SOURCE_GEOG_SRID    IS NULL) AND
            (     PROJECTION_CONV_ID  IS NULL) AND
            (     CMPD_HORIZ_SRID     IS NULL) AND
            (     CMPD_VERT_SRID      IS NULL) AND
            (NOT  COORD_SYS_ID        IS NULL) AND
            (NOT  DATUM_ID            IS NULL) AND
            (NOT  GEOG_CRS_DATUM_ID   IS NULL)
          )
        );
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (
          (IS_VALID = 'FALSE') OR
          (IS_LEGACY = 'TRUE') OR
          (coord_ref_sys_kind <> 'GEOCENTRIC') OR
          (
            (     SOURCE_GEOG_SRID    IS NULL) AND
            (     PROJECTION_CONV_ID  IS NULL) AND
            (     CMPD_HORIZ_SRID     IS NULL) AND
            (     CMPD_VERT_SRID      IS NULL) AND
            (NOT  COORD_SYS_ID        IS NULL) AND
            (NOT  DATUM_ID            IS NULL) AND
            (NOT  GEOG_CRS_DATUM_ID   IS NULL)
          )
        );
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (
          (IS_VALID = 'FALSE') OR
          (IS_LEGACY = 'TRUE') OR
          (coord_ref_sys_kind <> 'GEOGRAPHIC2D') OR
          (
            (     SOURCE_GEOG_SRID    IS NULL) AND
            (     PROJECTION_CONV_ID  IS NULL) AND
            (     CMPD_HORIZ_SRID     IS NULL) AND
            (     CMPD_VERT_SRID      IS NULL) AND
            (NOT  COORD_SYS_ID        IS NULL) AND
            (NOT  DATUM_ID            IS NULL) AND
            (NOT  GEOG_CRS_DATUM_ID   IS NULL)
          )
        );
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (
          (IS_VALID = 'FALSE') OR
          (IS_LEGACY = 'TRUE') OR
          (coord_ref_sys_kind <> 'GEOGRAPHIC3D') OR
          (
            (     SOURCE_GEOG_SRID    IS NULL) AND
            (     PROJECTION_CONV_ID  IS NULL) AND
            (     CMPD_HORIZ_SRID     IS NULL) AND
            (     CMPD_VERT_SRID      IS NULL) AND
            (NOT  COORD_SYS_ID        IS NULL) AND
            (NOT  DATUM_ID            IS NULL) AND
            (NOT  GEOG_CRS_DATUM_ID   IS NULL)
          )
        );
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (
          (IS_VALID = 'FALSE') OR
          (IS_LEGACY = 'TRUE') OR
          (coord_ref_sys_kind <> 'PROJECTED') OR
          (
            (NOT  SOURCE_GEOG_SRID    IS NULL) AND
            (NOT  PROJECTION_CONV_ID  IS NULL) AND
            (     CMPD_HORIZ_SRID     IS NULL) AND
            (     CMPD_VERT_SRID      IS NULL) AND
            (NOT  COORD_SYS_ID        IS NULL) AND
            (     DATUM_ID            IS NULL) AND
            (NOT  GEOG_CRS_DATUM_ID   IS NULL)
          )
        );
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (
          (IS_VALID = 'FALSE') OR
          (IS_LEGACY = 'TRUE') OR
          (coord_ref_sys_kind <> 'VERTICAL') OR
          (
            (     SOURCE_GEOG_SRID    IS NULL) AND
            (     PROJECTION_CONV_ID  IS NULL) AND
            (     CMPD_HORIZ_SRID     IS NULL) AND
            (     CMPD_VERT_SRID      IS NULL) AND
            (NOT  COORD_SYS_ID        IS NULL) AND
            (NOT  DATUM_ID            IS NULL) AND
            (NOT  GEOG_CRS_DATUM_ID   IS NULL)
          )
        );
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK (SRID > 0);
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK ("SRID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK ("COORD_REF_SYS_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK ("COORD_REF_SYS_KIND" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD CHECK ("IS_LEGACY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_COORD_REF_SYS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD PRIMARY KEY ("SRID");

-- ----------------------------
-- Indexes structure for table SDO_COORD_SYS
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_COORD_SYS_COORD_SYS_TYPE"
ON "MDSYS"."SDO_COORD_SYS" ("COORD_SYS_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SDO_COORD_SYS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_SYS" ADD UNIQUE ("COORD_SYS_NAME");

-- ----------------------------
-- Checks structure for table SDO_COORD_SYS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_SYS" ADD CHECK (COORD_SYS_ID > 0);
ALTER TABLE "MDSYS"."SDO_COORD_SYS" ADD CHECK ("COORD_SYS_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_COORD_SYS" ADD CHECK ("COORD_SYS_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_COORD_SYS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_SYS" ADD PRIMARY KEY ("COORD_SYS_ID");

-- ----------------------------
-- Indexes structure for table SDO_CS_SRS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_CS_SRS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_CS_SRS" ADD CHECK ("SRID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_CS_SRS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_CS_SRS" ADD PRIMARY KEY ("SRID");

-- ----------------------------
-- Indexes structure for table SDO_DATUMS
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_DATUMS_DATUM_TYPE"
ON "MDSYS"."SDO_DATUMS" ("DATUM_TYPE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SDO_DATUMS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD CHECK (DATUM_ID > 0);
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD CHECK ("DATUM_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD CHECK ("DATUM_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD CHECK ("IS_LEGACY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_DATUMS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD PRIMARY KEY ("DATUM_ID");

-- ----------------------------
-- Indexes structure for table SDO_ELLIPSOIDS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_ELLIPSOIDS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_ELLIPSOIDS" ADD CHECK (ELLIPSOID_ID > 0);
ALTER TABLE "MDSYS"."SDO_ELLIPSOIDS" ADD CHECK (SEMI_MAJOR_AXIS > 0);
ALTER TABLE "MDSYS"."SDO_ELLIPSOIDS" ADD CHECK ("ELLIPSOID_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_ELLIPSOIDS" ADD CHECK ("ELLIPSOID_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_ELLIPSOIDS" ADD CHECK ("IS_LEGACY" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_ELLIPSOIDS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_ELLIPSOIDS" ADD PRIMARY KEY ("ELLIPSOID_ID");

-- ----------------------------
-- Indexes structure for table SDO_GEOM_METADATA_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_GEOM_IDX"
ON "MDSYS"."SDO_GEOM_METADATA_TABLE" ("SDO_OWNER" ASC, "SDO_TABLE_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table SDO_GEOM_METADATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GEOM_METADATA_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "SDO_TABLE_NAME", "SDO_COLUMN_NAME");

-- ----------------------------
-- Indexes structure for table SDO_GEOR_PLUGIN_REGISTRY
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_GEOR_PLUGIN_REGISTRY
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GEOR_PLUGIN_REGISTRY" ADD PRIMARY KEY ("PLUGIN_NAME");

-- ----------------------------
-- Indexes structure for table SDO_GEOR_SYSDATA_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_GEOR_IDX"
ON "MDSYS"."SDO_GEOR_SYSDATA_TABLE" ("SDO_OWNER" ASC, "GEORASTER_TABLE_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SDO_GEOR_SYSDATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GEOR_SYSDATA_TABLE" ADD CHECK ("GEORASTER_TABLE_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_GEOR_SYSDATA_TABLE" ADD CHECK ("GEORASTER_COLUMN_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_GEOR_SYSDATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GEOR_SYSDATA_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "RDT_TABLE_NAME", "RASTER_ID");

-- ----------------------------
-- Indexes structure for table SDO_GEOR_XMLSCHEMA_TABLE
-- ----------------------------

-- ----------------------------
-- Uniques structure for table SDO_GEOR_XMLSCHEMA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GEOR_XMLSCHEMA_TABLE" ADD UNIQUE ("GEORASTERFORMAT");

-- ----------------------------
-- Primary Key structure for table SDO_GEOR_XMLSCHEMA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GEOR_XMLSCHEMA_TABLE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SDO_GR_RDT_1
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_GR_RDT_1
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GR_RDT_1" ADD PRIMARY KEY ("RASTERDATATABLE", "RASTERID", "PYRAMIDLEVEL", "BANDBLOCKNUMBER", "ROWBLOCKNUMBER", "COLUMNBLOCKNUMBER");

-- ----------------------------
-- Indexes structure for table SDO_GR_RDT_2
-- ----------------------------

-- ----------------------------
-- Uniques structure for table SDO_GR_RDT_2
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GR_RDT_2" ADD UNIQUE ("SYS_NC_OID$");

-- ----------------------------
-- Primary Key structure for table SDO_GR_RDT_2
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_GR_RDT_2" ADD PRIMARY KEY ("RASTERID", "PYRAMIDLEVEL", "BANDBLOCKNUMBER", "ROWBLOCKNUMBER", "COLUMNBLOCKNUMBER");

-- ----------------------------
-- Indexes structure for table SDO_INDEX_METADATA_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_IDX_MDATA_IDX"
ON "MDSYS"."SDO_INDEX_METADATA_TABLE" ("SDO_INDEX_OWNER" ASC, "SDO_INDEX_NAME" ASC, "SDO_INDEX_PARTITION" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table SDO_LIGHTSOURCES_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_LIGHTSOURCES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_LIGHTSOURCES_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_LIGHTSOURCES_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_LIGHTSOURCES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_LIGHTSOURCES_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_LRS_METADATA_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_LRS_META_IDX"
ON "MDSYS"."SDO_LRS_METADATA_TABLE" ("SDO_OWNER" ASC, "SDO_TABLE_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SDO_LRS_METADATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_LRS_METADATA_TABLE" ADD CHECK ("SDO_TABLE_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_LRS_METADATA_TABLE" ADD CHECK ("SDO_COLUMN_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_LRS_METADATA_TABLE" ADD CHECK ("SDO_DIM_POS" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_LRS_METADATA_TABLE" ADD CHECK (SDO_DIM_POS = 3 OR SDO_DIM_POS = 4);

-- ----------------------------
-- Primary Key structure for table SDO_LRS_METADATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_LRS_METADATA_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "SDO_TABLE_NAME", "SDO_COLUMN_NAME");

-- ----------------------------
-- Indexes structure for table SDO_MAPS_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_MAPS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_MAPS_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_MAPS_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_MAPS_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_MAPS_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_NETWORK_CONSTRAINTS
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_NET_CONS_CLASS"
ON "MDSYS"."SDO_NETWORK_CONSTRAINTS" ("CLASS_NAME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "MDSYS"."SDO_NET_CONS_CONS"
ON "MDSYS"."SDO_NETWORK_CONSTRAINTS" ("CONSTRAINT" ASC)
LOGGING
VISIBLE;
CREATE INDEX "MDSYS"."SDO_NET_CONS_OWNER"
ON "MDSYS"."SDO_NETWORK_CONSTRAINTS" ("SDO_OWNER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SDO_NETWORK_CONSTRAINTS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_CONSTRAINTS" ADD UNIQUE ("SDO_OWNER", "CLASS_NAME");
ALTER TABLE "MDSYS"."SDO_NETWORK_CONSTRAINTS" ADD UNIQUE ("SDO_OWNER", "CONSTRAINT");

-- ----------------------------
-- Checks structure for table SDO_NETWORK_CONSTRAINTS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_CONSTRAINTS" ADD CHECK ("SDO_OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_CONSTRAINTS" ADD CHECK ("CONSTRAINT" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table SDO_NETWORK_HISTORIES
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_NET_HIS_NET"
ON "MDSYS"."SDO_NETWORK_HISTORIES" ("NETWORK" ASC)
LOGGING
VISIBLE;
CREATE INDEX "MDSYS"."SDO_NET_HIS_OWNER"
ON "MDSYS"."SDO_NETWORK_HISTORIES" ("OWNER" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SDO_NETWORK_HISTORIES
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_HISTORIES" ADD UNIQUE ("OWNER", "NETWORK");

-- ----------------------------
-- Checks structure for table SDO_NETWORK_HISTORIES
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_HISTORIES" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_HISTORIES" ADD CHECK ("NETWORK" IS NOT NULL);

-- ----------------------------
-- Uniques structure for table SDO_NETWORK_LOCKS_WM
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_LOCKS_WM" ADD UNIQUE ("SDO_OWNER", "LOCK_ID");

-- ----------------------------
-- Checks structure for table SDO_NETWORK_LOCKS_WM
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_LOCKS_WM" ADD CHECK ("SDO_OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_LOCKS_WM" ADD CHECK ("LOCK_ID" IS NOT NULL);

-- ----------------------------
-- Uniques structure for table SDO_NETWORK_METADATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD UNIQUE ("SDO_OWNER", "NETWORK", "LRS_TABLE_NAME");
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD UNIQUE ("SDO_OWNER", "NETWORK");
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD UNIQUE ("SDO_OWNER", "NETWORK", "LINK_TABLE_NAME");
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD UNIQUE ("SDO_OWNER", "NETWORK", "NODE_TABLE_NAME");
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD UNIQUE ("SDO_OWNER", "NETWORK", "PATH_TABLE_NAME");
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD UNIQUE ("SDO_OWNER", "NETWORK", "PATH_LINK_TABLE_NAME");

-- ----------------------------
-- Checks structure for table SDO_NETWORK_METADATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK ("SDO_OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK ("NETWORK" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK ("NETWORK_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK ("NETWORK_CATEGORY" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK ("NODE_TABLE_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK ("LINK_TABLE_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK ("LINK_DIRECTION" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK (NETWORK_CATEGORY IN ('SPATIAL','LOGICAL'));
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK (GEOMETRY_TYPE IN (NULL,'SDO_GEOMETRY','LRS_GEOMETRY',
      'TOPO_GEOMETRY'));
ALTER TABLE "MDSYS"."SDO_NETWORK_METADATA_TABLE" ADD CHECK (LINK_DIRECTION IN ('UNDIRECTED','BIDIRECTED','DIRECTED'));

-- ----------------------------
-- Indexes structure for table SDO_NETWORK_TIMESTAMPS
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_NET_TIME_NET"
ON "MDSYS"."SDO_NETWORK_TIMESTAMPS" ("NETWORK" ASC)
LOGGING
VISIBLE;
CREATE INDEX "MDSYS"."SDO_NET_TIME_OWNER"
ON "MDSYS"."SDO_NETWORK_TIMESTAMPS" ("OWNER" ASC)
LOGGING
VISIBLE;
CREATE INDEX "MDSYS"."SDO_NET_TIME_TAB"
ON "MDSYS"."SDO_NETWORK_TIMESTAMPS" ("TABLE_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SDO_NETWORK_TIMESTAMPS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_TIMESTAMPS" ADD UNIQUE ("OWNER", "NETWORK", "TABLE_NAME");

-- ----------------------------
-- Checks structure for table SDO_NETWORK_TIMESTAMPS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_TIMESTAMPS" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_TIMESTAMPS" ADD CHECK ("NETWORK" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_TIMESTAMPS" ADD CHECK ("TABLE_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_TIMESTAMPS" ADD CHECK ("LAST_DML_TIME" IS NOT NULL);

-- ----------------------------
-- Uniques structure for table SDO_NETWORK_USER_DATA
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD UNIQUE ("SDO_OWNER", "NETWORK", "TABLE_TYPE", "DATA_NAME");

-- ----------------------------
-- Checks structure for table SDO_NETWORK_USER_DATA
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD CHECK ("SDO_OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD CHECK ("NETWORK" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD CHECK ("TABLE_TYPE" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD CHECK ("DATA_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD CHECK ("DATA_TYPE" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD CHECK ( NLS_UPPER(data_type) IN ('VARCHAR2','INTEGER','NUMBER','SDO_GEOMETRY','DATE','TIMESTAMP','OBJECT'));
ALTER TABLE "MDSYS"."SDO_NETWORK_USER_DATA" ADD CHECK ( NLS_UPPER(table_type) IN ('NODE','LINK','PATH','SUBPATH'));

-- ----------------------------
-- Uniques structure for table SDO_PC_BLK_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PC_BLK_TABLE" ADD UNIQUE ("SYS_NC_OID$");

-- ----------------------------
-- Indexes structure for table SDO_PREFERRED_OPS_SYSTEM
-- ----------------------------

-- ----------------------------
-- Triggers structure for table SDO_PREFERRED_OPS_SYSTEM
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."SDO_PREFERRED_OPS_SYSTEM_TRIG" BEFORE INSERT OR DELETE OR UPDATE ON "MDSYS"."SDO_PREFERRED_OPS_SYSTEM" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
BEGIN
delete from mdsys.sdo_cs_context_information;
END;CREATE OR REPLACE TRIGGER "MDSYS"."SDO_PREFERRED_OPS_SYS_TRIGGER" BEFORE INSERT OR UPDATE ON "MDSYS"."SDO_PREFERRED_OPS_SYSTEM" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
DECLARE
  c NUMBER;
BEGIN

delete from mdsys.sdo_cs_context_information;

  SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_OPS WHERE COORD_OP_ID = :new.COORD_OP_ID;
  IF(c < 1) THEN
    IF(:new.COORD_OP_ID > 0) THEN
      MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.COORD_OP_ID || ' does not exist.'));
    ELSE
      SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_OPS WHERE COORD_OP_ID = -:new.COORD_OP_ID;
      IF(c < 1) THEN
        MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.COORD_OP_ID || ' does not exist, neither does its forward version ' || -:new.COORD_OP_ID || '.'));
      ELSE
        SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_NON_ELEM_OPS WHERE COORD_OP_ID = -:new.COORD_OP_ID;
        IF(c < 1) THEN
          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Elementary operation ' || -:new.COORD_OP_ID || ' is not reversible.'));
        ELSE
          dbms_output.put_line('Concatenated operation ' || -:new.COORD_OP_ID || ' is not reversible, because of its following elementary component(s):');

          <<FIND_CULPRITS>>
          DECLARE
            CURSOR CULPRITS IS
              SELECT
                -PATHS.SINGLE_OPERATION_ID "COORD_OP_ID"
              FROM
                MDSYS.SDO_COORD_OP_PATHS PATHS
              WHERE
                PATHS.CONCAT_OPERATION_ID = -:new.COORD_OP_ID
              MINUS
              SELECT
                COORD_OP_ID
              FROM
                MDSYS.SDO_AVAILABLE_OPS;
            CULPRIT CULPRITS%ROWTYPE;
          BEGIN
            FOR CULPRIT IN CULPRITS LOOP
              dbms_output.put_line('Elementary operation ' || (-CULPRIT.COORD_OP_ID) || ' is not reversible.');
            END LOOP;
          END FIND_CULPRITS;

          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Concatenated operation ' || -:new.COORD_OP_ID || ' is not reversible.'));
        END IF;
      END IF;
    END IF;
  END IF;

  SELECT IS_IMPLEMENTED INTO c FROM MDSYS.SDO_AVAILABLE_OPS WHERE COORD_OP_ID = :new.COORD_OP_ID;
  IF(c = 0) THEN
    MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.COORD_OP_ID || ' is not implemented.'));
  END IF;
END;
-- ----------------------------
-- Checks structure for table SDO_PREFERRED_OPS_SYSTEM
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_SYSTEM" ADD CHECK ("SOURCE_SRID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_SYSTEM" ADD CHECK ("COORD_OP_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_SYSTEM" ADD CHECK ("TARGET_SRID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_PREFERRED_OPS_SYSTEM
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_SYSTEM" ADD PRIMARY KEY ("SOURCE_SRID", "TARGET_SRID");

-- ----------------------------
-- Indexes structure for table SDO_PREFERRED_OPS_USER
-- ----------------------------

-- ----------------------------
-- Triggers structure for table SDO_PREFERRED_OPS_USER
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."SDO_PREFERRED_OPS_USER_TRIGGER" BEFORE INSERT OR UPDATE ON "MDSYS"."SDO_PREFERRED_OPS_USER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW ENABLE
DECLARE
  c NUMBER;
BEGIN

delete from mdsys.sdo_cs_context_information;
  SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_OPS WHERE COORD_OP_ID = :new.COORD_OP_ID;
  IF(c < 1) THEN
    IF(:new.COORD_OP_ID > 0) THEN
      MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.COORD_OP_ID || ' does not exist.'));
    ELSE
      SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_OPS WHERE COORD_OP_ID = -:new.COORD_OP_ID;
      IF(c < 1) THEN
        MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.COORD_OP_ID || ' does not exist, neither does its forward version ' || -:new.COORD_OP_ID || '.'));
      ELSE
        SELECT COUNT(COORD_OP_ID) INTO c FROM MDSYS.SDO_AVAILABLE_NON_ELEM_OPS WHERE COORD_OP_ID = -:new.COORD_OP_ID;
        IF(c < 1) THEN
          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Elementary operation ' || -:new.COORD_OP_ID || ' is not reversible.'));
        ELSE
          dbms_output.put_line('Concatenated operation ' || -:new.COORD_OP_ID || ' is not reversible, because of its following elementary component(s):');

          <<FIND_CULPRITS>>
          DECLARE
            CURSOR CULPRITS IS
              SELECT
                -PATHS.SINGLE_OPERATION_ID "COORD_OP_ID"
              FROM
                MDSYS.SDO_COORD_OP_PATHS PATHS
              WHERE
                PATHS.CONCAT_OPERATION_ID = -:new.COORD_OP_ID
              MINUS
              SELECT
                COORD_OP_ID
              FROM
                MDSYS.SDO_AVAILABLE_OPS;
            CULPRIT CULPRITS%ROWTYPE;
          BEGIN
            FOR CULPRIT IN CULPRITS LOOP
              dbms_output.put_line('Elementary operation ' || (-CULPRIT.COORD_OP_ID) || ' is not reversible.');
            END LOOP;
          END FIND_CULPRITS;

          MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Concatenated operation ' || -:new.COORD_OP_ID || ' is not reversible'));
        END IF;
      END IF;
    END IF;
  END IF;

  SELECT IS_IMPLEMENTED INTO c FROM MDSYS.SDO_AVAILABLE_OPS WHERE COORD_OP_ID = :new.COORD_OP_ID;
  IF(c = 0) THEN
    MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, ('Operation ' || :new.COORD_OP_ID || ' is not implemented.'));
  END IF;
END;
-- ----------------------------
-- Checks structure for table SDO_PREFERRED_OPS_USER
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_USER" ADD CHECK ("USE_CASE" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_USER" ADD CHECK ("SOURCE_SRID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_USER" ADD CHECK ("COORD_OP_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_USER" ADD CHECK ("TARGET_SRID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_PREFERRED_OPS_USER
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PREFERRED_OPS_USER" ADD PRIMARY KEY ("USE_CASE", "SOURCE_SRID", "TARGET_SRID");

-- ----------------------------
-- Indexes structure for table SDO_PRIME_MERIDIANS
-- ----------------------------

-- ----------------------------
-- Uniques structure for table SDO_PRIME_MERIDIANS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PRIME_MERIDIANS" ADD UNIQUE ("PRIME_MERIDIAN_NAME");

-- ----------------------------
-- Checks structure for table SDO_PRIME_MERIDIANS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PRIME_MERIDIANS" ADD CHECK (PRIME_MERIDIAN_ID > 0);
ALTER TABLE "MDSYS"."SDO_PRIME_MERIDIANS" ADD CHECK ("PRIME_MERIDIAN_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_PRIME_MERIDIANS" ADD CHECK ("PRIME_MERIDIAN_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_PRIME_MERIDIANS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PRIME_MERIDIANS" ADD PRIMARY KEY ("PRIME_MERIDIAN_ID");

-- ----------------------------
-- Indexes structure for table SDO_SCENES_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_SCENES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_SCENES_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_SCENES_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_SCENES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_SCENES_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_STYLES_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_STYLES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_STYLES_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_STYLES_TABLE" ADD CHECK ("TYPE" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_STYLES_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_STYLES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_STYLES_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_THEMES_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_THEMES_IDX"
ON "MDSYS"."SDO_THEMES_TABLE" ("SDO_OWNER" ASC, "BASE_TABLE" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table SDO_THEMES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_THEMES_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_THEMES_TABLE" ADD CHECK ("BASE_TABLE" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_THEMES_TABLE" ADD CHECK ("GEOMETRY_COLUMN" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_THEMES_TABLE" ADD CHECK ("STYLING_RULES" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_THEMES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_THEMES_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Uniques structure for table SDO_TIN_BLK_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TIN_BLK_TABLE" ADD UNIQUE ("SYS_NC_OID$");

-- ----------------------------
-- Indexes structure for table SDO_TIN_PC_SEQ
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_TIN_PC_SEQ
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TIN_PC_SEQ" ADD CHECK ("SDO_OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_TIN_PC_SEQ" ADD CHECK ("TABLE_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_TIN_PC_SEQ
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TIN_PC_SEQ" ADD PRIMARY KEY ("SDO_OWNER", "TABLE_NAME");

-- ----------------------------
-- Indexes structure for table SDO_TIN_PC_SYSDATA_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_TIN_PC_IDX"
ON "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ("SDO_OWNER" ASC, "TABLE_NAME" ASC, "COLUMN_NAME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table SDO_TIN_PC_SYSDATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ADD UNIQUE ("SDO_OWNER", "TABLE_NAME", "COLUMN_NAME", "DEP_TABLE_SCHEMA", "DEP_TABLE_NAME");

-- ----------------------------
-- Checks structure for table SDO_TIN_PC_SYSDATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ADD CHECK ("SDO_OWNER" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ADD CHECK ("TABLE_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ADD CHECK ("COLUMN_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ADD CHECK ("DEP_TABLE_SCHEMA" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ADD CHECK ("DEP_TABLE_NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_TIN_PC_SYSDATA_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TIN_PC_SYSDATA_TABLE" ADD PRIMARY KEY ("DEP_TABLE_SCHEMA", "DEP_TABLE_NAME");

-- ----------------------------
-- Indexes structure for table SDO_TOPO_METADATA_TABLE
-- ----------------------------
CREATE INDEX "MDSYS"."SDO_TOPO_METADATA_IDX"
ON "MDSYS"."SDO_TOPO_METADATA_TABLE" ("SDO_OWNER" ASC, "TOPOLOGY" ASC, "TOPOLOGY_ID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table SDO_TXN_IDX_DELETES
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_TXN_IDX_DELETES
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TXN_IDX_DELETES" ADD PRIMARY KEY ("SDO_TXN_IDX_ID", "RID");

-- ----------------------------
-- Indexes structure for table SDO_TXN_IDX_EXP_UPD_RGN
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_TXN_IDX_EXP_UPD_RGN
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TXN_IDX_EXP_UPD_RGN" ADD PRIMARY KEY ("SDO_TXN_IDX_ID", "RID");

-- ----------------------------
-- Indexes structure for table SDO_TXN_IDX_INSERTS
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_TXN_IDX_INSERTS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_TXN_IDX_INSERTS" ADD PRIMARY KEY ("SDO_TXN_IDX_ID", "RID");

-- ----------------------------
-- Indexes structure for table SDO_UNITS_OF_MEASURE
-- ----------------------------

-- ----------------------------
-- Triggers structure for table SDO_UNITS_OF_MEASURE
-- ----------------------------
CREATE OR REPLACE TRIGGER "MDSYS"."SDO_UNITS_OF_MEASURE_TRIGGER" AFTER INSERT OR UPDATE ON "MDSYS"."SDO_UNITS_OF_MEASURE" REFERENCING OLD AS "OLD" NEW AS "NEW" ENABLE
DECLARE
  c NUMBER;
BEGIN
  select
    count(*)
  into
    c
  from (
    select
      name
    from
      (
        select unit_of_meas_name name, factor_b, factor_c from mdsys.sdo_units_of_measure
        union
        select short_name        name, factor_b, factor_c from mdsys.sdo_units_of_measure where not short_name is null
      )
    group by
      name
    having
      count(*) > 1
      and
      min(factor_b/factor_c) < max(factor_b/factor_c));

  if(c > 0) then
    MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, 'This unit name/short name has already been defined with another factor or base unit.');
  end if;

  ------------------------------------------

  select
    count(*)
  into
    c
  from
    mdsys.sdo_units_of_measure uom1,
    mdsys.sdo_units_of_measure uom2
  where
    uom1.target_uom_id = uom2.uom_id and
    not(lower(uom1.unit_of_meas_type) = lower(uom2.unit_of_meas_type));

  if(c > 0) then
    MDSYS.MDERR.RAISE_MD_ERROR('MD', 'SDO', -13199, 'Unit and base unit have different types.');
  end if;

END;
-- ----------------------------
-- Uniques structure for table SDO_UNITS_OF_MEASURE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD UNIQUE ("UOM_ID", "UNIT_OF_MEAS_TYPE");

-- ----------------------------
-- Checks structure for table SDO_UNITS_OF_MEASURE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK (FACTOR_B IS NULL OR FACTOR_B > 0);
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK (FACTOR_C IS NULL OR FACTOR_C > 0);
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK (target_uom_id in (9001, 9101, 9201, 10008, 19501));
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK ("UOM_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK ("UNIT_OF_MEAS_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK ("IS_LEGACY" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK (UOM_ID > 0);
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD CHECK (lower(unit_of_meas_type) in ('area', 'angle', 'length', 'scale', 'volume'));

-- ----------------------------
-- Primary Key structure for table SDO_UNITS_OF_MEASURE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD PRIMARY KEY ("UOM_ID");

-- ----------------------------
-- Indexes structure for table SDO_VIEWFRAMES_TABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_VIEWFRAMES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_VIEWFRAMES_TABLE" ADD CHECK ("NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_VIEWFRAMES_TABLE" ADD CHECK ("SCENE_NAME" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_VIEWFRAMES_TABLE" ADD CHECK ("DEFINITION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_VIEWFRAMES_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_VIEWFRAMES_TABLE" ADD PRIMARY KEY ("SDO_OWNER", "NAME");

-- ----------------------------
-- Indexes structure for table SDO_WS_CONFERENCE
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_WS_CONFERENCE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE" ADD CHECK ("CONFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_WS_CONFERENCE
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE" ADD PRIMARY KEY ("CONFERENCE_ID");

-- ----------------------------
-- Indexes structure for table SDO_WS_CONFERENCE_PARTICIPANTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_WS_CONFERENCE_PARTICIPANTS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS" ADD CHECK ("CONFERENCE_ID" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS" ADD CHECK ("PARTICIPANT" IS NOT NULL);
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS" ADD CHECK ("HAS_APPROVED" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_WS_CONFERENCE_PARTICIPANTS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS" ADD PRIMARY KEY ("CONFERENCE_ID", "PARTICIPANT");

-- ----------------------------
-- Indexes structure for table SDO_WS_CONFERENCE_RESULTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table SDO_WS_CONFERENCE_RESULTS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE_RESULTS" ADD CHECK ("CONFERENCE_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table SDO_WS_CONFERENCE_RESULTS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE_RESULTS" ADD PRIMARY KEY ("CONFERENCE_ID");

-- ----------------------------
-- Indexes structure for table SDO_XML_SCHEMAS
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SDO_XML_SCHEMAS
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_XML_SCHEMAS" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table SRSNAMESPACE_TABLE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table SRSNAMESPACE_TABLE
-- ----------------------------
ALTER TABLE "MDSYS"."SRSNAMESPACE_TABLE" ADD PRIMARY KEY ("SRSNAMESPACE", "SRSNAME");

-- ----------------------------
-- Indexes structure for table TOKENSESSIONMAP_T$
-- ----------------------------

-- ----------------------------
-- Uniques structure for table TOKENSESSIONMAP_T$
-- ----------------------------
ALTER TABLE "MDSYS"."TOKENSESSIONMAP_T$" ADD UNIQUE ("TOKENID");

-- ----------------------------
-- Primary Key structure for table TOKENSESSIONMAP_T$
-- ----------------------------
ALTER TABLE "MDSYS"."TOKENSESSIONMAP_T$" ADD PRIMARY KEY ("SESSIONID", "TOKENID");

-- ----------------------------
-- Uniques structure for table WFS_FEATURETABLEUPDATED$
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETABLEUPDATED$" ADD UNIQUE ("SYS_NC0000300004$");

-- ----------------------------
-- Indexes structure for table WFS_FEATURETYPE$
-- ----------------------------

-- ----------------------------
-- Uniques structure for table WFS_FEATURETYPE$
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPE$" ADD UNIQUE ("NAMESPACEURL", "FEATURETYPENAME");

-- ----------------------------
-- Primary Key structure for table WFS_FEATURETYPE$
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPE$" ADD PRIMARY KEY ("FEATURETYPEID");

-- ----------------------------
-- Indexes structure for table WFS_FEATURETYPEXMLCOLINFO$
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table WFS_FEATURETYPEXMLCOLINFO$
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPEXMLCOLINFO$" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table WFS_FTXSDINFO$
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table WFS_FTXSDINFO$
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FTXSDINFO$" ADD PRIMARY KEY ("FTXSDREFID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."CSW_DOMAININFO$"
-- ----------------------------
ALTER TABLE "MDSYS"."CSW_DOMAININFO$" ADD FOREIGN KEY ("RECORDTYPEID") REFERENCES "MDSYS"."CSW_RECORD_TYPES$" ("RECORDTYPEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."OGIS_GEOMETRY_COLUMNS"
-- ----------------------------
ALTER TABLE "MDSYS"."OGIS_GEOMETRY_COLUMNS" ADD FOREIGN KEY ("SRID") REFERENCES "MDSYS"."OGIS_SPATIAL_REFERENCE_SYSTEMS" ("SRID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."OLS_DIR_BUSINESSES"
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_BUSINESSES" ADD FOREIGN KEY ("CHAIN_ID") REFERENCES "MDSYS"."OLS_DIR_BUSINESS_CHAINS" ("CHAIN_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."OLS_DIR_CATEGORIES"
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIES" ADD FOREIGN KEY ("PARENT_ID", "CATEGORY_TYPE_ID") REFERENCES "MDSYS"."OLS_DIR_CATEGORIES" ("CATEGORY_ID", "CATEGORY_TYPE_ID");
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIES" ADD FOREIGN KEY ("CATEGORY_TYPE_ID") REFERENCES "MDSYS"."OLS_DIR_CATEGORY_TYPES" ("CATEGORY_TYPE_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."OLS_DIR_CATEGORIZATIONS"
-- ----------------------------
ALTER TABLE "MDSYS"."OLS_DIR_CATEGORIZATIONS" ADD FOREIGN KEY ("CATEGORY_ID", "CATEGORY_TYPE_ID") REFERENCES "MDSYS"."OLS_DIR_CATEGORIES" ("CATEGORY_ID", "CATEGORY_TYPE_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."ROWTOKENMAP_T$"
-- ----------------------------
ALTER TABLE "MDSYS"."ROWTOKENMAP_T$" ADD FOREIGN KEY ("TOKENID") REFERENCES "MDSYS"."TOKENSESSIONMAP_T$" ("TOKENID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_COORD_AXES"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_AXES" ADD FOREIGN KEY ("COORD_AXIS_NAME_ID") REFERENCES "MDSYS"."SDO_COORD_AXIS_NAMES" ("COORD_AXIS_NAME_ID");
ALTER TABLE "MDSYS"."SDO_COORD_AXES" ADD FOREIGN KEY ("COORD_SYS_ID") REFERENCES "MDSYS"."SDO_COORD_SYS" ("COORD_SYS_ID");
ALTER TABLE "MDSYS"."SDO_COORD_AXES" ADD FOREIGN KEY ("UOM_ID") REFERENCES "MDSYS"."SDO_UNITS_OF_MEASURE" ("UOM_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_COORD_OP_PARAM_USE"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_USE" ADD FOREIGN KEY ("COORD_OP_METHOD_ID") REFERENCES "MDSYS"."SDO_COORD_OP_METHODS" ("COORD_OP_METHOD_ID");
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_USE" ADD FOREIGN KEY ("PARAMETER_ID") REFERENCES "MDSYS"."SDO_COORD_OP_PARAMS" ("PARAMETER_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_COORD_OP_PARAM_VALS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_VALS" ADD FOREIGN KEY ("COORD_OP_METHOD_ID") REFERENCES "MDSYS"."SDO_COORD_OP_METHODS" ("COORD_OP_METHOD_ID");
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_VALS" ADD FOREIGN KEY ("COORD_OP_ID") REFERENCES "MDSYS"."SDO_COORD_OPS" ("COORD_OP_ID");
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_VALS" ADD FOREIGN KEY ("PARAMETER_ID") REFERENCES "MDSYS"."SDO_COORD_OP_PARAMS" ("PARAMETER_ID");
ALTER TABLE "MDSYS"."SDO_COORD_OP_PARAM_VALS" ADD FOREIGN KEY ("UOM_ID") REFERENCES "MDSYS"."SDO_UNITS_OF_MEASURE" ("UOM_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_COORD_OP_PATHS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OP_PATHS" ADD FOREIGN KEY ("SINGLE_OP_SOURCE_ID") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");
ALTER TABLE "MDSYS"."SDO_COORD_OP_PATHS" ADD FOREIGN KEY ("SINGLE_OP_TARGET_ID") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_COORD_OPS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD FOREIGN KEY ("LEGACY_CODE") REFERENCES "MDSYS"."SDO_COORD_OPS" ("COORD_OP_ID");
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD FOREIGN KEY ("COORD_OP_METHOD_ID") REFERENCES "MDSYS"."SDO_COORD_OP_METHODS" ("COORD_OP_METHOD_ID");
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD FOREIGN KEY ("SOURCE_SRID") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");
ALTER TABLE "MDSYS"."SDO_COORD_OPS" ADD FOREIGN KEY ("TARGET_SRID") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_COORD_REF_SYS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD FOREIGN KEY ("COORD_SYS_ID") REFERENCES "MDSYS"."SDO_COORD_SYS" ("COORD_SYS_ID");
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD FOREIGN KEY ("DATUM_ID") REFERENCES "MDSYS"."SDO_DATUMS" ("DATUM_ID");
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD FOREIGN KEY ("SOURCE_GEOG_SRID") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD FOREIGN KEY ("CMPD_HORIZ_SRID") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD FOREIGN KEY ("LEGACY_CODE") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD FOREIGN KEY ("PROJECTION_CONV_ID") REFERENCES "MDSYS"."SDO_COORD_OPS" ("COORD_OP_ID");
ALTER TABLE "MDSYS"."SDO_COORD_REF_SYS" ADD FOREIGN KEY ("CMPD_VERT_SRID") REFERENCES "MDSYS"."SDO_COORD_REF_SYS" ("SRID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_DATUMS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD FOREIGN KEY ("ELLIPSOID_ID") REFERENCES "MDSYS"."SDO_ELLIPSOIDS" ("ELLIPSOID_ID");
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD FOREIGN KEY ("LEGACY_CODE") REFERENCES "MDSYS"."SDO_DATUMS" ("DATUM_ID");
ALTER TABLE "MDSYS"."SDO_DATUMS" ADD FOREIGN KEY ("PRIME_MERIDIAN_ID") REFERENCES "MDSYS"."SDO_PRIME_MERIDIANS" ("PRIME_MERIDIAN_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_ELLIPSOIDS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_ELLIPSOIDS" ADD FOREIGN KEY ("UOM_ID") REFERENCES "MDSYS"."SDO_UNITS_OF_MEASURE" ("UOM_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_PRIME_MERIDIANS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_PRIME_MERIDIANS" ADD FOREIGN KEY ("UOM_ID") REFERENCES "MDSYS"."SDO_UNITS_OF_MEASURE" ("UOM_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_UNITS_OF_MEASURE"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD FOREIGN KEY ("LEGACY_CODE") REFERENCES "MDSYS"."SDO_ELLIPSOIDS" ("ELLIPSOID_ID");
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD FOREIGN KEY ("LEGACY_CODE") REFERENCES "MDSYS"."SDO_UNITS_OF_MEASURE" ("UOM_ID");
ALTER TABLE "MDSYS"."SDO_UNITS_OF_MEASURE" ADD FOREIGN KEY ("TARGET_UOM_ID") REFERENCES "MDSYS"."SDO_UNITS_OF_MEASURE" ("UOM_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS"
-- ----------------------------
ALTER TABLE "MDSYS"."SDO_WS_CONFERENCE_PARTICIPANTS" ADD FOREIGN KEY ("CONFERENCE_ID") REFERENCES "MDSYS"."SDO_WS_CONFERENCE" ("CONFERENCE_ID");

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."WFS_FEATUREINSTANCEMETADATA$"
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATUREINSTANCEMETADATA$" ADD FOREIGN KEY ("FEATURETYPEID") REFERENCES "MDSYS"."WFS_FEATURETYPE$" ("FEATURETYPEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."WFS_FEATURETYPEATTRS$"
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPEATTRS$" ADD FOREIGN KEY ("FEATURETYPEID") REFERENCES "MDSYS"."WFS_FEATURETYPE$" ("FEATURETYPEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."WFS_FEATURETYPENESTEDSDOS$"
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPENESTEDSDOS$" ADD FOREIGN KEY ("FEATURETYPEID") REFERENCES "MDSYS"."WFS_FEATURETYPE$" ("FEATURETYPEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."WFS_FEATURETYPESIMPLETAGATTRS$"
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPESIMPLETAGATTRS$" ADD FOREIGN KEY ("FEATURETYPEID") REFERENCES "MDSYS"."WFS_FEATURETYPE$" ("FEATURETYPEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."WFS_FEATURETYPETAGS$"
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPETAGS$" ADD FOREIGN KEY ("FEATURETYPEID") REFERENCES "MDSYS"."WFS_FEATURETYPE$" ("FEATURETYPEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "MDSYS"."WFS_FEATURETYPEXMLCOLINFO$"
-- ----------------------------
ALTER TABLE "MDSYS"."WFS_FEATURETYPEXMLCOLINFO$" ADD FOREIGN KEY ("FEATURETYPEID") REFERENCES "MDSYS"."WFS_FEATURETYPE$" ("FEATURETYPEID") ON DELETE CASCADE;
